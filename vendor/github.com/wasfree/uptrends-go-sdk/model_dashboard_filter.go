/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// DashboardFilter struct for DashboardFilter
type DashboardFilter struct {
	SelectedPeriod *SelectedPeriod `json:"SelectedPeriod,omitempty"`
	Monitors *[]string `json:"Monitors,omitempty"`
	MonitorGroups *[]string `json:"MonitorGroups,omitempty"`
	Checkpoints *[]int32 `json:"Checkpoints,omitempty"`
}

// NewDashboardFilter instantiates a new DashboardFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardFilter() *DashboardFilter {
	this := DashboardFilter{}
	return &this
}

// NewDashboardFilterWithDefaults instantiates a new DashboardFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardFilterWithDefaults() *DashboardFilter {
	this := DashboardFilter{}
	return &this
}

// GetSelectedPeriod returns the SelectedPeriod field value if set, zero value otherwise.
func (o *DashboardFilter) GetSelectedPeriod() SelectedPeriod {
	if o == nil || o.SelectedPeriod == nil {
		var ret SelectedPeriod
		return ret
	}
	return *o.SelectedPeriod
}

// GetSelectedPeriodOk returns a tuple with the SelectedPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardFilter) GetSelectedPeriodOk() (*SelectedPeriod, bool) {
	if o == nil || o.SelectedPeriod == nil {
		return nil, false
	}
	return o.SelectedPeriod, true
}

// HasSelectedPeriod returns a boolean if a field has been set.
func (o *DashboardFilter) HasSelectedPeriod() bool {
	if o != nil && o.SelectedPeriod != nil {
		return true
	}

	return false
}

// SetSelectedPeriod gets a reference to the given SelectedPeriod and assigns it to the SelectedPeriod field.
func (o *DashboardFilter) SetSelectedPeriod(v SelectedPeriod) {
	o.SelectedPeriod = &v
}

// GetMonitors returns the Monitors field value if set, zero value otherwise.
func (o *DashboardFilter) GetMonitors() []string {
	if o == nil || o.Monitors == nil {
		var ret []string
		return ret
	}
	return *o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardFilter) GetMonitorsOk() (*[]string, bool) {
	if o == nil || o.Monitors == nil {
		return nil, false
	}
	return o.Monitors, true
}

// HasMonitors returns a boolean if a field has been set.
func (o *DashboardFilter) HasMonitors() bool {
	if o != nil && o.Monitors != nil {
		return true
	}

	return false
}

// SetMonitors gets a reference to the given []string and assigns it to the Monitors field.
func (o *DashboardFilter) SetMonitors(v []string) {
	o.Monitors = &v
}

// GetMonitorGroups returns the MonitorGroups field value if set, zero value otherwise.
func (o *DashboardFilter) GetMonitorGroups() []string {
	if o == nil || o.MonitorGroups == nil {
		var ret []string
		return ret
	}
	return *o.MonitorGroups
}

// GetMonitorGroupsOk returns a tuple with the MonitorGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardFilter) GetMonitorGroupsOk() (*[]string, bool) {
	if o == nil || o.MonitorGroups == nil {
		return nil, false
	}
	return o.MonitorGroups, true
}

// HasMonitorGroups returns a boolean if a field has been set.
func (o *DashboardFilter) HasMonitorGroups() bool {
	if o != nil && o.MonitorGroups != nil {
		return true
	}

	return false
}

// SetMonitorGroups gets a reference to the given []string and assigns it to the MonitorGroups field.
func (o *DashboardFilter) SetMonitorGroups(v []string) {
	o.MonitorGroups = &v
}

// GetCheckpoints returns the Checkpoints field value if set, zero value otherwise.
func (o *DashboardFilter) GetCheckpoints() []int32 {
	if o == nil || o.Checkpoints == nil {
		var ret []int32
		return ret
	}
	return *o.Checkpoints
}

// GetCheckpointsOk returns a tuple with the Checkpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardFilter) GetCheckpointsOk() (*[]int32, bool) {
	if o == nil || o.Checkpoints == nil {
		return nil, false
	}
	return o.Checkpoints, true
}

// HasCheckpoints returns a boolean if a field has been set.
func (o *DashboardFilter) HasCheckpoints() bool {
	if o != nil && o.Checkpoints != nil {
		return true
	}

	return false
}

// SetCheckpoints gets a reference to the given []int32 and assigns it to the Checkpoints field.
func (o *DashboardFilter) SetCheckpoints(v []int32) {
	o.Checkpoints = &v
}

func (o DashboardFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SelectedPeriod != nil {
		toSerialize["SelectedPeriod"] = o.SelectedPeriod
	}
	if o.Monitors != nil {
		toSerialize["Monitors"] = o.Monitors
	}
	if o.MonitorGroups != nil {
		toSerialize["MonitorGroups"] = o.MonitorGroups
	}
	if o.Checkpoints != nil {
		toSerialize["Checkpoints"] = o.Checkpoints
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardFilter struct {
	value *DashboardFilter
	isSet bool
}

func (v NullableDashboardFilter) Get() *DashboardFilter {
	return v.value
}

func (v *NullableDashboardFilter) Set(val *DashboardFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardFilter(val *DashboardFilter) *NullableDashboardFilter {
	return &NullableDashboardFilter{value: val, isSet: true}
}

func (v NullableDashboardFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


