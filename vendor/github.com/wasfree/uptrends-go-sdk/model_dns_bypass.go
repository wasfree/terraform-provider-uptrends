/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// DnsBypass struct for DnsBypass
type DnsBypass struct {
	Source *string `json:"Source,omitempty"`
	Target *string `json:"Target,omitempty"`
}

// NewDnsBypass instantiates a new DnsBypass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsBypass() *DnsBypass {
	this := DnsBypass{}
	return &this
}

// NewDnsBypassWithDefaults instantiates a new DnsBypass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsBypassWithDefaults() *DnsBypass {
	this := DnsBypass{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DnsBypass) GetSource() string {
	if o == nil || isNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsBypass) GetSourceOk() (*string, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DnsBypass) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DnsBypass) SetSource(v string) {
	o.Source = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *DnsBypass) GetTarget() string {
	if o == nil || isNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsBypass) GetTargetOk() (*string, bool) {
	if o == nil || isNil(o.Target) {
    return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *DnsBypass) HasTarget() bool {
	if o != nil && !isNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *DnsBypass) SetTarget(v string) {
	o.Target = &v
}

func (o DnsBypass) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Source) {
		toSerialize["Source"] = o.Source
	}
	if !isNil(o.Target) {
		toSerialize["Target"] = o.Target
	}
	return json.Marshal(toSerialize)
}

type NullableDnsBypass struct {
	value *DnsBypass
	isSet bool
}

func (v NullableDnsBypass) Get() *DnsBypass {
	return v.value
}

func (v *NullableDnsBypass) Set(val *DnsBypass) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsBypass) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsBypass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsBypass(val *DnsBypass) *NullableDnsBypass {
	return &NullableDnsBypass{value: val, isSet: true}
}

func (v NullableDnsBypass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsBypass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


