/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// DnsQuery 
type DnsQuery string

// List of DnsQuery
const (
	DNSQUERY_A_RECORD DnsQuery = "ARecord"
	DNSQUERY_CNAME_RECORD DnsQuery = "CnameRecord"
	DNSQUERY_MX_RECORD DnsQuery = "MxRecord"
	DNSQUERY_NS_RECORD DnsQuery = "NsRecord"
	DNSQUERY_TXT_RECORD DnsQuery = "TxtRecord"
	DNSQUERY_SOA_RECORD DnsQuery = "SoaRecord"
	DNSQUERY_ROOT_SERVER DnsQuery = "RootServer"
	DNSQUERY_AAAA_RECORD DnsQuery = "AaaaRecord"
	DNSQUERY_SRV_RECORD DnsQuery = "SrvRecord"
)

// All allowed values of DnsQuery enum
var AllowedDnsQueryEnumValues = []DnsQuery{
	"ARecord",
	"CnameRecord",
	"MxRecord",
	"NsRecord",
	"TxtRecord",
	"SoaRecord",
	"RootServer",
	"AaaaRecord",
	"SrvRecord",
}

func (v *DnsQuery) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DnsQuery(value)
	for _, existing := range AllowedDnsQueryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DnsQuery", value)
}

// NewDnsQueryFromValue returns a pointer to a valid DnsQuery
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDnsQueryFromValue(v string) (*DnsQuery, error) {
	ev := DnsQuery(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DnsQuery: valid values are %v", v, AllowedDnsQueryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DnsQuery) IsValid() bool {
	for _, existing := range AllowedDnsQueryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DnsQuery value
func (v DnsQuery) Ptr() *DnsQuery {
	return &v
}

type NullableDnsQuery struct {
	value *DnsQuery
	isSet bool
}

func (v NullableDnsQuery) Get() *DnsQuery {
	return v.value
}

func (v *NullableDnsQuery) Set(val *DnsQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsQuery(val *DnsQuery) *NullableDnsQuery {
	return &NullableDnsQuery{value: val, isSet: true}
}

func (v NullableDnsQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

