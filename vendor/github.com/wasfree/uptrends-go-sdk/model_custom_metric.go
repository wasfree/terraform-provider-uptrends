/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// CustomMetric struct for CustomMetric
type CustomMetric struct {
	Name *string `json:"Name,omitempty"`
	VariableName *string `json:"VariableName,omitempty"`
}

// NewCustomMetric instantiates a new CustomMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomMetric() *CustomMetric {
	this := CustomMetric{}
	return &this
}

// NewCustomMetricWithDefaults instantiates a new CustomMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomMetricWithDefaults() *CustomMetric {
	this := CustomMetric{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CustomMetric) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomMetric) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CustomMetric) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CustomMetric) SetName(v string) {
	o.Name = &v
}

// GetVariableName returns the VariableName field value if set, zero value otherwise.
func (o *CustomMetric) GetVariableName() string {
	if o == nil || o.VariableName == nil {
		var ret string
		return ret
	}
	return *o.VariableName
}

// GetVariableNameOk returns a tuple with the VariableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomMetric) GetVariableNameOk() (*string, bool) {
	if o == nil || o.VariableName == nil {
		return nil, false
	}
	return o.VariableName, true
}

// HasVariableName returns a boolean if a field has been set.
func (o *CustomMetric) HasVariableName() bool {
	if o != nil && o.VariableName != nil {
		return true
	}

	return false
}

// SetVariableName gets a reference to the given string and assigns it to the VariableName field.
func (o *CustomMetric) SetVariableName(v string) {
	o.VariableName = &v
}

func (o CustomMetric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.VariableName != nil {
		toSerialize["VariableName"] = o.VariableName
	}
	return json.Marshal(toSerialize)
}

type NullableCustomMetric struct {
	value *CustomMetric
	isSet bool
}

func (v NullableCustomMetric) Get() *CustomMetric {
	return v.value
}

func (v *NullableCustomMetric) Set(val *CustomMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomMetric(val *CustomMetric) *NullableCustomMetric {
	return &NullableCustomMetric{value: val, isSet: true}
}

func (v NullableCustomMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


