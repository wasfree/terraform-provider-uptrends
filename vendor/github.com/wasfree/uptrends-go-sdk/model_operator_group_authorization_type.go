/*
 * Uptrends API v4
 *
 * This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// OperatorGroupAuthorizationType 
type OperatorGroupAuthorizationType string

// List of OperatorGroupAuthorizationType
const (
	OPERATORGROUPAUTHORIZATIONTYPE_SHARE_DASHBOARDS OperatorGroupAuthorizationType = "ShareDashboards"
	OPERATORGROUPAUTHORIZATIONTYPE_ALLOW_INFRA OperatorGroupAuthorizationType = "AllowInfra"
	OPERATORGROUPAUTHORIZATIONTYPE_ADMINISTRATOR OperatorGroupAuthorizationType = "Administrator"
	OPERATORGROUPAUTHORIZATIONTYPE_TECHNICAL_CONTACT OperatorGroupAuthorizationType = "TechnicalContact"
	OPERATORGROUPAUTHORIZATIONTYPE_FINANCIAL_OPERATOR OperatorGroupAuthorizationType = "FinancialOperator"
	OPERATORGROUPAUTHORIZATIONTYPE_BASIC_OPERATOR OperatorGroupAuthorizationType = "BasicOperator"
)

var allowedOperatorGroupAuthorizationTypeEnumValues = []OperatorGroupAuthorizationType{
	"ShareDashboards",
	"AllowInfra",
	"Administrator",
	"TechnicalContact",
	"FinancialOperator",
	"BasicOperator",
}

func (v *OperatorGroupAuthorizationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OperatorGroupAuthorizationType(value)
	for _, existing := range allowedOperatorGroupAuthorizationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OperatorGroupAuthorizationType", value)
}

// NewOperatorGroupAuthorizationTypeFromValue returns a pointer to a valid OperatorGroupAuthorizationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperatorGroupAuthorizationTypeFromValue(v string) (*OperatorGroupAuthorizationType, error) {
	ev := OperatorGroupAuthorizationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OperatorGroupAuthorizationType: valid values are %v", v, allowedOperatorGroupAuthorizationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OperatorGroupAuthorizationType) IsValid() bool {
	for _, existing := range allowedOperatorGroupAuthorizationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OperatorGroupAuthorizationType value
func (v OperatorGroupAuthorizationType) Ptr() *OperatorGroupAuthorizationType {
	return &v
}

type NullableOperatorGroupAuthorizationType struct {
	value *OperatorGroupAuthorizationType
	isSet bool
}

func (v NullableOperatorGroupAuthorizationType) Get() *OperatorGroupAuthorizationType {
	return v.value
}

func (v *NullableOperatorGroupAuthorizationType) Set(val *OperatorGroupAuthorizationType) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatorGroupAuthorizationType) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatorGroupAuthorizationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatorGroupAuthorizationType(val *OperatorGroupAuthorizationType) *NullableOperatorGroupAuthorizationType {
	return &NullableOperatorGroupAuthorizationType{value: val, isSet: true}
}

func (v NullableOperatorGroupAuthorizationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatorGroupAuthorizationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

