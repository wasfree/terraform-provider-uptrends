/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// VaultItemFileInfo The file info that is stored in this vault item, if applicable
type VaultItemFileInfo struct {
	Data *string `json:"Data,omitempty"`
	// Name of the uploaded file.
	Name *string `json:"Name,omitempty"`
	// Size of the uploaded file.
	Size int32 `json:"Size"`
}

// NewVaultItemFileInfo instantiates a new VaultItemFileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultItemFileInfo(size int32) *VaultItemFileInfo {
	this := VaultItemFileInfo{}
	this.Size = size
	return &this
}

// NewVaultItemFileInfoWithDefaults instantiates a new VaultItemFileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultItemFileInfoWithDefaults() *VaultItemFileInfo {
	this := VaultItemFileInfo{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *VaultItemFileInfo) GetData() string {
	if o == nil || isNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultItemFileInfo) GetDataOk() (*string, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *VaultItemFileInfo) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *VaultItemFileInfo) SetData(v string) {
	o.Data = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VaultItemFileInfo) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultItemFileInfo) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VaultItemFileInfo) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VaultItemFileInfo) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value
func (o *VaultItemFileInfo) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *VaultItemFileInfo) GetSizeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *VaultItemFileInfo) SetSize(v int32) {
	o.Size = v
}

func (o VaultItemFileInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["Data"] = o.Data
	}
	if !isNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if true {
		toSerialize["Size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableVaultItemFileInfo struct {
	value *VaultItemFileInfo
	isSet bool
}

func (v NullableVaultItemFileInfo) Get() *VaultItemFileInfo {
	return v.value
}

func (v *NullableVaultItemFileInfo) Set(val *VaultItemFileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultItemFileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultItemFileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultItemFileInfo(val *VaultItemFileInfo) *NullableVaultItemFileInfo {
	return &NullableVaultItemFileInfo{value: val, isSet: true}
}

func (v NullableVaultItemFileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultItemFileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


