/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// VaultItemTypes 
type VaultItemTypes string

// List of VaultItemTypes
const (
	VAULTITEMTYPES_CREDENTIAL_SET VaultItemTypes = "CredentialSet"
	VAULTITEMTYPES_CERTIFICATE VaultItemTypes = "Certificate"
	VAULTITEMTYPES_CERTIFICATE_ARCHIVE VaultItemTypes = "CertificateArchive"
	VAULTITEMTYPES_FILE VaultItemTypes = "File"
	VAULTITEMTYPES_ONE_TIME_PASSWORD VaultItemTypes = "OneTimePassword"
)

// All allowed values of VaultItemTypes enum
var AllowedVaultItemTypesEnumValues = []VaultItemTypes{
	"CredentialSet",
	"Certificate",
	"CertificateArchive",
	"File",
	"OneTimePassword",
}

func (v *VaultItemTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VaultItemTypes(value)
	for _, existing := range AllowedVaultItemTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VaultItemTypes", value)
}

// NewVaultItemTypesFromValue returns a pointer to a valid VaultItemTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVaultItemTypesFromValue(v string) (*VaultItemTypes, error) {
	ev := VaultItemTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VaultItemTypes: valid values are %v", v, AllowedVaultItemTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VaultItemTypes) IsValid() bool {
	for _, existing := range AllowedVaultItemTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VaultItemTypes value
func (v VaultItemTypes) Ptr() *VaultItemTypes {
	return &v
}

type NullableVaultItemTypes struct {
	value *VaultItemTypes
	isSet bool
}

func (v NullableVaultItemTypes) Get() *VaultItemTypes {
	return v.value
}

func (v *NullableVaultItemTypes) Set(val *VaultItemTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultItemTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultItemTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultItemTypes(val *VaultItemTypes) *NullableVaultItemTypes {
	return &NullableVaultItemTypes{value: val, isSet: true}
}

func (v NullableVaultItemTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultItemTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

