/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// VaultItemCertificateArchive The certificate archive that is stored in this vault item, if applicable
type VaultItemCertificateArchive struct {
	// The issuer of this certificate
	Issuer *string `json:"Issuer,omitempty"`
	// The start date of this certificate
	NotBefore map[string]interface{} `json:"NotBefore"`
	// The certificate expiry date
	NotAfter map[string]interface{} `json:"NotAfter"`
	// Used to specify a new or changed password. The value will be encrypted when stored, and will not be displayed when a CertificateArchive is retrieved.
	Password *string `json:"Password,omitempty"`
	// Used to specify the certificate content as a base64 string. The value will be encrypted when stored, and will not be displayed when a CertificateArchive is retrieved.
	ArchiveData *string `json:"ArchiveData,omitempty"`
}

// NewVaultItemCertificateArchive instantiates a new VaultItemCertificateArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultItemCertificateArchive(notBefore map[string]interface{}, notAfter map[string]interface{}) *VaultItemCertificateArchive {
	this := VaultItemCertificateArchive{}
	this.NotBefore = notBefore
	this.NotAfter = notAfter
	return &this
}

// NewVaultItemCertificateArchiveWithDefaults instantiates a new VaultItemCertificateArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultItemCertificateArchiveWithDefaults() *VaultItemCertificateArchive {
	this := VaultItemCertificateArchive{}
	return &this
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *VaultItemCertificateArchive) GetIssuer() string {
	if o == nil || isNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultItemCertificateArchive) GetIssuerOk() (*string, bool) {
	if o == nil || isNil(o.Issuer) {
    return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *VaultItemCertificateArchive) HasIssuer() bool {
	if o != nil && !isNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *VaultItemCertificateArchive) SetIssuer(v string) {
	o.Issuer = &v
}

// GetNotBefore returns the NotBefore field value
func (o *VaultItemCertificateArchive) GetNotBefore() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value
// and a boolean to check if the value has been set.
func (o *VaultItemCertificateArchive) GetNotBeforeOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.NotBefore, true
}

// SetNotBefore sets field value
func (o *VaultItemCertificateArchive) SetNotBefore(v map[string]interface{}) {
	o.NotBefore = v
}

// GetNotAfter returns the NotAfter field value
func (o *VaultItemCertificateArchive) GetNotAfter() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value
// and a boolean to check if the value has been set.
func (o *VaultItemCertificateArchive) GetNotAfterOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.NotAfter, true
}

// SetNotAfter sets field value
func (o *VaultItemCertificateArchive) SetNotAfter(v map[string]interface{}) {
	o.NotAfter = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *VaultItemCertificateArchive) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultItemCertificateArchive) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
    return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *VaultItemCertificateArchive) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *VaultItemCertificateArchive) SetPassword(v string) {
	o.Password = &v
}

// GetArchiveData returns the ArchiveData field value if set, zero value otherwise.
func (o *VaultItemCertificateArchive) GetArchiveData() string {
	if o == nil || isNil(o.ArchiveData) {
		var ret string
		return ret
	}
	return *o.ArchiveData
}

// GetArchiveDataOk returns a tuple with the ArchiveData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultItemCertificateArchive) GetArchiveDataOk() (*string, bool) {
	if o == nil || isNil(o.ArchiveData) {
    return nil, false
	}
	return o.ArchiveData, true
}

// HasArchiveData returns a boolean if a field has been set.
func (o *VaultItemCertificateArchive) HasArchiveData() bool {
	if o != nil && !isNil(o.ArchiveData) {
		return true
	}

	return false
}

// SetArchiveData gets a reference to the given string and assigns it to the ArchiveData field.
func (o *VaultItemCertificateArchive) SetArchiveData(v string) {
	o.ArchiveData = &v
}

func (o VaultItemCertificateArchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Issuer) {
		toSerialize["Issuer"] = o.Issuer
	}
	if true {
		toSerialize["NotBefore"] = o.NotBefore
	}
	if true {
		toSerialize["NotAfter"] = o.NotAfter
	}
	if !isNil(o.Password) {
		toSerialize["Password"] = o.Password
	}
	if !isNil(o.ArchiveData) {
		toSerialize["ArchiveData"] = o.ArchiveData
	}
	return json.Marshal(toSerialize)
}

type NullableVaultItemCertificateArchive struct {
	value *VaultItemCertificateArchive
	isSet bool
}

func (v NullableVaultItemCertificateArchive) Get() *VaultItemCertificateArchive {
	return v.value
}

func (v *NullableVaultItemCertificateArchive) Set(val *VaultItemCertificateArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultItemCertificateArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultItemCertificateArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultItemCertificateArchive(val *VaultItemCertificateArchive) *NullableVaultItemCertificateArchive {
	return &NullableVaultItemCertificateArchive{value: val, isSet: true}
}

func (v NullableVaultItemCertificateArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultItemCertificateArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


