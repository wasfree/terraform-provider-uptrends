/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// ThrottlingOptions struct for ThrottlingOptions
type ThrottlingOptions struct {
	ThrottlingType *ThrottlingType `json:"ThrottlingType,omitempty"`
	ThrottlingValue *ThrottlingValue `json:"ThrottlingValue,omitempty"`
	ThrottlingSpeedUp *int32 `json:"ThrottlingSpeedUp,omitempty"`
	ThrottlingSpeedDown *int32 `json:"ThrottlingSpeedDown,omitempty"`
	ThrottlingLatency *int32 `json:"ThrottlingLatency,omitempty"`
}

// NewThrottlingOptions instantiates a new ThrottlingOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThrottlingOptions() *ThrottlingOptions {
	this := ThrottlingOptions{}
	return &this
}

// NewThrottlingOptionsWithDefaults instantiates a new ThrottlingOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThrottlingOptionsWithDefaults() *ThrottlingOptions {
	this := ThrottlingOptions{}
	return &this
}

// GetThrottlingType returns the ThrottlingType field value if set, zero value otherwise.
func (o *ThrottlingOptions) GetThrottlingType() ThrottlingType {
	if o == nil || isNil(o.ThrottlingType) {
		var ret ThrottlingType
		return ret
	}
	return *o.ThrottlingType
}

// GetThrottlingTypeOk returns a tuple with the ThrottlingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThrottlingOptions) GetThrottlingTypeOk() (*ThrottlingType, bool) {
	if o == nil || isNil(o.ThrottlingType) {
    return nil, false
	}
	return o.ThrottlingType, true
}

// HasThrottlingType returns a boolean if a field has been set.
func (o *ThrottlingOptions) HasThrottlingType() bool {
	if o != nil && !isNil(o.ThrottlingType) {
		return true
	}

	return false
}

// SetThrottlingType gets a reference to the given ThrottlingType and assigns it to the ThrottlingType field.
func (o *ThrottlingOptions) SetThrottlingType(v ThrottlingType) {
	o.ThrottlingType = &v
}

// GetThrottlingValue returns the ThrottlingValue field value if set, zero value otherwise.
func (o *ThrottlingOptions) GetThrottlingValue() ThrottlingValue {
	if o == nil || isNil(o.ThrottlingValue) {
		var ret ThrottlingValue
		return ret
	}
	return *o.ThrottlingValue
}

// GetThrottlingValueOk returns a tuple with the ThrottlingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThrottlingOptions) GetThrottlingValueOk() (*ThrottlingValue, bool) {
	if o == nil || isNil(o.ThrottlingValue) {
    return nil, false
	}
	return o.ThrottlingValue, true
}

// HasThrottlingValue returns a boolean if a field has been set.
func (o *ThrottlingOptions) HasThrottlingValue() bool {
	if o != nil && !isNil(o.ThrottlingValue) {
		return true
	}

	return false
}

// SetThrottlingValue gets a reference to the given ThrottlingValue and assigns it to the ThrottlingValue field.
func (o *ThrottlingOptions) SetThrottlingValue(v ThrottlingValue) {
	o.ThrottlingValue = &v
}

// GetThrottlingSpeedUp returns the ThrottlingSpeedUp field value if set, zero value otherwise.
func (o *ThrottlingOptions) GetThrottlingSpeedUp() int32 {
	if o == nil || isNil(o.ThrottlingSpeedUp) {
		var ret int32
		return ret
	}
	return *o.ThrottlingSpeedUp
}

// GetThrottlingSpeedUpOk returns a tuple with the ThrottlingSpeedUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThrottlingOptions) GetThrottlingSpeedUpOk() (*int32, bool) {
	if o == nil || isNil(o.ThrottlingSpeedUp) {
    return nil, false
	}
	return o.ThrottlingSpeedUp, true
}

// HasThrottlingSpeedUp returns a boolean if a field has been set.
func (o *ThrottlingOptions) HasThrottlingSpeedUp() bool {
	if o != nil && !isNil(o.ThrottlingSpeedUp) {
		return true
	}

	return false
}

// SetThrottlingSpeedUp gets a reference to the given int32 and assigns it to the ThrottlingSpeedUp field.
func (o *ThrottlingOptions) SetThrottlingSpeedUp(v int32) {
	o.ThrottlingSpeedUp = &v
}

// GetThrottlingSpeedDown returns the ThrottlingSpeedDown field value if set, zero value otherwise.
func (o *ThrottlingOptions) GetThrottlingSpeedDown() int32 {
	if o == nil || isNil(o.ThrottlingSpeedDown) {
		var ret int32
		return ret
	}
	return *o.ThrottlingSpeedDown
}

// GetThrottlingSpeedDownOk returns a tuple with the ThrottlingSpeedDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThrottlingOptions) GetThrottlingSpeedDownOk() (*int32, bool) {
	if o == nil || isNil(o.ThrottlingSpeedDown) {
    return nil, false
	}
	return o.ThrottlingSpeedDown, true
}

// HasThrottlingSpeedDown returns a boolean if a field has been set.
func (o *ThrottlingOptions) HasThrottlingSpeedDown() bool {
	if o != nil && !isNil(o.ThrottlingSpeedDown) {
		return true
	}

	return false
}

// SetThrottlingSpeedDown gets a reference to the given int32 and assigns it to the ThrottlingSpeedDown field.
func (o *ThrottlingOptions) SetThrottlingSpeedDown(v int32) {
	o.ThrottlingSpeedDown = &v
}

// GetThrottlingLatency returns the ThrottlingLatency field value if set, zero value otherwise.
func (o *ThrottlingOptions) GetThrottlingLatency() int32 {
	if o == nil || isNil(o.ThrottlingLatency) {
		var ret int32
		return ret
	}
	return *o.ThrottlingLatency
}

// GetThrottlingLatencyOk returns a tuple with the ThrottlingLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThrottlingOptions) GetThrottlingLatencyOk() (*int32, bool) {
	if o == nil || isNil(o.ThrottlingLatency) {
    return nil, false
	}
	return o.ThrottlingLatency, true
}

// HasThrottlingLatency returns a boolean if a field has been set.
func (o *ThrottlingOptions) HasThrottlingLatency() bool {
	if o != nil && !isNil(o.ThrottlingLatency) {
		return true
	}

	return false
}

// SetThrottlingLatency gets a reference to the given int32 and assigns it to the ThrottlingLatency field.
func (o *ThrottlingOptions) SetThrottlingLatency(v int32) {
	o.ThrottlingLatency = &v
}

func (o ThrottlingOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ThrottlingType) {
		toSerialize["ThrottlingType"] = o.ThrottlingType
	}
	if !isNil(o.ThrottlingValue) {
		toSerialize["ThrottlingValue"] = o.ThrottlingValue
	}
	if !isNil(o.ThrottlingSpeedUp) {
		toSerialize["ThrottlingSpeedUp"] = o.ThrottlingSpeedUp
	}
	if !isNil(o.ThrottlingSpeedDown) {
		toSerialize["ThrottlingSpeedDown"] = o.ThrottlingSpeedDown
	}
	if !isNil(o.ThrottlingLatency) {
		toSerialize["ThrottlingLatency"] = o.ThrottlingLatency
	}
	return json.Marshal(toSerialize)
}

type NullableThrottlingOptions struct {
	value *ThrottlingOptions
	isSet bool
}

func (v NullableThrottlingOptions) Get() *ThrottlingOptions {
	return v.value
}

func (v *NullableThrottlingOptions) Set(val *ThrottlingOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableThrottlingOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableThrottlingOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThrottlingOptions(val *ThrottlingOptions) *NullableThrottlingOptions {
	return &NullableThrottlingOptions{value: val, isSet: true}
}

func (v NullableThrottlingOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThrottlingOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


