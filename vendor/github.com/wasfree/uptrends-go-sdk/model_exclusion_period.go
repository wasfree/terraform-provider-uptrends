/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// ExclusionPeriod struct for ExclusionPeriod
type ExclusionPeriod struct {
	ExclusionPeriodId *int32 `json:"ExclusionPeriodId,omitempty"`
	Description *string `json:"Description,omitempty"`
	From map[string]interface{} `json:"From,omitempty"`
	Until map[string]interface{} `json:"Until,omitempty"`
	Hash *string `json:"Hash,omitempty"`
}

// NewExclusionPeriod instantiates a new ExclusionPeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExclusionPeriod() *ExclusionPeriod {
	this := ExclusionPeriod{}
	return &this
}

// NewExclusionPeriodWithDefaults instantiates a new ExclusionPeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExclusionPeriodWithDefaults() *ExclusionPeriod {
	this := ExclusionPeriod{}
	return &this
}

// GetExclusionPeriodId returns the ExclusionPeriodId field value if set, zero value otherwise.
func (o *ExclusionPeriod) GetExclusionPeriodId() int32 {
	if o == nil || isNil(o.ExclusionPeriodId) {
		var ret int32
		return ret
	}
	return *o.ExclusionPeriodId
}

// GetExclusionPeriodIdOk returns a tuple with the ExclusionPeriodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExclusionPeriod) GetExclusionPeriodIdOk() (*int32, bool) {
	if o == nil || isNil(o.ExclusionPeriodId) {
    return nil, false
	}
	return o.ExclusionPeriodId, true
}

// HasExclusionPeriodId returns a boolean if a field has been set.
func (o *ExclusionPeriod) HasExclusionPeriodId() bool {
	if o != nil && !isNil(o.ExclusionPeriodId) {
		return true
	}

	return false
}

// SetExclusionPeriodId gets a reference to the given int32 and assigns it to the ExclusionPeriodId field.
func (o *ExclusionPeriod) SetExclusionPeriodId(v int32) {
	o.ExclusionPeriodId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExclusionPeriod) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExclusionPeriod) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExclusionPeriod) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExclusionPeriod) SetDescription(v string) {
	o.Description = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ExclusionPeriod) GetFrom() map[string]interface{} {
	if o == nil || isNil(o.From) {
		var ret map[string]interface{}
		return ret
	}
	return o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExclusionPeriod) GetFromOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.From) {
    return map[string]interface{}{}, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ExclusionPeriod) HasFrom() bool {
	if o != nil && !isNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given map[string]interface{} and assigns it to the From field.
func (o *ExclusionPeriod) SetFrom(v map[string]interface{}) {
	o.From = v
}

// GetUntil returns the Until field value if set, zero value otherwise.
func (o *ExclusionPeriod) GetUntil() map[string]interface{} {
	if o == nil || isNil(o.Until) {
		var ret map[string]interface{}
		return ret
	}
	return o.Until
}

// GetUntilOk returns a tuple with the Until field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExclusionPeriod) GetUntilOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Until) {
    return map[string]interface{}{}, false
	}
	return o.Until, true
}

// HasUntil returns a boolean if a field has been set.
func (o *ExclusionPeriod) HasUntil() bool {
	if o != nil && !isNil(o.Until) {
		return true
	}

	return false
}

// SetUntil gets a reference to the given map[string]interface{} and assigns it to the Until field.
func (o *ExclusionPeriod) SetUntil(v map[string]interface{}) {
	o.Until = v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *ExclusionPeriod) GetHash() string {
	if o == nil || isNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExclusionPeriod) GetHashOk() (*string, bool) {
	if o == nil || isNil(o.Hash) {
    return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *ExclusionPeriod) HasHash() bool {
	if o != nil && !isNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *ExclusionPeriod) SetHash(v string) {
	o.Hash = &v
}

func (o ExclusionPeriod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExclusionPeriodId) {
		toSerialize["ExclusionPeriodId"] = o.ExclusionPeriodId
	}
	if !isNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !isNil(o.From) {
		toSerialize["From"] = o.From
	}
	if !isNil(o.Until) {
		toSerialize["Until"] = o.Until
	}
	if !isNil(o.Hash) {
		toSerialize["Hash"] = o.Hash
	}
	return json.Marshal(toSerialize)
}

type NullableExclusionPeriod struct {
	value *ExclusionPeriod
	isSet bool
}

func (v NullableExclusionPeriod) Get() *ExclusionPeriod {
	return v.value
}

func (v *NullableExclusionPeriod) Set(val *ExclusionPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableExclusionPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableExclusionPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExclusionPeriod(val *ExclusionPeriod) *NullableExclusionPeriod {
	return &NullableExclusionPeriod{value: val, isSet: true}
}

func (v NullableExclusionPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExclusionPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


