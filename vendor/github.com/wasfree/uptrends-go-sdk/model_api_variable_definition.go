/*
 * Uptrends API v4
 *
 * This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// ApiVariableDefinition struct for ApiVariableDefinition
type ApiVariableDefinition struct {
	Source ApiVariableSourceType `json:"Source"`
	Property *string `json:"Property,omitempty"`
	Name *string `json:"Name,omitempty"`
	Arguments *[]ApiVariableDefinition `json:"Arguments,omitempty"`
}

// NewApiVariableDefinition instantiates a new ApiVariableDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiVariableDefinition(source ApiVariableSourceType) *ApiVariableDefinition {
	this := ApiVariableDefinition{}
	this.Source = source
	return &this
}

// NewApiVariableDefinitionWithDefaults instantiates a new ApiVariableDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiVariableDefinitionWithDefaults() *ApiVariableDefinition {
	this := ApiVariableDefinition{}
	return &this
}

// GetSource returns the Source field value
func (o *ApiVariableDefinition) GetSource() ApiVariableSourceType {
	if o == nil {
		var ret ApiVariableSourceType
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ApiVariableDefinition) GetSourceOk() (*ApiVariableSourceType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ApiVariableDefinition) SetSource(v ApiVariableSourceType) {
	o.Source = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *ApiVariableDefinition) GetProperty() string {
	if o == nil || o.Property == nil {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiVariableDefinition) GetPropertyOk() (*string, bool) {
	if o == nil || o.Property == nil {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *ApiVariableDefinition) HasProperty() bool {
	if o != nil && o.Property != nil {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *ApiVariableDefinition) SetProperty(v string) {
	o.Property = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiVariableDefinition) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiVariableDefinition) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiVariableDefinition) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiVariableDefinition) SetName(v string) {
	o.Name = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *ApiVariableDefinition) GetArguments() []ApiVariableDefinition {
	if o == nil || o.Arguments == nil {
		var ret []ApiVariableDefinition
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiVariableDefinition) GetArgumentsOk() (*[]ApiVariableDefinition, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *ApiVariableDefinition) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []ApiVariableDefinition and assigns it to the Arguments field.
func (o *ApiVariableDefinition) SetArguments(v []ApiVariableDefinition) {
	o.Arguments = &v
}

func (o ApiVariableDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Source"] = o.Source
	}
	if o.Property != nil {
		toSerialize["Property"] = o.Property
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Arguments != nil {
		toSerialize["Arguments"] = o.Arguments
	}
	return json.Marshal(toSerialize)
}

type NullableApiVariableDefinition struct {
	value *ApiVariableDefinition
	isSet bool
}

func (v NullableApiVariableDefinition) Get() *ApiVariableDefinition {
	return v.value
}

func (v *NullableApiVariableDefinition) Set(val *ApiVariableDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableApiVariableDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableApiVariableDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiVariableDefinition(val *ApiVariableDefinition) *NullableApiVariableDefinition {
	return &NullableApiVariableDefinition{value: val, isSet: true}
}

func (v NullableApiVariableDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiVariableDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


