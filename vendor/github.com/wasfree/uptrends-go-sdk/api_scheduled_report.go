/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ScheduledReportApiService ScheduledReportApi service
type ScheduledReportApiService service

type ApiScheduledReportCreateScheduledReportRequest struct {
	ctx context.Context
	ApiService *ScheduledReportApiService
	scheduledReport *ScheduledReport
}

// The details for the scheduled report.
func (r ApiScheduledReportCreateScheduledReportRequest) ScheduledReport(scheduledReport ScheduledReport) ApiScheduledReportCreateScheduledReportRequest {
	r.scheduledReport = &scheduledReport
	return r
}

func (r ApiScheduledReportCreateScheduledReportRequest) Execute() (*ScheduledReport, *http.Response, error) {
	return r.ApiService.ScheduledReportCreateScheduledReportExecute(r)
}

/*
ScheduledReportCreateScheduledReport Creates a new scheduled report.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduledReportCreateScheduledReportRequest
*/
func (a *ScheduledReportApiService) ScheduledReportCreateScheduledReport(ctx context.Context) ApiScheduledReportCreateScheduledReportRequest {
	return ApiScheduledReportCreateScheduledReportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ScheduledReport
func (a *ScheduledReportApiService) ScheduledReportCreateScheduledReportExecute(r ApiScheduledReportCreateScheduledReportRequest) (*ScheduledReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledReportApiService.ScheduledReportCreateScheduledReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ScheduledReport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scheduledReport
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduledReportDeleteSpecifiedScheduledReportRequest struct {
	ctx context.Context
	ApiService *ScheduledReportApiService
	scheduledReportGuid string
}

func (r ApiScheduledReportDeleteSpecifiedScheduledReportRequest) Execute() (*http.Response, error) {
	return r.ApiService.ScheduledReportDeleteSpecifiedScheduledReportExecute(r)
}

/*
ScheduledReportDeleteSpecifiedScheduledReport Delete the specified scheduled report.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scheduledReportGuid The guid of the specified scheduled report.
 @return ApiScheduledReportDeleteSpecifiedScheduledReportRequest
*/
func (a *ScheduledReportApiService) ScheduledReportDeleteSpecifiedScheduledReport(ctx context.Context, scheduledReportGuid string) ApiScheduledReportDeleteSpecifiedScheduledReportRequest {
	return ApiScheduledReportDeleteSpecifiedScheduledReportRequest{
		ApiService: a,
		ctx: ctx,
		scheduledReportGuid: scheduledReportGuid,
	}
}

// Execute executes the request
func (a *ScheduledReportApiService) ScheduledReportDeleteSpecifiedScheduledReportExecute(r ApiScheduledReportDeleteSpecifiedScheduledReportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledReportApiService.ScheduledReportDeleteSpecifiedScheduledReport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ScheduledReport/{scheduledReportGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"scheduledReportGuid"+"}", url.PathEscape(parameterToString(r.scheduledReportGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiScheduledReportGetAllScheduledReportsRequest struct {
	ctx context.Context
	ApiService *ScheduledReportApiService
}

func (r ApiScheduledReportGetAllScheduledReportsRequest) Execute() ([]ScheduledReport, *http.Response, error) {
	return r.ApiService.ScheduledReportGetAllScheduledReportsExecute(r)
}

/*
ScheduledReportGetAllScheduledReports Returns data for all scheduled reports.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduledReportGetAllScheduledReportsRequest
*/
func (a *ScheduledReportApiService) ScheduledReportGetAllScheduledReports(ctx context.Context) ApiScheduledReportGetAllScheduledReportsRequest {
	return ApiScheduledReportGetAllScheduledReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ScheduledReport
func (a *ScheduledReportApiService) ScheduledReportGetAllScheduledReportsExecute(r ApiScheduledReportGetAllScheduledReportsRequest) ([]ScheduledReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScheduledReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledReportApiService.ScheduledReportGetAllScheduledReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ScheduledReport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduledReportGetSpecifiedScheduledReportRequest struct {
	ctx context.Context
	ApiService *ScheduledReportApiService
	scheduledReportGuid string
}

func (r ApiScheduledReportGetSpecifiedScheduledReportRequest) Execute() (*ScheduledReport, *http.Response, error) {
	return r.ApiService.ScheduledReportGetSpecifiedScheduledReportExecute(r)
}

/*
ScheduledReportGetSpecifiedScheduledReport Returns data for the specified scheduled report.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scheduledReportGuid The guid of the specified scheduled report.
 @return ApiScheduledReportGetSpecifiedScheduledReportRequest
*/
func (a *ScheduledReportApiService) ScheduledReportGetSpecifiedScheduledReport(ctx context.Context, scheduledReportGuid string) ApiScheduledReportGetSpecifiedScheduledReportRequest {
	return ApiScheduledReportGetSpecifiedScheduledReportRequest{
		ApiService: a,
		ctx: ctx,
		scheduledReportGuid: scheduledReportGuid,
	}
}

// Execute executes the request
//  @return ScheduledReport
func (a *ScheduledReportApiService) ScheduledReportGetSpecifiedScheduledReportExecute(r ApiScheduledReportGetSpecifiedScheduledReportRequest) (*ScheduledReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledReportApiService.ScheduledReportGetSpecifiedScheduledReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ScheduledReport/{scheduledReportGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"scheduledReportGuid"+"}", url.PathEscape(parameterToString(r.scheduledReportGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduledReportPartiallyUpdateScheduledReportRequest struct {
	ctx context.Context
	ApiService *ScheduledReportApiService
	scheduledReportGuid string
	scheduledReport *ScheduledReport
}

// The details for the scheduled report.
func (r ApiScheduledReportPartiallyUpdateScheduledReportRequest) ScheduledReport(scheduledReport ScheduledReport) ApiScheduledReportPartiallyUpdateScheduledReportRequest {
	r.scheduledReport = &scheduledReport
	return r
}

func (r ApiScheduledReportPartiallyUpdateScheduledReportRequest) Execute() (*ScheduledReport, *http.Response, error) {
	return r.ApiService.ScheduledReportPartiallyUpdateScheduledReportExecute(r)
}

/*
ScheduledReportPartiallyUpdateScheduledReport Partially update the specified scheduled report.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scheduledReportGuid The guid of the specified scheduled report.
 @return ApiScheduledReportPartiallyUpdateScheduledReportRequest
*/
func (a *ScheduledReportApiService) ScheduledReportPartiallyUpdateScheduledReport(ctx context.Context, scheduledReportGuid string) ApiScheduledReportPartiallyUpdateScheduledReportRequest {
	return ApiScheduledReportPartiallyUpdateScheduledReportRequest{
		ApiService: a,
		ctx: ctx,
		scheduledReportGuid: scheduledReportGuid,
	}
}

// Execute executes the request
//  @return ScheduledReport
func (a *ScheduledReportApiService) ScheduledReportPartiallyUpdateScheduledReportExecute(r ApiScheduledReportPartiallyUpdateScheduledReportRequest) (*ScheduledReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledReportApiService.ScheduledReportPartiallyUpdateScheduledReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ScheduledReport/{scheduledReportGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"scheduledReportGuid"+"}", url.PathEscape(parameterToString(r.scheduledReportGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scheduledReport
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduledReportUpdateScheduledReportRequest struct {
	ctx context.Context
	ApiService *ScheduledReportApiService
	scheduledReportGuid string
	scheduledReport *ScheduledReport
}

// The details for the scheduled report.
func (r ApiScheduledReportUpdateScheduledReportRequest) ScheduledReport(scheduledReport ScheduledReport) ApiScheduledReportUpdateScheduledReportRequest {
	r.scheduledReport = &scheduledReport
	return r
}

func (r ApiScheduledReportUpdateScheduledReportRequest) Execute() (*ScheduledReport, *http.Response, error) {
	return r.ApiService.ScheduledReportUpdateScheduledReportExecute(r)
}

/*
ScheduledReportUpdateScheduledReport Update the specified scheduled report.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scheduledReportGuid The guid of the specified scheduled report.
 @return ApiScheduledReportUpdateScheduledReportRequest
*/
func (a *ScheduledReportApiService) ScheduledReportUpdateScheduledReport(ctx context.Context, scheduledReportGuid string) ApiScheduledReportUpdateScheduledReportRequest {
	return ApiScheduledReportUpdateScheduledReportRequest{
		ApiService: a,
		ctx: ctx,
		scheduledReportGuid: scheduledReportGuid,
	}
}

// Execute executes the request
//  @return ScheduledReport
func (a *ScheduledReportApiService) ScheduledReportUpdateScheduledReportExecute(r ApiScheduledReportUpdateScheduledReportRequest) (*ScheduledReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledReportApiService.ScheduledReportUpdateScheduledReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ScheduledReport/{scheduledReportGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"scheduledReportGuid"+"}", url.PathEscape(parameterToString(r.scheduledReportGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scheduledReport
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
