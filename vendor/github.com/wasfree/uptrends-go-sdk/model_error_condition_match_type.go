/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// ErrorConditionMatchType 
type ErrorConditionMatchType string

// List of ErrorConditionMatchType
const (
	ERRORCONDITIONMATCHTYPE_POSITIVE ErrorConditionMatchType = "Positive"
	ERRORCONDITIONMATCHTYPE_NEGATIVE ErrorConditionMatchType = "Negative"
	ERRORCONDITIONMATCHTYPE_POSITIVE_REGEX ErrorConditionMatchType = "PositiveRegex"
	ERRORCONDITIONMATCHTYPE_NEGATIVE_REGEX ErrorConditionMatchType = "NegativeRegex"
)

// All allowed values of ErrorConditionMatchType enum
var AllowedErrorConditionMatchTypeEnumValues = []ErrorConditionMatchType{
	"Positive",
	"Negative",
	"PositiveRegex",
	"NegativeRegex",
}

func (v *ErrorConditionMatchType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorConditionMatchType(value)
	for _, existing := range AllowedErrorConditionMatchTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorConditionMatchType", value)
}

// NewErrorConditionMatchTypeFromValue returns a pointer to a valid ErrorConditionMatchType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorConditionMatchTypeFromValue(v string) (*ErrorConditionMatchType, error) {
	ev := ErrorConditionMatchType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorConditionMatchType: valid values are %v", v, AllowedErrorConditionMatchTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorConditionMatchType) IsValid() bool {
	for _, existing := range AllowedErrorConditionMatchTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErrorConditionMatchType value
func (v ErrorConditionMatchType) Ptr() *ErrorConditionMatchType {
	return &v
}

type NullableErrorConditionMatchType struct {
	value *ErrorConditionMatchType
	isSet bool
}

func (v NullableErrorConditionMatchType) Get() *ErrorConditionMatchType {
	return v.value
}

func (v *NullableErrorConditionMatchType) Set(val *ErrorConditionMatchType) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorConditionMatchType) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorConditionMatchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorConditionMatchType(val *ErrorConditionMatchType) *NullableErrorConditionMatchType {
	return &NullableErrorConditionMatchType{value: val, isSet: true}
}

func (v NullableErrorConditionMatchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorConditionMatchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

