/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// AssertionInfo Information about a single assertion
type AssertionInfo struct {
	// Was the assertion completed?
	Completed bool `json:"Completed"`
	// Did the assertion pass?
	Passed bool `json:"Passed"`
	// Description
	Description *string `json:"Description,omitempty"`
	// Discription of the exception trown if applicable
	ExceptionDescription *string `json:"ExceptionDescription,omitempty"`
}

// NewAssertionInfo instantiates a new AssertionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertionInfo(completed bool, passed bool) *AssertionInfo {
	this := AssertionInfo{}
	this.Completed = completed
	this.Passed = passed
	return &this
}

// NewAssertionInfoWithDefaults instantiates a new AssertionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertionInfoWithDefaults() *AssertionInfo {
	this := AssertionInfo{}
	return &this
}

// GetCompleted returns the Completed field value
func (o *AssertionInfo) GetCompleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *AssertionInfo) GetCompletedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *AssertionInfo) SetCompleted(v bool) {
	o.Completed = v
}

// GetPassed returns the Passed field value
func (o *AssertionInfo) GetPassed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Passed
}

// GetPassedOk returns a tuple with the Passed field value
// and a boolean to check if the value has been set.
func (o *AssertionInfo) GetPassedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Passed, true
}

// SetPassed sets field value
func (o *AssertionInfo) SetPassed(v bool) {
	o.Passed = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AssertionInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AssertionInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AssertionInfo) SetDescription(v string) {
	o.Description = &v
}

// GetExceptionDescription returns the ExceptionDescription field value if set, zero value otherwise.
func (o *AssertionInfo) GetExceptionDescription() string {
	if o == nil || o.ExceptionDescription == nil {
		var ret string
		return ret
	}
	return *o.ExceptionDescription
}

// GetExceptionDescriptionOk returns a tuple with the ExceptionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionInfo) GetExceptionDescriptionOk() (*string, bool) {
	if o == nil || o.ExceptionDescription == nil {
		return nil, false
	}
	return o.ExceptionDescription, true
}

// HasExceptionDescription returns a boolean if a field has been set.
func (o *AssertionInfo) HasExceptionDescription() bool {
	if o != nil && o.ExceptionDescription != nil {
		return true
	}

	return false
}

// SetExceptionDescription gets a reference to the given string and assigns it to the ExceptionDescription field.
func (o *AssertionInfo) SetExceptionDescription(v string) {
	o.ExceptionDescription = &v
}

func (o AssertionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Completed"] = o.Completed
	}
	if true {
		toSerialize["Passed"] = o.Passed
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.ExceptionDescription != nil {
		toSerialize["ExceptionDescription"] = o.ExceptionDescription
	}
	return json.Marshal(toSerialize)
}

type NullableAssertionInfo struct {
	value *AssertionInfo
	isSet bool
}

func (v NullableAssertionInfo) Get() *AssertionInfo {
	return v.value
}

func (v *NullableAssertionInfo) Set(val *AssertionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertionInfo(val *AssertionInfo) *NullableAssertionInfo {
	return &NullableAssertionInfo{value: val, isSet: true}
}

func (v NullableAssertionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


