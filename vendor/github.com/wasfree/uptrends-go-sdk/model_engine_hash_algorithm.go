/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// EngineHashAlgorithm 
type EngineHashAlgorithm string

// List of EngineHashAlgorithm
const (
	ENGINEHASHALGORITHM_MD5 EngineHashAlgorithm = "MD5"
	ENGINEHASHALGORITHM_SHA1 EngineHashAlgorithm = "SHA1"
	ENGINEHASHALGORITHM_SHA256 EngineHashAlgorithm = "SHA256"
	ENGINEHASHALGORITHM_SHA512 EngineHashAlgorithm = "SHA512"
	ENGINEHASHALGORITHM_HMACSHA1 EngineHashAlgorithm = "HMACSHA1"
	ENGINEHASHALGORITHM_HMACSHA256 EngineHashAlgorithm = "HMACSHA256"
	ENGINEHASHALGORITHM_HMACSHA512 EngineHashAlgorithm = "HMACSHA512"
)

// All allowed values of EngineHashAlgorithm enum
var AllowedEngineHashAlgorithmEnumValues = []EngineHashAlgorithm{
	"MD5",
	"SHA1",
	"SHA256",
	"SHA512",
	"HMACSHA1",
	"HMACSHA256",
	"HMACSHA512",
}

func (v *EngineHashAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EngineHashAlgorithm(value)
	for _, existing := range AllowedEngineHashAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EngineHashAlgorithm", value)
}

// NewEngineHashAlgorithmFromValue returns a pointer to a valid EngineHashAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEngineHashAlgorithmFromValue(v string) (*EngineHashAlgorithm, error) {
	ev := EngineHashAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EngineHashAlgorithm: valid values are %v", v, AllowedEngineHashAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EngineHashAlgorithm) IsValid() bool {
	for _, existing := range AllowedEngineHashAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EngineHashAlgorithm value
func (v EngineHashAlgorithm) Ptr() *EngineHashAlgorithm {
	return &v
}

type NullableEngineHashAlgorithm struct {
	value *EngineHashAlgorithm
	isSet bool
}

func (v NullableEngineHashAlgorithm) Get() *EngineHashAlgorithm {
	return v.value
}

func (v *NullableEngineHashAlgorithm) Set(val *EngineHashAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableEngineHashAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableEngineHashAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngineHashAlgorithm(val *EngineHashAlgorithm) *NullableEngineHashAlgorithm {
	return &NullableEngineHashAlgorithm{value: val, isSet: true}
}

func (v NullableEngineHashAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngineHashAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

