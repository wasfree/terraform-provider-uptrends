/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// PageLoadMetrics struct for PageLoadMetrics
type PageLoadMetrics struct {
	// Measures the sum total of all individual layout shift scores for every unexpected layout shift that occurs during the entire lifespan of the page. A score lower than 0.1 is considered a good score. Between 0.1 and 0.25 could use some improvement. 0.25 or higher is a poor score. https://web.dev/cls/?utm_source=devtools  In case the data was inconclusive null is returned.
	CumulativeLayoutShift *float32 `json:"CumulativeLayoutShift,omitempty"`
	// Measures the time from when the page starts loading to when any of the page's content is rendered on screen. A score lower than 1000ms is considered a good score. https://web.dev/fcp/  In case the data was inconclusive null is returned.
	FirstContentfulPaint *int32 `json:"FirstContentfulPaint,omitempty"`
	// The render timestamp of the largest image or text block visible within the viewport. A score lower than 2500ms is good. Between 2500ms and 4000ms needs improvement. 4000ms or higher is poor https://web.dev/lcp/  In case the data was inconclusive null is returned.
	LargestContentfulPaint *int32 `json:"LargestContentfulPaint,omitempty"`
	// The Total Blocking Time (TBT) metric measures the total amount of time between First Contentful Paint (FCP) and Time to Interactive (TTI) where the main thread was blocked for long enough to prevent input responsiveness.  https://web.dev/tbt/  In case the data was inconclusive null is returned.
	TotalBlockingTime *int32 `json:"TotalBlockingTime,omitempty"`
	// TTI measures how long it takes a page to become fully interactive.   https://web.dev/interactive/  In case the data was inconclusive null is returned.
	TimeToInteractive *int32 `json:"TimeToInteractive,omitempty"`
}

// NewPageLoadMetrics instantiates a new PageLoadMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageLoadMetrics() *PageLoadMetrics {
	this := PageLoadMetrics{}
	return &this
}

// NewPageLoadMetricsWithDefaults instantiates a new PageLoadMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageLoadMetricsWithDefaults() *PageLoadMetrics {
	this := PageLoadMetrics{}
	return &this
}

// GetCumulativeLayoutShift returns the CumulativeLayoutShift field value if set, zero value otherwise.
func (o *PageLoadMetrics) GetCumulativeLayoutShift() float32 {
	if o == nil || o.CumulativeLayoutShift == nil {
		var ret float32
		return ret
	}
	return *o.CumulativeLayoutShift
}

// GetCumulativeLayoutShiftOk returns a tuple with the CumulativeLayoutShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadMetrics) GetCumulativeLayoutShiftOk() (*float32, bool) {
	if o == nil || o.CumulativeLayoutShift == nil {
		return nil, false
	}
	return o.CumulativeLayoutShift, true
}

// HasCumulativeLayoutShift returns a boolean if a field has been set.
func (o *PageLoadMetrics) HasCumulativeLayoutShift() bool {
	if o != nil && o.CumulativeLayoutShift != nil {
		return true
	}

	return false
}

// SetCumulativeLayoutShift gets a reference to the given float32 and assigns it to the CumulativeLayoutShift field.
func (o *PageLoadMetrics) SetCumulativeLayoutShift(v float32) {
	o.CumulativeLayoutShift = &v
}

// GetFirstContentfulPaint returns the FirstContentfulPaint field value if set, zero value otherwise.
func (o *PageLoadMetrics) GetFirstContentfulPaint() int32 {
	if o == nil || o.FirstContentfulPaint == nil {
		var ret int32
		return ret
	}
	return *o.FirstContentfulPaint
}

// GetFirstContentfulPaintOk returns a tuple with the FirstContentfulPaint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadMetrics) GetFirstContentfulPaintOk() (*int32, bool) {
	if o == nil || o.FirstContentfulPaint == nil {
		return nil, false
	}
	return o.FirstContentfulPaint, true
}

// HasFirstContentfulPaint returns a boolean if a field has been set.
func (o *PageLoadMetrics) HasFirstContentfulPaint() bool {
	if o != nil && o.FirstContentfulPaint != nil {
		return true
	}

	return false
}

// SetFirstContentfulPaint gets a reference to the given int32 and assigns it to the FirstContentfulPaint field.
func (o *PageLoadMetrics) SetFirstContentfulPaint(v int32) {
	o.FirstContentfulPaint = &v
}

// GetLargestContentfulPaint returns the LargestContentfulPaint field value if set, zero value otherwise.
func (o *PageLoadMetrics) GetLargestContentfulPaint() int32 {
	if o == nil || o.LargestContentfulPaint == nil {
		var ret int32
		return ret
	}
	return *o.LargestContentfulPaint
}

// GetLargestContentfulPaintOk returns a tuple with the LargestContentfulPaint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadMetrics) GetLargestContentfulPaintOk() (*int32, bool) {
	if o == nil || o.LargestContentfulPaint == nil {
		return nil, false
	}
	return o.LargestContentfulPaint, true
}

// HasLargestContentfulPaint returns a boolean if a field has been set.
func (o *PageLoadMetrics) HasLargestContentfulPaint() bool {
	if o != nil && o.LargestContentfulPaint != nil {
		return true
	}

	return false
}

// SetLargestContentfulPaint gets a reference to the given int32 and assigns it to the LargestContentfulPaint field.
func (o *PageLoadMetrics) SetLargestContentfulPaint(v int32) {
	o.LargestContentfulPaint = &v
}

// GetTotalBlockingTime returns the TotalBlockingTime field value if set, zero value otherwise.
func (o *PageLoadMetrics) GetTotalBlockingTime() int32 {
	if o == nil || o.TotalBlockingTime == nil {
		var ret int32
		return ret
	}
	return *o.TotalBlockingTime
}

// GetTotalBlockingTimeOk returns a tuple with the TotalBlockingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadMetrics) GetTotalBlockingTimeOk() (*int32, bool) {
	if o == nil || o.TotalBlockingTime == nil {
		return nil, false
	}
	return o.TotalBlockingTime, true
}

// HasTotalBlockingTime returns a boolean if a field has been set.
func (o *PageLoadMetrics) HasTotalBlockingTime() bool {
	if o != nil && o.TotalBlockingTime != nil {
		return true
	}

	return false
}

// SetTotalBlockingTime gets a reference to the given int32 and assigns it to the TotalBlockingTime field.
func (o *PageLoadMetrics) SetTotalBlockingTime(v int32) {
	o.TotalBlockingTime = &v
}

// GetTimeToInteractive returns the TimeToInteractive field value if set, zero value otherwise.
func (o *PageLoadMetrics) GetTimeToInteractive() int32 {
	if o == nil || o.TimeToInteractive == nil {
		var ret int32
		return ret
	}
	return *o.TimeToInteractive
}

// GetTimeToInteractiveOk returns a tuple with the TimeToInteractive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadMetrics) GetTimeToInteractiveOk() (*int32, bool) {
	if o == nil || o.TimeToInteractive == nil {
		return nil, false
	}
	return o.TimeToInteractive, true
}

// HasTimeToInteractive returns a boolean if a field has been set.
func (o *PageLoadMetrics) HasTimeToInteractive() bool {
	if o != nil && o.TimeToInteractive != nil {
		return true
	}

	return false
}

// SetTimeToInteractive gets a reference to the given int32 and assigns it to the TimeToInteractive field.
func (o *PageLoadMetrics) SetTimeToInteractive(v int32) {
	o.TimeToInteractive = &v
}

func (o PageLoadMetrics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CumulativeLayoutShift != nil {
		toSerialize["CumulativeLayoutShift"] = o.CumulativeLayoutShift
	}
	if o.FirstContentfulPaint != nil {
		toSerialize["FirstContentfulPaint"] = o.FirstContentfulPaint
	}
	if o.LargestContentfulPaint != nil {
		toSerialize["LargestContentfulPaint"] = o.LargestContentfulPaint
	}
	if o.TotalBlockingTime != nil {
		toSerialize["TotalBlockingTime"] = o.TotalBlockingTime
	}
	if o.TimeToInteractive != nil {
		toSerialize["TimeToInteractive"] = o.TimeToInteractive
	}
	return json.Marshal(toSerialize)
}

type NullablePageLoadMetrics struct {
	value *PageLoadMetrics
	isSet bool
}

func (v NullablePageLoadMetrics) Get() *PageLoadMetrics {
	return v.value
}

func (v *NullablePageLoadMetrics) Set(val *PageLoadMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullablePageLoadMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullablePageLoadMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageLoadMetrics(val *PageLoadMetrics) *NullablePageLoadMetrics {
	return &NullablePageLoadMetrics{value: val, isSet: true}
}

func (v NullablePageLoadMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageLoadMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


