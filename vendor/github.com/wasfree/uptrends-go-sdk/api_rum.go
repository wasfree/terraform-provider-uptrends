/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// RUMApiService RUMApi service
type RUMApiService service

type ApiRumGetRumMetricsForAllWebsitesRequest struct {
	ctx context.Context
	ApiService *RUMApiService
	websiteFilter *string
	start *interface{}
	end *interface{}
	presetPeriod *string
}

// A search pattern to filter for matching RUM website descriptions. Wildcards (? and *) are allowed. To filter for multiple patterns, use the | symbol as separator.
func (r ApiRumGetRumMetricsForAllWebsitesRequest) WebsiteFilter(websiteFilter string) ApiRumGetRumMetricsForAllWebsitesRequest {
	r.websiteFilter = &websiteFilter
	return r
}

// The start of a custom period (can&#39;t be used together with the PresetPeriod parameter)
func (r ApiRumGetRumMetricsForAllWebsitesRequest) Start(start interface{}) ApiRumGetRumMetricsForAllWebsitesRequest {
	r.start = &start
	return r
}

// The end of a custom period
func (r ApiRumGetRumMetricsForAllWebsitesRequest) End(end interface{}) ApiRumGetRumMetricsForAllWebsitesRequest {
	r.end = &end
	return r
}

// The requested time period.
func (r ApiRumGetRumMetricsForAllWebsitesRequest) PresetPeriod(presetPeriod string) ApiRumGetRumMetricsForAllWebsitesRequest {
	r.presetPeriod = &presetPeriod
	return r
}

func (r ApiRumGetRumMetricsForAllWebsitesRequest) Execute() ([]RumWebsiteWithMetricValues, *http.Response, error) {
	return r.ApiService.RumGetRumMetricsForAllWebsitesExecute(r)
}

/*
RumGetRumMetricsForAllWebsites Returns all metrics of all RUM websites.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRumGetRumMetricsForAllWebsitesRequest
*/
func (a *RUMApiService) RumGetRumMetricsForAllWebsites(ctx context.Context) ApiRumGetRumMetricsForAllWebsitesRequest {
	return ApiRumGetRumMetricsForAllWebsitesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RumWebsiteWithMetricValues
func (a *RUMApiService) RumGetRumMetricsForAllWebsitesExecute(r ApiRumGetRumMetricsForAllWebsitesRequest) ([]RumWebsiteWithMetricValues, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RumWebsiteWithMetricValues
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMApiService.RumGetRumMetricsForAllWebsites")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Rum/Website/Metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.websiteFilter != nil {
		localVarQueryParams.Add("WebsiteFilter", parameterToString(*r.websiteFilter, ""))
	}
	if r.start != nil {
		localVarQueryParams.Add("Start", parameterToString(*r.start, ""))
	}
	if r.end != nil {
		localVarQueryParams.Add("End", parameterToString(*r.end, ""))
	}
	if r.presetPeriod != nil {
		localVarQueryParams.Add("PresetPeriod", parameterToString(*r.presetPeriod, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRumGetRumWebsiteMetricsRequest struct {
	ctx context.Context
	ApiService *RUMApiService
	rumWebsiteGuid string
	start *interface{}
	end *interface{}
	presetPeriod *string
}

// The start of a custom period (can&#39;t be used together with the PresetPeriod parameter)
func (r ApiRumGetRumWebsiteMetricsRequest) Start(start interface{}) ApiRumGetRumWebsiteMetricsRequest {
	r.start = &start
	return r
}

// The end of a custom period
func (r ApiRumGetRumWebsiteMetricsRequest) End(end interface{}) ApiRumGetRumWebsiteMetricsRequest {
	r.end = &end
	return r
}

// The requested time period.
func (r ApiRumGetRumWebsiteMetricsRequest) PresetPeriod(presetPeriod string) ApiRumGetRumWebsiteMetricsRequest {
	r.presetPeriod = &presetPeriod
	return r
}

func (r ApiRumGetRumWebsiteMetricsRequest) Execute() ([]RumMetricValues, *http.Response, error) {
	return r.ApiService.RumGetRumWebsiteMetricsExecute(r)
}

/*
RumGetRumWebsiteMetrics Returns all metrics of the specified RUM website.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rumWebsiteGuid
 @return ApiRumGetRumWebsiteMetricsRequest
*/
func (a *RUMApiService) RumGetRumWebsiteMetrics(ctx context.Context, rumWebsiteGuid string) ApiRumGetRumWebsiteMetricsRequest {
	return ApiRumGetRumWebsiteMetricsRequest{
		ApiService: a,
		ctx: ctx,
		rumWebsiteGuid: rumWebsiteGuid,
	}
}

// Execute executes the request
//  @return []RumMetricValues
func (a *RUMApiService) RumGetRumWebsiteMetricsExecute(r ApiRumGetRumWebsiteMetricsRequest) ([]RumMetricValues, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RumMetricValues
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMApiService.RumGetRumWebsiteMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Rum/Website/{rumWebsiteGuid}/Metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"rumWebsiteGuid"+"}", url.PathEscape(parameterToString(r.rumWebsiteGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.start != nil {
		localVarQueryParams.Add("Start", parameterToString(*r.start, ""))
	}
	if r.end != nil {
		localVarQueryParams.Add("End", parameterToString(*r.end, ""))
	}
	if r.presetPeriod != nil {
		localVarQueryParams.Add("PresetPeriod", parameterToString(*r.presetPeriod, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRumGetRumWebsitesRequest struct {
	ctx context.Context
	ApiService *RUMApiService
}

func (r ApiRumGetRumWebsitesRequest) Execute() ([]RumWebsite, *http.Response, error) {
	return r.ApiService.RumGetRumWebsitesExecute(r)
}

/*
RumGetRumWebsites Returns the definition of all RUM websites available in the account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRumGetRumWebsitesRequest
*/
func (a *RUMApiService) RumGetRumWebsites(ctx context.Context) ApiRumGetRumWebsitesRequest {
	return ApiRumGetRumWebsitesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RumWebsite
func (a *RUMApiService) RumGetRumWebsitesExecute(r ApiRumGetRumWebsitesRequest) ([]RumWebsite, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RumWebsite
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RUMApiService.RumGetRumWebsites")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Rum/Website"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
