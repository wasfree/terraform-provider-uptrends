/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// RumMetricValues struct for RumMetricValues
type RumMetricValues struct {
	Metric RumMetric `json:"Metric"`
	Median *int32 `json:"Median,omitempty"`
	Minimum *int32 `json:"Minimum,omitempty"`
	Maximum *int32 `json:"Maximum,omitempty"`
	Average *int32 `json:"Average,omitempty"`
	Count *int32 `json:"Count,omitempty"`
}

// NewRumMetricValues instantiates a new RumMetricValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRumMetricValues(metric RumMetric) *RumMetricValues {
	this := RumMetricValues{}
	this.Metric = metric
	return &this
}

// NewRumMetricValuesWithDefaults instantiates a new RumMetricValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRumMetricValuesWithDefaults() *RumMetricValues {
	this := RumMetricValues{}
	return &this
}

// GetMetric returns the Metric field value
func (o *RumMetricValues) GetMetric() RumMetric {
	if o == nil {
		var ret RumMetric
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *RumMetricValues) GetMetricOk() (*RumMetric, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *RumMetricValues) SetMetric(v RumMetric) {
	o.Metric = v
}

// GetMedian returns the Median field value if set, zero value otherwise.
func (o *RumMetricValues) GetMedian() int32 {
	if o == nil || isNil(o.Median) {
		var ret int32
		return ret
	}
	return *o.Median
}

// GetMedianOk returns a tuple with the Median field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumMetricValues) GetMedianOk() (*int32, bool) {
	if o == nil || isNil(o.Median) {
    return nil, false
	}
	return o.Median, true
}

// HasMedian returns a boolean if a field has been set.
func (o *RumMetricValues) HasMedian() bool {
	if o != nil && !isNil(o.Median) {
		return true
	}

	return false
}

// SetMedian gets a reference to the given int32 and assigns it to the Median field.
func (o *RumMetricValues) SetMedian(v int32) {
	o.Median = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *RumMetricValues) GetMinimum() int32 {
	if o == nil || isNil(o.Minimum) {
		var ret int32
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumMetricValues) GetMinimumOk() (*int32, bool) {
	if o == nil || isNil(o.Minimum) {
    return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *RumMetricValues) HasMinimum() bool {
	if o != nil && !isNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given int32 and assigns it to the Minimum field.
func (o *RumMetricValues) SetMinimum(v int32) {
	o.Minimum = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *RumMetricValues) GetMaximum() int32 {
	if o == nil || isNil(o.Maximum) {
		var ret int32
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumMetricValues) GetMaximumOk() (*int32, bool) {
	if o == nil || isNil(o.Maximum) {
    return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *RumMetricValues) HasMaximum() bool {
	if o != nil && !isNil(o.Maximum) {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given int32 and assigns it to the Maximum field.
func (o *RumMetricValues) SetMaximum(v int32) {
	o.Maximum = &v
}

// GetAverage returns the Average field value if set, zero value otherwise.
func (o *RumMetricValues) GetAverage() int32 {
	if o == nil || isNil(o.Average) {
		var ret int32
		return ret
	}
	return *o.Average
}

// GetAverageOk returns a tuple with the Average field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumMetricValues) GetAverageOk() (*int32, bool) {
	if o == nil || isNil(o.Average) {
    return nil, false
	}
	return o.Average, true
}

// HasAverage returns a boolean if a field has been set.
func (o *RumMetricValues) HasAverage() bool {
	if o != nil && !isNil(o.Average) {
		return true
	}

	return false
}

// SetAverage gets a reference to the given int32 and assigns it to the Average field.
func (o *RumMetricValues) SetAverage(v int32) {
	o.Average = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RumMetricValues) GetCount() int32 {
	if o == nil || isNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumMetricValues) GetCountOk() (*int32, bool) {
	if o == nil || isNil(o.Count) {
    return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RumMetricValues) HasCount() bool {
	if o != nil && !isNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *RumMetricValues) SetCount(v int32) {
	o.Count = &v
}

func (o RumMetricValues) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Metric"] = o.Metric
	}
	if !isNil(o.Median) {
		toSerialize["Median"] = o.Median
	}
	if !isNil(o.Minimum) {
		toSerialize["Minimum"] = o.Minimum
	}
	if !isNil(o.Maximum) {
		toSerialize["Maximum"] = o.Maximum
	}
	if !isNil(o.Average) {
		toSerialize["Average"] = o.Average
	}
	if !isNil(o.Count) {
		toSerialize["Count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableRumMetricValues struct {
	value *RumMetricValues
	isSet bool
}

func (v NullableRumMetricValues) Get() *RumMetricValues {
	return v.value
}

func (v *NullableRumMetricValues) Set(val *RumMetricValues) {
	v.value = val
	v.isSet = true
}

func (v NullableRumMetricValues) IsSet() bool {
	return v.isSet
}

func (v *NullableRumMetricValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRumMetricValues(val *RumMetricValues) *NullableRumMetricValues {
	return &NullableRumMetricValues{value: val, isSet: true}
}

func (v NullableRumMetricValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRumMetricValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


