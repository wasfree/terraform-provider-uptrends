/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// RumMetric Defines a RUM metric.
type RumMetric string

// List of RumMetric
const (
	RUMMETRIC_PAGE_VIEWS RumMetric = "PageViews"
	RUMMETRIC_LOAD_TIME RumMetric = "LoadTime"
	RUMMETRIC_TIME_TO_FIRST_BYTE RumMetric = "TimeToFirstByte"
	RUMMETRIC_PAGE_READY_TIME RumMetric = "PageReadyTime"
	RUMMETRIC_NETWORK_DURATION RumMetric = "NetworkDuration"
	RUMMETRIC_REDIRECT_DURATION RumMetric = "RedirectDuration"
	RUMMETRIC_DNS_DURATION RumMetric = "DnsDuration"
	RUMMETRIC_CONNECT_DURATION RumMetric = "ConnectDuration"
	RUMMETRIC_BACKEND_DURATION RumMetric = "BackendDuration"
	RUMMETRIC_SEND_DURATION RumMetric = "SendDuration"
	RUMMETRIC_RECEIVE_DURATION RumMetric = "ReceiveDuration"
	RUMMETRIC_FRONT_END_DURATION RumMetric = "FrontEndDuration"
	RUMMETRIC_DOM_DURATION RumMetric = "DomDuration"
	RUMMETRIC_RENDER_DURATION RumMetric = "RenderDuration"
	RUMMETRIC_DOWNLOAD_TIME RumMetric = "DownloadTime"
)

// All allowed values of RumMetric enum
var AllowedRumMetricEnumValues = []RumMetric{
	"PageViews",
	"LoadTime",
	"TimeToFirstByte",
	"PageReadyTime",
	"NetworkDuration",
	"RedirectDuration",
	"DnsDuration",
	"ConnectDuration",
	"BackendDuration",
	"SendDuration",
	"ReceiveDuration",
	"FrontEndDuration",
	"DomDuration",
	"RenderDuration",
	"DownloadTime",
}

func (v *RumMetric) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RumMetric(value)
	for _, existing := range AllowedRumMetricEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RumMetric", value)
}

// NewRumMetricFromValue returns a pointer to a valid RumMetric
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRumMetricFromValue(v string) (*RumMetric, error) {
	ev := RumMetric(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RumMetric: valid values are %v", v, AllowedRumMetricEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RumMetric) IsValid() bool {
	for _, existing := range AllowedRumMetricEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RumMetric value
func (v RumMetric) Ptr() *RumMetric {
	return &v
}

type NullableRumMetric struct {
	value *RumMetric
	isSet bool
}

func (v NullableRumMetric) Get() *RumMetric {
	return v.value
}

func (v *NullableRumMetric) Set(val *RumMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableRumMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableRumMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRumMetric(val *RumMetric) *NullableRumMetric {
	return &NullableRumMetric{value: val, isSet: true}
}

func (v NullableRumMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRumMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

