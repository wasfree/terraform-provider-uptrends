/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// PresetPeriodType 
type PresetPeriodType string

// List of PresetPeriodType
const (
	PRESETPERIODTYPE_CURRENT_DAY PresetPeriodType = "CurrentDay"
	PRESETPERIODTYPE_CURRENT_WEEK PresetPeriodType = "CurrentWeek"
	PRESETPERIODTYPE_CURRENT_MONTH PresetPeriodType = "CurrentMonth"
	PRESETPERIODTYPE_CURRENT_QUARTER PresetPeriodType = "CurrentQuarter"
	PRESETPERIODTYPE_CURRENT_YEAR PresetPeriodType = "CurrentYear"
	PRESETPERIODTYPE_PREVIOUS_DAY PresetPeriodType = "PreviousDay"
	PRESETPERIODTYPE_PREVIOUS_WEEK PresetPeriodType = "PreviousWeek"
	PRESETPERIODTYPE_PREVIOUS_MONTH PresetPeriodType = "PreviousMonth"
	PRESETPERIODTYPE_PREVIOUS_QUARTER PresetPeriodType = "PreviousQuarter"
	PRESETPERIODTYPE_PREVIOUS_YEAR PresetPeriodType = "PreviousYear"
	PRESETPERIODTYPE_LAST2_HOURS PresetPeriodType = "Last2Hours"
	PRESETPERIODTYPE_LAST6_HOURS PresetPeriodType = "Last6Hours"
	PRESETPERIODTYPE_LAST12_HOURS PresetPeriodType = "Last12Hours"
	PRESETPERIODTYPE_LAST24_HOURS PresetPeriodType = "Last24Hours"
	PRESETPERIODTYPE_LAST48_HOURS PresetPeriodType = "Last48Hours"
	PRESETPERIODTYPE_LAST7_DAYS PresetPeriodType = "Last7Days"
	PRESETPERIODTYPE_LAST30_DAYS PresetPeriodType = "Last30Days"
	PRESETPERIODTYPE_LAST60_DAYS PresetPeriodType = "Last60Days"
	PRESETPERIODTYPE_LAST90_DAYS PresetPeriodType = "Last90Days"
	PRESETPERIODTYPE_LAST365_DAYS PresetPeriodType = "Last365Days"
	PRESETPERIODTYPE_LAST3_MONTHS PresetPeriodType = "Last3Months"
	PRESETPERIODTYPE_LAST6_MONTHS PresetPeriodType = "Last6Months"
	PRESETPERIODTYPE_LAST12_MONTHS PresetPeriodType = "Last12Months"
	PRESETPERIODTYPE_LAST24_MONTHS PresetPeriodType = "Last24Months"
	PRESETPERIODTYPE_ALL PresetPeriodType = "All"
)

// All allowed values of PresetPeriodType enum
var AllowedPresetPeriodTypeEnumValues = []PresetPeriodType{
	"CurrentDay",
	"CurrentWeek",
	"CurrentMonth",
	"CurrentQuarter",
	"CurrentYear",
	"PreviousDay",
	"PreviousWeek",
	"PreviousMonth",
	"PreviousQuarter",
	"PreviousYear",
	"Last2Hours",
	"Last6Hours",
	"Last12Hours",
	"Last24Hours",
	"Last48Hours",
	"Last7Days",
	"Last30Days",
	"Last60Days",
	"Last90Days",
	"Last365Days",
	"Last3Months",
	"Last6Months",
	"Last12Months",
	"Last24Months",
	"All",
}

func (v *PresetPeriodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PresetPeriodType(value)
	for _, existing := range AllowedPresetPeriodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PresetPeriodType", value)
}

// NewPresetPeriodTypeFromValue returns a pointer to a valid PresetPeriodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPresetPeriodTypeFromValue(v string) (*PresetPeriodType, error) {
	ev := PresetPeriodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PresetPeriodType: valid values are %v", v, AllowedPresetPeriodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PresetPeriodType) IsValid() bool {
	for _, existing := range AllowedPresetPeriodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PresetPeriodType value
func (v PresetPeriodType) Ptr() *PresetPeriodType {
	return &v
}

type NullablePresetPeriodType struct {
	value *PresetPeriodType
	isSet bool
}

func (v NullablePresetPeriodType) Get() *PresetPeriodType {
	return v.value
}

func (v *NullablePresetPeriodType) Set(val *PresetPeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullablePresetPeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullablePresetPeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresetPeriodType(val *PresetPeriodType) *NullablePresetPeriodType {
	return &NullablePresetPeriodType{value: val, isSet: true}
}

func (v NullablePresetPeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresetPeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

