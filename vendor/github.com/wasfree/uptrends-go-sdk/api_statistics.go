/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// StatisticsApiService StatisticsApi service
type StatisticsApiService service

type ApiStatisticsGetMonitorGroupStatisticsRequest struct {
	ctx context.Context
	ApiService *StatisticsApiService
	monitorGroupGuid string
	filter *string
	start *interface{}
	end *interface{}
	presetPeriod *string
}

// The filter for the requested response fields. E.g. \&quot;Alerts,SlaTarget\&quot;.
func (r ApiStatisticsGetMonitorGroupStatisticsRequest) Filter(filter string) ApiStatisticsGetMonitorGroupStatisticsRequest {
	r.filter = &filter
	return r
}

// The start of a custom period (can&#39;t be used together with the PresetPeriod parameter)
func (r ApiStatisticsGetMonitorGroupStatisticsRequest) Start(start interface{}) ApiStatisticsGetMonitorGroupStatisticsRequest {
	r.start = &start
	return r
}

// The end of a custom period
func (r ApiStatisticsGetMonitorGroupStatisticsRequest) End(end interface{}) ApiStatisticsGetMonitorGroupStatisticsRequest {
	r.end = &end
	return r
}

// The requested time period.
func (r ApiStatisticsGetMonitorGroupStatisticsRequest) PresetPeriod(presetPeriod string) ApiStatisticsGetMonitorGroupStatisticsRequest {
	r.presetPeriod = &presetPeriod
	return r
}

func (r ApiStatisticsGetMonitorGroupStatisticsRequest) Execute() (*StatisticsResponse, *http.Response, error) {
	return r.ApiService.StatisticsGetMonitorGroupStatisticsExecute(r)
}

/*
StatisticsGetMonitorGroupStatistics Gets the monitor group statistics.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param monitorGroupGuid The Guid of the monitor group.
 @return ApiStatisticsGetMonitorGroupStatisticsRequest
*/
func (a *StatisticsApiService) StatisticsGetMonitorGroupStatistics(ctx context.Context, monitorGroupGuid string) ApiStatisticsGetMonitorGroupStatisticsRequest {
	return ApiStatisticsGetMonitorGroupStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		monitorGroupGuid: monitorGroupGuid,
	}
}

// Execute executes the request
//  @return StatisticsResponse
func (a *StatisticsApiService) StatisticsGetMonitorGroupStatisticsExecute(r ApiStatisticsGetMonitorGroupStatisticsRequest) (*StatisticsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StatisticsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StatisticsApiService.StatisticsGetMonitorGroupStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Statistics/MonitorGroup/{monitorGroupGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"monitorGroupGuid"+"}", url.PathEscape(parameterToString(r.monitorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		localVarQueryParams.Add("Filter", parameterToString(*r.filter, ""))
	}
	if r.start != nil {
		localVarQueryParams.Add("Start", parameterToString(*r.start, ""))
	}
	if r.end != nil {
		localVarQueryParams.Add("End", parameterToString(*r.end, ""))
	}
	if r.presetPeriod != nil {
		localVarQueryParams.Add("PresetPeriod", parameterToString(*r.presetPeriod, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStatisticsGetMonitorStatisticsRequest struct {
	ctx context.Context
	ApiService *StatisticsApiService
	monitorGuid string
	filter *string
	start *interface{}
	end *interface{}
	presetPeriod *string
}

// The filter for the requested response fields. E.g. \&quot;Alerts,SlaTarget\&quot;.
func (r ApiStatisticsGetMonitorStatisticsRequest) Filter(filter string) ApiStatisticsGetMonitorStatisticsRequest {
	r.filter = &filter
	return r
}

// The start of a custom period (can&#39;t be used together with the PresetPeriod parameter)
func (r ApiStatisticsGetMonitorStatisticsRequest) Start(start interface{}) ApiStatisticsGetMonitorStatisticsRequest {
	r.start = &start
	return r
}

// The end of a custom period
func (r ApiStatisticsGetMonitorStatisticsRequest) End(end interface{}) ApiStatisticsGetMonitorStatisticsRequest {
	r.end = &end
	return r
}

// The requested time period.
func (r ApiStatisticsGetMonitorStatisticsRequest) PresetPeriod(presetPeriod string) ApiStatisticsGetMonitorStatisticsRequest {
	r.presetPeriod = &presetPeriod
	return r
}

func (r ApiStatisticsGetMonitorStatisticsRequest) Execute() (*StatisticsResponse, *http.Response, error) {
	return r.ApiService.StatisticsGetMonitorStatisticsExecute(r)
}

/*
StatisticsGetMonitorStatistics Gets the monitor statistics.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param monitorGuid The Guid of the monitor.
 @return ApiStatisticsGetMonitorStatisticsRequest
*/
func (a *StatisticsApiService) StatisticsGetMonitorStatistics(ctx context.Context, monitorGuid string) ApiStatisticsGetMonitorStatisticsRequest {
	return ApiStatisticsGetMonitorStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		monitorGuid: monitorGuid,
	}
}

// Execute executes the request
//  @return StatisticsResponse
func (a *StatisticsApiService) StatisticsGetMonitorStatisticsExecute(r ApiStatisticsGetMonitorStatisticsRequest) (*StatisticsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StatisticsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StatisticsApiService.StatisticsGetMonitorStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Statistics/Monitor/{monitorGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"monitorGuid"+"}", url.PathEscape(parameterToString(r.monitorGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		localVarQueryParams.Add("Filter", parameterToString(*r.filter, ""))
	}
	if r.start != nil {
		localVarQueryParams.Add("Start", parameterToString(*r.start, ""))
	}
	if r.end != nil {
		localVarQueryParams.Add("End", parameterToString(*r.end, ""))
	}
	if r.presetPeriod != nil {
		localVarQueryParams.Add("PresetPeriod", parameterToString(*r.presetPeriod, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
