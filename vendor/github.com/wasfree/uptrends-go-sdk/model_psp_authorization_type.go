/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// PSPAuthorizationType 
type PSPAuthorizationType string

// List of PSPAuthorizationType
const (
	PSPAUTHORIZATIONTYPE_VIEW_PUBLIC_DASHBOARD PSPAuthorizationType = "ViewPublicDashboard"
)

// All allowed values of PSPAuthorizationType enum
var AllowedPSPAuthorizationTypeEnumValues = []PSPAuthorizationType{
	"ViewPublicDashboard",
}

func (v *PSPAuthorizationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PSPAuthorizationType(value)
	for _, existing := range AllowedPSPAuthorizationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PSPAuthorizationType", value)
}

// NewPSPAuthorizationTypeFromValue returns a pointer to a valid PSPAuthorizationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPSPAuthorizationTypeFromValue(v string) (*PSPAuthorizationType, error) {
	ev := PSPAuthorizationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PSPAuthorizationType: valid values are %v", v, AllowedPSPAuthorizationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PSPAuthorizationType) IsValid() bool {
	for _, existing := range AllowedPSPAuthorizationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PSPAuthorizationType value
func (v PSPAuthorizationType) Ptr() *PSPAuthorizationType {
	return &v
}

type NullablePSPAuthorizationType struct {
	value *PSPAuthorizationType
	isSet bool
}

func (v NullablePSPAuthorizationType) Get() *PSPAuthorizationType {
	return v.value
}

func (v *NullablePSPAuthorizationType) Set(val *PSPAuthorizationType) {
	v.value = val
	v.isSet = true
}

func (v NullablePSPAuthorizationType) IsSet() bool {
	return v.isSet
}

func (v *NullablePSPAuthorizationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePSPAuthorizationType(val *PSPAuthorizationType) *NullablePSPAuthorizationType {
	return &NullablePSPAuthorizationType{value: val, isSet: true}
}

func (v NullablePSPAuthorizationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePSPAuthorizationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

