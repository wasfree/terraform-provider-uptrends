/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// ErrorConditionEffect 
type ErrorConditionEffect string

// List of ErrorConditionEffect
const (
	ERRORCONDITIONEFFECT_INDICATE ErrorConditionEffect = "Indicate"
	ERRORCONDITIONEFFECT_ERROR ErrorConditionEffect = "Error"
)

// All allowed values of ErrorConditionEffect enum
var AllowedErrorConditionEffectEnumValues = []ErrorConditionEffect{
	"Indicate",
	"Error",
}

func (v *ErrorConditionEffect) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorConditionEffect(value)
	for _, existing := range AllowedErrorConditionEffectEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorConditionEffect", value)
}

// NewErrorConditionEffectFromValue returns a pointer to a valid ErrorConditionEffect
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorConditionEffectFromValue(v string) (*ErrorConditionEffect, error) {
	ev := ErrorConditionEffect(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorConditionEffect: valid values are %v", v, AllowedErrorConditionEffectEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorConditionEffect) IsValid() bool {
	for _, existing := range AllowedErrorConditionEffectEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErrorConditionEffect value
func (v ErrorConditionEffect) Ptr() *ErrorConditionEffect {
	return &v
}

type NullableErrorConditionEffect struct {
	value *ErrorConditionEffect
	isSet bool
}

func (v NullableErrorConditionEffect) Get() *ErrorConditionEffect {
	return v.value
}

func (v *NullableErrorConditionEffect) Set(val *ErrorConditionEffect) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorConditionEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorConditionEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorConditionEffect(val *ErrorConditionEffect) *NullableErrorConditionEffect {
	return &NullableErrorConditionEffect{value: val, isSet: true}
}

func (v NullableErrorConditionEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorConditionEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

