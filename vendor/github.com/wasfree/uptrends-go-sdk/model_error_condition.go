/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// ErrorCondition struct for ErrorCondition
type ErrorCondition struct {
	// Error condition type
	ErrorConditionType ErrorConditionType `json:"ErrorConditionType"`
	// The value of this error conditions (not used in all types)
	Value *string `json:"Value,omitempty"`
	// The percentage of this error conditions (not used in all types)
	Percentage *string `json:"Percentage,omitempty"`
	// The level of this error conditions (not used in all types)
	Level *ErrorConditionConsoleLevel `json:"Level,omitempty"`
	// The match type of this error conditions (not used in all types)
	MatchType *ErrorConditionMatchType `json:"MatchType,omitempty"`
	// The effect of this error conditions (not used in all types)
	Effect *ErrorConditionEffect `json:"Effect,omitempty"`
}

// NewErrorCondition instantiates a new ErrorCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorCondition(errorConditionType ErrorConditionType) *ErrorCondition {
	this := ErrorCondition{}
	this.ErrorConditionType = errorConditionType
	return &this
}

// NewErrorConditionWithDefaults instantiates a new ErrorCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorConditionWithDefaults() *ErrorCondition {
	this := ErrorCondition{}
	return &this
}

// GetErrorConditionType returns the ErrorConditionType field value
func (o *ErrorCondition) GetErrorConditionType() ErrorConditionType {
	if o == nil {
		var ret ErrorConditionType
		return ret
	}

	return o.ErrorConditionType
}

// GetErrorConditionTypeOk returns a tuple with the ErrorConditionType field value
// and a boolean to check if the value has been set.
func (o *ErrorCondition) GetErrorConditionTypeOk() (*ErrorConditionType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ErrorConditionType, true
}

// SetErrorConditionType sets field value
func (o *ErrorCondition) SetErrorConditionType(v ErrorConditionType) {
	o.ErrorConditionType = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ErrorCondition) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorCondition) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ErrorCondition) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ErrorCondition) SetValue(v string) {
	o.Value = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *ErrorCondition) GetPercentage() string {
	if o == nil || isNil(o.Percentage) {
		var ret string
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorCondition) GetPercentageOk() (*string, bool) {
	if o == nil || isNil(o.Percentage) {
    return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *ErrorCondition) HasPercentage() bool {
	if o != nil && !isNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given string and assigns it to the Percentage field.
func (o *ErrorCondition) SetPercentage(v string) {
	o.Percentage = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *ErrorCondition) GetLevel() ErrorConditionConsoleLevel {
	if o == nil || isNil(o.Level) {
		var ret ErrorConditionConsoleLevel
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorCondition) GetLevelOk() (*ErrorConditionConsoleLevel, bool) {
	if o == nil || isNil(o.Level) {
    return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *ErrorCondition) HasLevel() bool {
	if o != nil && !isNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given ErrorConditionConsoleLevel and assigns it to the Level field.
func (o *ErrorCondition) SetLevel(v ErrorConditionConsoleLevel) {
	o.Level = &v
}

// GetMatchType returns the MatchType field value if set, zero value otherwise.
func (o *ErrorCondition) GetMatchType() ErrorConditionMatchType {
	if o == nil || isNil(o.MatchType) {
		var ret ErrorConditionMatchType
		return ret
	}
	return *o.MatchType
}

// GetMatchTypeOk returns a tuple with the MatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorCondition) GetMatchTypeOk() (*ErrorConditionMatchType, bool) {
	if o == nil || isNil(o.MatchType) {
    return nil, false
	}
	return o.MatchType, true
}

// HasMatchType returns a boolean if a field has been set.
func (o *ErrorCondition) HasMatchType() bool {
	if o != nil && !isNil(o.MatchType) {
		return true
	}

	return false
}

// SetMatchType gets a reference to the given ErrorConditionMatchType and assigns it to the MatchType field.
func (o *ErrorCondition) SetMatchType(v ErrorConditionMatchType) {
	o.MatchType = &v
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *ErrorCondition) GetEffect() ErrorConditionEffect {
	if o == nil || isNil(o.Effect) {
		var ret ErrorConditionEffect
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorCondition) GetEffectOk() (*ErrorConditionEffect, bool) {
	if o == nil || isNil(o.Effect) {
    return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *ErrorCondition) HasEffect() bool {
	if o != nil && !isNil(o.Effect) {
		return true
	}

	return false
}

// SetEffect gets a reference to the given ErrorConditionEffect and assigns it to the Effect field.
func (o *ErrorCondition) SetEffect(v ErrorConditionEffect) {
	o.Effect = &v
}

func (o ErrorCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ErrorConditionType"] = o.ErrorConditionType
	}
	if !isNil(o.Value) {
		toSerialize["Value"] = o.Value
	}
	if !isNil(o.Percentage) {
		toSerialize["Percentage"] = o.Percentage
	}
	if !isNil(o.Level) {
		toSerialize["Level"] = o.Level
	}
	if !isNil(o.MatchType) {
		toSerialize["MatchType"] = o.MatchType
	}
	if !isNil(o.Effect) {
		toSerialize["Effect"] = o.Effect
	}
	return json.Marshal(toSerialize)
}

type NullableErrorCondition struct {
	value *ErrorCondition
	isSet bool
}

func (v NullableErrorCondition) Get() *ErrorCondition {
	return v.value
}

func (v *NullableErrorCondition) Set(val *ErrorCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorCondition(val *ErrorCondition) *NullableErrorCondition {
	return &NullableErrorCondition{value: val, isSet: true}
}

func (v NullableErrorCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


