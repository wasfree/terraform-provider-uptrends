/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// ErrorConditionType 
type ErrorConditionType string

// List of ErrorConditionType
const (
	ERRORCONDITIONTYPE_LOAD_TIME_LIMIT1 ErrorConditionType = "LoadTimeLimit1"
	ERRORCONDITIONTYPE_LOAD_TIME_LIMIT2 ErrorConditionType = "LoadTimeLimit2"
	ERRORCONDITIONTYPE_TOTAL_MIN_BYTES ErrorConditionType = "TotalMinBytes"
	ERRORCONDITIONTYPE_TOTAL_MAX_BYTES ErrorConditionType = "TotalMaxBytes"
	ERRORCONDITIONTYPE_CONTENT_MATCH ErrorConditionType = "ContentMatch"
	ERRORCONDITIONTYPE_CONSOLE_CONTENT_MATCH ErrorConditionType = "ConsoleContentMatch"
	ERRORCONDITIONTYPE_CONSOLE_LEVEL ErrorConditionType = "ConsoleLevel"
	ERRORCONDITIONTYPE_HTTP_STATUS ErrorConditionType = "HttpStatus"
	ERRORCONDITIONTYPE_PAGE_ELEMENT_MAX_SIZE_WITH_PERCENTAGE ErrorConditionType = "PageElementMaxSizeWithPercentage"
	ERRORCONDITIONTYPE_PAGE_ELEMENT_FAILED_WITH_PERCENTAGE ErrorConditionType = "PageElementFailedWithPercentage"
	ERRORCONDITIONTYPE_TIME_TO_FIRST_BYTE_MAXIMUM ErrorConditionType = "TimeToFirstByteMaximum"
	ERRORCONDITIONTYPE_REQUEST_START_MAXIMUM ErrorConditionType = "RequestStartMaximum"
	ERRORCONDITIONTYPE_DOM_COMPLETE_MAXIMUM ErrorConditionType = "DomCompleteMaximum"
	ERRORCONDITIONTYPE_DOM_INTERACTIVE_MAXIMUM ErrorConditionType = "DomInteractiveMaximum"
	ERRORCONDITIONTYPE_USE_RECOMMENDED_CORE_WEB_VITALS ErrorConditionType = "UseRecommendedCoreWebVitals"
	ERRORCONDITIONTYPE_FIRST_CONTENTFUL_PAINT_MAXIMUM ErrorConditionType = "FirstContentfulPaintMaximum"
	ERRORCONDITIONTYPE_LARGEST_CONTENTFUL_PAINT_MAXIMUM ErrorConditionType = "LargestContentfulPaintMaximum"
	ERRORCONDITIONTYPE_TIME_TO_INTERACTIVE_MAXIMUM ErrorConditionType = "TimeToInteractiveMaximum"
	ERRORCONDITIONTYPE_CUMULATIVE_LAYOUT_SHIFT_MAXIMUM ErrorConditionType = "CumulativeLayoutShiftMaximum"
	ERRORCONDITIONTYPE_TOTAL_BLOCKING_TIME_MAXIMUM ErrorConditionType = "TotalBlockingTimeMaximum"
)

// All allowed values of ErrorConditionType enum
var AllowedErrorConditionTypeEnumValues = []ErrorConditionType{
	"LoadTimeLimit1",
	"LoadTimeLimit2",
	"TotalMinBytes",
	"TotalMaxBytes",
	"ContentMatch",
	"ConsoleContentMatch",
	"ConsoleLevel",
	"HttpStatus",
	"PageElementMaxSizeWithPercentage",
	"PageElementFailedWithPercentage",
	"TimeToFirstByteMaximum",
	"RequestStartMaximum",
	"DomCompleteMaximum",
	"DomInteractiveMaximum",
	"UseRecommendedCoreWebVitals",
	"FirstContentfulPaintMaximum",
	"LargestContentfulPaintMaximum",
	"TimeToInteractiveMaximum",
	"CumulativeLayoutShiftMaximum",
	"TotalBlockingTimeMaximum",
}

func (v *ErrorConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorConditionType(value)
	for _, existing := range AllowedErrorConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorConditionType", value)
}

// NewErrorConditionTypeFromValue returns a pointer to a valid ErrorConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorConditionTypeFromValue(v string) (*ErrorConditionType, error) {
	ev := ErrorConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorConditionType: valid values are %v", v, AllowedErrorConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorConditionType) IsValid() bool {
	for _, existing := range AllowedErrorConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErrorConditionType value
func (v ErrorConditionType) Ptr() *ErrorConditionType {
	return &v
}

type NullableErrorConditionType struct {
	value *ErrorConditionType
	isSet bool
}

func (v NullableErrorConditionType) Get() *ErrorConditionType {
	return v.value
}

func (v *NullableErrorConditionType) Set(val *ErrorConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorConditionType(val *ErrorConditionType) *NullableErrorConditionType {
	return &NullableErrorConditionType{value: val, isSet: true}
}

func (v NullableErrorConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

