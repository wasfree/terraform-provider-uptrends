/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// ScheduleType 
type ScheduleType string

// List of ScheduleType
const (
	SCHEDULETYPE_DAILY ScheduleType = "Daily"
	SCHEDULETYPE_WEEKLY ScheduleType = "Weekly"
	SCHEDULETYPE_MONTHLY ScheduleType = "Monthly"
	SCHEDULETYPE_QUARTERLY ScheduleType = "Quarterly"
	SCHEDULETYPE_YEARLY ScheduleType = "Yearly"
)

// All allowed values of ScheduleType enum
var AllowedScheduleTypeEnumValues = []ScheduleType{
	"Daily",
	"Weekly",
	"Monthly",
	"Quarterly",
	"Yearly",
}

func (v *ScheduleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScheduleType(value)
	for _, existing := range AllowedScheduleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScheduleType", value)
}

// NewScheduleTypeFromValue returns a pointer to a valid ScheduleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScheduleTypeFromValue(v string) (*ScheduleType, error) {
	ev := ScheduleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScheduleType: valid values are %v", v, AllowedScheduleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScheduleType) IsValid() bool {
	for _, existing := range AllowedScheduleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScheduleType value
func (v ScheduleType) Ptr() *ScheduleType {
	return &v
}

type NullableScheduleType struct {
	value *ScheduleType
	isSet bool
}

func (v NullableScheduleType) Get() *ScheduleType {
	return v.value
}

func (v *NullableScheduleType) Set(val *ScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleType(val *ScheduleType) *NullableScheduleType {
	return &NullableScheduleType{value: val, isSet: true}
}

func (v NullableScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

