/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// Schedule struct for Schedule
type Schedule struct {
	ScheduleType *ScheduleType `json:"ScheduleType,omitempty"`
	Time *string `json:"Time,omitempty"`
	WeekDay *DayOfWeek `json:"WeekDay,omitempty"`
	MonthDay *int32 `json:"MonthDay,omitempty"`
}

// NewSchedule instantiates a new Schedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedule() *Schedule {
	this := Schedule{}
	return &this
}

// NewScheduleWithDefaults instantiates a new Schedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleWithDefaults() *Schedule {
	this := Schedule{}
	return &this
}

// GetScheduleType returns the ScheduleType field value if set, zero value otherwise.
func (o *Schedule) GetScheduleType() ScheduleType {
	if o == nil || o.ScheduleType == nil {
		var ret ScheduleType
		return ret
	}
	return *o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetScheduleTypeOk() (*ScheduleType, bool) {
	if o == nil || o.ScheduleType == nil {
		return nil, false
	}
	return o.ScheduleType, true
}

// HasScheduleType returns a boolean if a field has been set.
func (o *Schedule) HasScheduleType() bool {
	if o != nil && o.ScheduleType != nil {
		return true
	}

	return false
}

// SetScheduleType gets a reference to the given ScheduleType and assigns it to the ScheduleType field.
func (o *Schedule) SetScheduleType(v ScheduleType) {
	o.ScheduleType = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Schedule) GetTime() string {
	if o == nil || o.Time == nil {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetTimeOk() (*string, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Schedule) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *Schedule) SetTime(v string) {
	o.Time = &v
}

// GetWeekDay returns the WeekDay field value if set, zero value otherwise.
func (o *Schedule) GetWeekDay() DayOfWeek {
	if o == nil || o.WeekDay == nil {
		var ret DayOfWeek
		return ret
	}
	return *o.WeekDay
}

// GetWeekDayOk returns a tuple with the WeekDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetWeekDayOk() (*DayOfWeek, bool) {
	if o == nil || o.WeekDay == nil {
		return nil, false
	}
	return o.WeekDay, true
}

// HasWeekDay returns a boolean if a field has been set.
func (o *Schedule) HasWeekDay() bool {
	if o != nil && o.WeekDay != nil {
		return true
	}

	return false
}

// SetWeekDay gets a reference to the given DayOfWeek and assigns it to the WeekDay field.
func (o *Schedule) SetWeekDay(v DayOfWeek) {
	o.WeekDay = &v
}

// GetMonthDay returns the MonthDay field value if set, zero value otherwise.
func (o *Schedule) GetMonthDay() int32 {
	if o == nil || o.MonthDay == nil {
		var ret int32
		return ret
	}
	return *o.MonthDay
}

// GetMonthDayOk returns a tuple with the MonthDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetMonthDayOk() (*int32, bool) {
	if o == nil || o.MonthDay == nil {
		return nil, false
	}
	return o.MonthDay, true
}

// HasMonthDay returns a boolean if a field has been set.
func (o *Schedule) HasMonthDay() bool {
	if o != nil && o.MonthDay != nil {
		return true
	}

	return false
}

// SetMonthDay gets a reference to the given int32 and assigns it to the MonthDay field.
func (o *Schedule) SetMonthDay(v int32) {
	o.MonthDay = &v
}

func (o Schedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScheduleType != nil {
		toSerialize["ScheduleType"] = o.ScheduleType
	}
	if o.Time != nil {
		toSerialize["Time"] = o.Time
	}
	if o.WeekDay != nil {
		toSerialize["WeekDay"] = o.WeekDay
	}
	if o.MonthDay != nil {
		toSerialize["MonthDay"] = o.MonthDay
	}
	return json.Marshal(toSerialize)
}

type NullableSchedule struct {
	value *Schedule
	isSet bool
}

func (v NullableSchedule) Get() *Schedule {
	return v.value
}

func (v *NullableSchedule) Set(val *Schedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedule(val *Schedule) *NullableSchedule {
	return &NullableSchedule{value: val, isSet: true}
}

func (v NullableSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


