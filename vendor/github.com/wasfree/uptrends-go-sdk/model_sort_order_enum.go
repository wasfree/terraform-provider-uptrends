/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// SortOrderEnum the model 'SortOrderEnum'
type SortOrderEnum string

// List of SortOrderEnum
const (
	SORTORDERENUM_ALPHABETICAL SortOrderEnum = "Alphabetical"
	SORTORDERENUM_BY_STATUS SortOrderEnum = "ByStatus"
)

var allowedSortOrderEnumEnumValues = []SortOrderEnum{
	"Alphabetical",
	"ByStatus",
}

func (v *SortOrderEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SortOrderEnum(value)
	for _, existing := range allowedSortOrderEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortOrderEnum", value)
}

// NewSortOrderEnumFromValue returns a pointer to a valid SortOrderEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortOrderEnumFromValue(v string) (*SortOrderEnum, error) {
	ev := SortOrderEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortOrderEnum: valid values are %v", v, allowedSortOrderEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortOrderEnum) IsValid() bool {
	for _, existing := range allowedSortOrderEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SortOrderEnum value
func (v SortOrderEnum) Ptr() *SortOrderEnum {
	return &v
}

type NullableSortOrderEnum struct {
	value *SortOrderEnum
	isSet bool
}

func (v NullableSortOrderEnum) Get() *SortOrderEnum {
	return v.value
}

func (v *NullableSortOrderEnum) Set(val *SortOrderEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSortOrderEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSortOrderEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortOrderEnum(val *SortOrderEnum) *NullableSortOrderEnum {
	return &NullableSortOrderEnum{value: val, isSet: true}
}

func (v NullableSortOrderEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortOrderEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

