/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// MaintenanceTypes 
type MaintenanceTypes string

// List of MaintenanceTypes
const (
	MAINTENANCETYPES_DISABLE_MONITORING MaintenanceTypes = "DisableMonitoring"
	MAINTENANCETYPES_DISABLE_NOTIFICATIONS MaintenanceTypes = "DisableNotifications"
)

// All allowed values of MaintenanceTypes enum
var AllowedMaintenanceTypesEnumValues = []MaintenanceTypes{
	"DisableMonitoring",
	"DisableNotifications",
}

func (v *MaintenanceTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MaintenanceTypes(value)
	for _, existing := range AllowedMaintenanceTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MaintenanceTypes", value)
}

// NewMaintenanceTypesFromValue returns a pointer to a valid MaintenanceTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMaintenanceTypesFromValue(v string) (*MaintenanceTypes, error) {
	ev := MaintenanceTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MaintenanceTypes: valid values are %v", v, AllowedMaintenanceTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MaintenanceTypes) IsValid() bool {
	for _, existing := range AllowedMaintenanceTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MaintenanceTypes value
func (v MaintenanceTypes) Ptr() *MaintenanceTypes {
	return &v
}

type NullableMaintenanceTypes struct {
	value *MaintenanceTypes
	isSet bool
}

func (v NullableMaintenanceTypes) Get() *MaintenanceTypes {
	return v.value
}

func (v *NullableMaintenanceTypes) Set(val *MaintenanceTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableMaintenanceTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableMaintenanceTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaintenanceTypes(val *MaintenanceTypes) *NullableMaintenanceTypes {
	return &NullableMaintenanceTypes{value: val, isSet: true}
}

func (v NullableMaintenanceTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaintenanceTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

