/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// BrowserType 
type BrowserType string

// List of BrowserType
const (
	BROWSERTYPE_IE BrowserType = "IE"
	BROWSERTYPE_FIREFOX BrowserType = "Firefox"
	BROWSERTYPE_CHROME BrowserType = "Chrome"
	BROWSERTYPE_SAFARI BrowserType = "Safari"
	BROWSERTYPE_PHANTOM_JS BrowserType = "PhantomJS"
	BROWSERTYPE_PHANTOM_JS20 BrowserType = "PhantomJS20"
	BROWSERTYPE_CHROME_WITH_EXTRA_METRICS BrowserType = "ChromeWithExtraMetrics"
)

var allowedBrowserTypeEnumValues = []BrowserType{
	"IE",
	"Firefox",
	"Chrome",
	"Safari",
	"PhantomJS",
	"PhantomJS20",
	"ChromeWithExtraMetrics",
}

func (v *BrowserType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BrowserType(value)
	for _, existing := range allowedBrowserTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BrowserType", value)
}

// NewBrowserTypeFromValue returns a pointer to a valid BrowserType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBrowserTypeFromValue(v string) (*BrowserType, error) {
	ev := BrowserType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BrowserType: valid values are %v", v, allowedBrowserTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BrowserType) IsValid() bool {
	for _, existing := range allowedBrowserTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BrowserType value
func (v BrowserType) Ptr() *BrowserType {
	return &v
}

type NullableBrowserType struct {
	value *BrowserType
	isSet bool
}

func (v NullableBrowserType) Get() *BrowserType {
	return v.value
}

func (v *NullableBrowserType) Set(val *BrowserType) {
	v.value = val
	v.isSet = true
}

func (v NullableBrowserType) IsSet() bool {
	return v.isSet
}

func (v *NullableBrowserType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrowserType(val *BrowserType) *NullableBrowserType {
	return &NullableBrowserType{value: val, isSet: true}
}

func (v NullableBrowserType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrowserType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

