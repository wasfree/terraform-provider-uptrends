/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// IntegrationAuthorizationType 
type IntegrationAuthorizationType string

// List of IntegrationAuthorizationType
const (
	INTEGRATIONAUTHORIZATIONTYPE_USE_INTEGRATION IntegrationAuthorizationType = "UseIntegration"
	INTEGRATIONAUTHORIZATIONTYPE_EDIT_INTEGRATION IntegrationAuthorizationType = "EditIntegration"
)

// All allowed values of IntegrationAuthorizationType enum
var AllowedIntegrationAuthorizationTypeEnumValues = []IntegrationAuthorizationType{
	"UseIntegration",
	"EditIntegration",
}

func (v *IntegrationAuthorizationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntegrationAuthorizationType(value)
	for _, existing := range AllowedIntegrationAuthorizationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntegrationAuthorizationType", value)
}

// NewIntegrationAuthorizationTypeFromValue returns a pointer to a valid IntegrationAuthorizationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntegrationAuthorizationTypeFromValue(v string) (*IntegrationAuthorizationType, error) {
	ev := IntegrationAuthorizationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntegrationAuthorizationType: valid values are %v", v, AllowedIntegrationAuthorizationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntegrationAuthorizationType) IsValid() bool {
	for _, existing := range AllowedIntegrationAuthorizationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntegrationAuthorizationType value
func (v IntegrationAuthorizationType) Ptr() *IntegrationAuthorizationType {
	return &v
}

type NullableIntegrationAuthorizationType struct {
	value *IntegrationAuthorizationType
	isSet bool
}

func (v NullableIntegrationAuthorizationType) Get() *IntegrationAuthorizationType {
	return v.value
}

func (v *NullableIntegrationAuthorizationType) Set(val *IntegrationAuthorizationType) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationAuthorizationType) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationAuthorizationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationAuthorizationType(val *IntegrationAuthorizationType) *NullableIntegrationAuthorizationType {
	return &NullableIntegrationAuthorizationType{value: val, isSet: true}
}

func (v NullableIntegrationAuthorizationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationAuthorizationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

