/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AlertDefinitionApiService AlertDefinitionApi service
type AlertDefinitionApiService service

type ApiAlertDefinitionAddIntegrationToEscalationLevelRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	escalationLevelIntegration *EscalationLevelIntegration
}

// The integration to add.
func (r ApiAlertDefinitionAddIntegrationToEscalationLevelRequest) EscalationLevelIntegration(escalationLevelIntegration EscalationLevelIntegration) ApiAlertDefinitionAddIntegrationToEscalationLevelRequest {
	r.escalationLevelIntegration = &escalationLevelIntegration
	return r
}

func (r ApiAlertDefinitionAddIntegrationToEscalationLevelRequest) Execute() (*Integration, *http.Response, error) {
	return r.ApiService.AlertDefinitionAddIntegrationToEscalationLevelExecute(r)
}

/*
AlertDefinitionAddIntegrationToEscalationLevel Adds an integration to a specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @return ApiAlertDefinitionAddIntegrationToEscalationLevelRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionAddIntegrationToEscalationLevel(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32) ApiAlertDefinitionAddIntegrationToEscalationLevelRequest {
	return ApiAlertDefinitionAddIntegrationToEscalationLevelRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
	}
}

// Execute executes the request
//  @return Integration
func (a *AlertDefinitionApiService) AlertDefinitionAddIntegrationToEscalationLevelExecute(r ApiAlertDefinitionAddIntegrationToEscalationLevelRequest) (*Integration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Integration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionAddIntegrationToEscalationLevel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.escalationLevelIntegration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionAddMonitorGroupToAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	monitorGroupGuid string
}

func (r ApiAlertDefinitionAddMonitorGroupToAlertDefinitionRequest) Execute() (*AlertDefinitionMonitorGroup, *http.Response, error) {
	return r.ApiService.AlertDefinitionAddMonitorGroupToAlertDefinitionExecute(r)
}

/*
AlertDefinitionAddMonitorGroupToAlertDefinition Adds a monitor group to the specified alert definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition to modify.
 @param monitorGroupGuid The Guid of the monitor group to add.
 @return ApiAlertDefinitionAddMonitorGroupToAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionAddMonitorGroupToAlertDefinition(ctx context.Context, alertDefinitionGuid string, monitorGroupGuid string) ApiAlertDefinitionAddMonitorGroupToAlertDefinitionRequest {
	return ApiAlertDefinitionAddMonitorGroupToAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		monitorGroupGuid: monitorGroupGuid,
	}
}

// Execute executes the request
//  @return AlertDefinitionMonitorGroup
func (a *AlertDefinitionApiService) AlertDefinitionAddMonitorGroupToAlertDefinitionExecute(r ApiAlertDefinitionAddMonitorGroupToAlertDefinitionRequest) (*AlertDefinitionMonitorGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertDefinitionMonitorGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionAddMonitorGroupToAlertDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/Member/MonitorGroup/{monitorGroupGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"monitorGroupGuid"+"}", url.PathEscape(parameterToString(r.monitorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionAddMonitorToAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	monitorGuid string
}

func (r ApiAlertDefinitionAddMonitorToAlertDefinitionRequest) Execute() (*AlertDefinitionMonitor, *http.Response, error) {
	return r.ApiService.AlertDefinitionAddMonitorToAlertDefinitionExecute(r)
}

/*
AlertDefinitionAddMonitorToAlertDefinition Adds a monitor to the specified alert definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition to modify.
 @param monitorGuid The Guid of the monitor to add.
 @return ApiAlertDefinitionAddMonitorToAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionAddMonitorToAlertDefinition(ctx context.Context, alertDefinitionGuid string, monitorGuid string) ApiAlertDefinitionAddMonitorToAlertDefinitionRequest {
	return ApiAlertDefinitionAddMonitorToAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		monitorGuid: monitorGuid,
	}
}

// Execute executes the request
//  @return AlertDefinitionMonitor
func (a *AlertDefinitionApiService) AlertDefinitionAddMonitorToAlertDefinitionExecute(r ApiAlertDefinitionAddMonitorToAlertDefinitionRequest) (*AlertDefinitionMonitor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertDefinitionMonitor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionAddMonitorToAlertDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/Member/Monitor/{monitorGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"monitorGuid"+"}", url.PathEscape(parameterToString(r.monitorGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionAddOperatorGroupToEscalationLevelRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	operatorGroupGuid string
}

func (r ApiAlertDefinitionAddOperatorGroupToEscalationLevelRequest) Execute() (*AlertDefinitionOperatorGroup, *http.Response, error) {
	return r.ApiService.AlertDefinitionAddOperatorGroupToEscalationLevelExecute(r)
}

/*
AlertDefinitionAddOperatorGroupToEscalationLevel Adds an operator group to the specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @param operatorGroupGuid The Guid of the operator group to add.
 @return ApiAlertDefinitionAddOperatorGroupToEscalationLevelRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionAddOperatorGroupToEscalationLevel(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32, operatorGroupGuid string) ApiAlertDefinitionAddOperatorGroupToEscalationLevelRequest {
	return ApiAlertDefinitionAddOperatorGroupToEscalationLevelRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
		operatorGroupGuid: operatorGroupGuid,
	}
}

// Execute executes the request
//  @return AlertDefinitionOperatorGroup
func (a *AlertDefinitionApiService) AlertDefinitionAddOperatorGroupToEscalationLevelExecute(r ApiAlertDefinitionAddOperatorGroupToEscalationLevelRequest) (*AlertDefinitionOperatorGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertDefinitionOperatorGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionAddOperatorGroupToEscalationLevel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Member/OperatorGroup/{operatorGroupGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionAddOperatorToEscalationLevelRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	operatorGuid string
}

func (r ApiAlertDefinitionAddOperatorToEscalationLevelRequest) Execute() (*AlertDefinitionOperator, *http.Response, error) {
	return r.ApiService.AlertDefinitionAddOperatorToEscalationLevelExecute(r)
}

/*
AlertDefinitionAddOperatorToEscalationLevel Adds an operator to the specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @param operatorGuid The Guid of the operator to add.
 @return ApiAlertDefinitionAddOperatorToEscalationLevelRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionAddOperatorToEscalationLevel(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32, operatorGuid string) ApiAlertDefinitionAddOperatorToEscalationLevelRequest {
	return ApiAlertDefinitionAddOperatorToEscalationLevelRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
		operatorGuid: operatorGuid,
	}
}

// Execute executes the request
//  @return AlertDefinitionOperator
func (a *AlertDefinitionApiService) AlertDefinitionAddOperatorToEscalationLevelExecute(r ApiAlertDefinitionAddOperatorToEscalationLevelRequest) (*AlertDefinitionOperator, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertDefinitionOperator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionAddOperatorToEscalationLevel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Member/Operator/{operatorGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGuid"+"}", url.PathEscape(parameterToString(r.operatorGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionCreateAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinition *AlertDefinition
}

// The details of the alert definition to create.
func (r ApiAlertDefinitionCreateAlertDefinitionRequest) AlertDefinition(alertDefinition AlertDefinition) ApiAlertDefinitionCreateAlertDefinitionRequest {
	r.alertDefinition = &alertDefinition
	return r
}

func (r ApiAlertDefinitionCreateAlertDefinitionRequest) Execute() (*AlertDefinition, *http.Response, error) {
	return r.ApiService.AlertDefinitionCreateAlertDefinitionExecute(r)
}

/*
AlertDefinitionCreateAlertDefinition Creates a new alert definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlertDefinitionCreateAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionCreateAlertDefinition(ctx context.Context) ApiAlertDefinitionCreateAlertDefinitionRequest {
	return ApiAlertDefinitionCreateAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlertDefinition
func (a *AlertDefinitionApiService) AlertDefinitionCreateAlertDefinitionExecute(r ApiAlertDefinitionCreateAlertDefinitionRequest) (*AlertDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionCreateAlertDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alertDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionCreateAuthorizationForAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	alertDefinitionAuthorization *AlertDefinitionAuthorization
}

// Authorization to add
func (r ApiAlertDefinitionCreateAuthorizationForAlertDefinitionRequest) AlertDefinitionAuthorization(alertDefinitionAuthorization AlertDefinitionAuthorization) ApiAlertDefinitionCreateAuthorizationForAlertDefinitionRequest {
	r.alertDefinitionAuthorization = &alertDefinitionAuthorization
	return r
}

func (r ApiAlertDefinitionCreateAuthorizationForAlertDefinitionRequest) Execute() ([]AlertDefinitionAuthorization, *http.Response, error) {
	return r.ApiService.AlertDefinitionCreateAuthorizationForAlertDefinitionExecute(r)
}

/*
AlertDefinitionCreateAuthorizationForAlertDefinition Create authorizations for alert definition If the wanted authorizations requires other authorizations, these will be added as well

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The alert definition GUID
 @return ApiAlertDefinitionCreateAuthorizationForAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionCreateAuthorizationForAlertDefinition(ctx context.Context, alertDefinitionGuid string) ApiAlertDefinitionCreateAuthorizationForAlertDefinitionRequest {
	return ApiAlertDefinitionCreateAuthorizationForAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
	}
}

// Execute executes the request
//  @return []AlertDefinitionAuthorization
func (a *AlertDefinitionApiService) AlertDefinitionCreateAuthorizationForAlertDefinitionExecute(r ApiAlertDefinitionCreateAuthorizationForAlertDefinitionRequest) ([]AlertDefinitionAuthorization, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AlertDefinitionAuthorization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionCreateAuthorizationForAlertDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/Authorizations"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alertDefinitionAuthorization
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionDeleteAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
}

func (r ApiAlertDefinitionDeleteAlertDefinitionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionDeleteAlertDefinitionExecute(r)
}

/*
AlertDefinitionDeleteAlertDefinition Deletes an existing alert definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition to remove.
 @return ApiAlertDefinitionDeleteAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionDeleteAlertDefinition(ctx context.Context, alertDefinitionGuid string) ApiAlertDefinitionDeleteAlertDefinitionRequest {
	return ApiAlertDefinitionDeleteAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionDeleteAlertDefinitionExecute(r ApiAlertDefinitionDeleteAlertDefinitionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionDeleteAlertDefinition")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionDeleteAuthorizationForAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	authorizationGuid string
}

func (r ApiAlertDefinitionDeleteAuthorizationForAlertDefinitionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionDeleteAuthorizationForAlertDefinitionExecute(r)
}

/*
AlertDefinitionDeleteAuthorizationForAlertDefinition Delete alert definition authorization for alert definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The alert definition GUID
 @param authorizationGuid The authorization GUID that needs to be deleted
 @return ApiAlertDefinitionDeleteAuthorizationForAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionDeleteAuthorizationForAlertDefinition(ctx context.Context, alertDefinitionGuid string, authorizationGuid string) ApiAlertDefinitionDeleteAuthorizationForAlertDefinitionRequest {
	return ApiAlertDefinitionDeleteAuthorizationForAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		authorizationGuid: authorizationGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionDeleteAuthorizationForAlertDefinitionExecute(r ApiAlertDefinitionDeleteAuthorizationForAlertDefinitionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionDeleteAuthorizationForAlertDefinition")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/Authorizations/{authorizationGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationGuid"+"}", url.PathEscape(parameterToString(r.authorizationGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionGetAllAlertDefinitionsRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
}

func (r ApiAlertDefinitionGetAllAlertDefinitionsRequest) Execute() ([]AlertDefinition, *http.Response, error) {
	return r.ApiService.AlertDefinitionGetAllAlertDefinitionsExecute(r)
}

/*
AlertDefinitionGetAllAlertDefinitions Gets a list of all alert definitions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlertDefinitionGetAllAlertDefinitionsRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionGetAllAlertDefinitions(ctx context.Context) ApiAlertDefinitionGetAllAlertDefinitionsRequest {
	return ApiAlertDefinitionGetAllAlertDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AlertDefinition
func (a *AlertDefinitionApiService) AlertDefinitionGetAllAlertDefinitionsExecute(r ApiAlertDefinitionGetAllAlertDefinitionsRequest) ([]AlertDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AlertDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionGetAllAlertDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionGetAllEscalationLevelIntegrationsRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
}

func (r ApiAlertDefinitionGetAllEscalationLevelIntegrationsRequest) Execute() ([]Integration, *http.Response, error) {
	return r.ApiService.AlertDefinitionGetAllEscalationLevelIntegrationsExecute(r)
}

/*
AlertDefinitionGetAllEscalationLevelIntegrations Gets all integrations for a specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @return ApiAlertDefinitionGetAllEscalationLevelIntegrationsRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionGetAllEscalationLevelIntegrations(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32) ApiAlertDefinitionGetAllEscalationLevelIntegrationsRequest {
	return ApiAlertDefinitionGetAllEscalationLevelIntegrationsRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
	}
}

// Execute executes the request
//  @return []Integration
func (a *AlertDefinitionApiService) AlertDefinitionGetAllEscalationLevelIntegrationsExecute(r ApiAlertDefinitionGetAllEscalationLevelIntegrationsRequest) ([]Integration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Integration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionGetAllEscalationLevelIntegrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionGetAllEscalationLevelsRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
}

func (r ApiAlertDefinitionGetAllEscalationLevelsRequest) Execute() ([]EscalationLevel, *http.Response, error) {
	return r.ApiService.AlertDefinitionGetAllEscalationLevelsExecute(r)
}

/*
AlertDefinitionGetAllEscalationLevels Gets all escalation level information for the specified alert definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition for which to return all escalation levels.
 @return ApiAlertDefinitionGetAllEscalationLevelsRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionGetAllEscalationLevels(ctx context.Context, alertDefinitionGuid string) ApiAlertDefinitionGetAllEscalationLevelsRequest {
	return ApiAlertDefinitionGetAllEscalationLevelsRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
	}
}

// Execute executes the request
//  @return []EscalationLevel
func (a *AlertDefinitionApiService) AlertDefinitionGetAllEscalationLevelsExecute(r ApiAlertDefinitionGetAllEscalationLevelsRequest) ([]EscalationLevel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EscalationLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionGetAllEscalationLevels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionGetAllMembersRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
}

func (r ApiAlertDefinitionGetAllMembersRequest) Execute() ([]AlertDefinitionMember, *http.Response, error) {
	return r.ApiService.AlertDefinitionGetAllMembersExecute(r)
}

/*
AlertDefinitionGetAllMembers Gets a list of all monitor and monitor group guids for the specified alert definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition for which to return the members.
 @return ApiAlertDefinitionGetAllMembersRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionGetAllMembers(ctx context.Context, alertDefinitionGuid string) ApiAlertDefinitionGetAllMembersRequest {
	return ApiAlertDefinitionGetAllMembersRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
	}
}

// Execute executes the request
//  @return []AlertDefinitionMember
func (a *AlertDefinitionApiService) AlertDefinitionGetAllMembersExecute(r ApiAlertDefinitionGetAllMembersRequest) ([]AlertDefinitionMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AlertDefinitionMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionGetAllMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/Member"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionGetAuthorizationsOfAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
}

func (r ApiAlertDefinitionGetAuthorizationsOfAlertDefinitionRequest) Execute() ([]AlertDefinitionAuthorization, *http.Response, error) {
	return r.ApiService.AlertDefinitionGetAuthorizationsOfAlertDefinitionExecute(r)
}

/*
AlertDefinitionGetAuthorizationsOfAlertDefinition Get authorizations of alert definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The alert definition GUID
 @return ApiAlertDefinitionGetAuthorizationsOfAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionGetAuthorizationsOfAlertDefinition(ctx context.Context, alertDefinitionGuid string) ApiAlertDefinitionGetAuthorizationsOfAlertDefinitionRequest {
	return ApiAlertDefinitionGetAuthorizationsOfAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
	}
}

// Execute executes the request
//  @return []AlertDefinitionAuthorization
func (a *AlertDefinitionApiService) AlertDefinitionGetAuthorizationsOfAlertDefinitionExecute(r ApiAlertDefinitionGetAuthorizationsOfAlertDefinitionRequest) ([]AlertDefinitionAuthorization, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AlertDefinitionAuthorization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionGetAuthorizationsOfAlertDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/Authorizations"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionGetEscalationLevelRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
}

func (r ApiAlertDefinitionGetEscalationLevelRequest) Execute() (*EscalationLevel, *http.Response, error) {
	return r.ApiService.AlertDefinitionGetEscalationLevelExecute(r)
}

/*
AlertDefinitionGetEscalationLevel Gets the escalation level information of the specified alert definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @return ApiAlertDefinitionGetEscalationLevelRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionGetEscalationLevel(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32) ApiAlertDefinitionGetEscalationLevelRequest {
	return ApiAlertDefinitionGetEscalationLevelRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
	}
}

// Execute executes the request
//  @return EscalationLevel
func (a *AlertDefinitionApiService) AlertDefinitionGetEscalationLevelExecute(r ApiAlertDefinitionGetEscalationLevelRequest) (*EscalationLevel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EscalationLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionGetEscalationLevel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionGetEscalationLevelIntegrationRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	integrationGuid string
}

func (r ApiAlertDefinitionGetEscalationLevelIntegrationRequest) Execute() (*Integration, *http.Response, error) {
	return r.ApiService.AlertDefinitionGetEscalationLevelIntegrationExecute(r)
}

/*
AlertDefinitionGetEscalationLevelIntegration Gets a single integration for a specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @param integrationGuid The Guid of the integration.
 @return ApiAlertDefinitionGetEscalationLevelIntegrationRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionGetEscalationLevelIntegration(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32, integrationGuid string) ApiAlertDefinitionGetEscalationLevelIntegrationRequest {
	return ApiAlertDefinitionGetEscalationLevelIntegrationRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
		integrationGuid: integrationGuid,
	}
}

// Execute executes the request
//  @return Integration
func (a *AlertDefinitionApiService) AlertDefinitionGetEscalationLevelIntegrationExecute(r ApiAlertDefinitionGetEscalationLevelIntegrationRequest) (*Integration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Integration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionGetEscalationLevelIntegration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationGuid"+"}", url.PathEscape(parameterToString(r.integrationGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionGetEscalationLevelOperatorRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
}

func (r ApiAlertDefinitionGetEscalationLevelOperatorRequest) Execute() ([]AlertEscalationLevelMember, *http.Response, error) {
	return r.ApiService.AlertDefinitionGetEscalationLevelOperatorExecute(r)
}

/*
AlertDefinitionGetEscalationLevelOperator Gets the operator and operator group guids for the specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @return ApiAlertDefinitionGetEscalationLevelOperatorRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionGetEscalationLevelOperator(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32) ApiAlertDefinitionGetEscalationLevelOperatorRequest {
	return ApiAlertDefinitionGetEscalationLevelOperatorRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
	}
}

// Execute executes the request
//  @return []AlertEscalationLevelMember
func (a *AlertDefinitionApiService) AlertDefinitionGetEscalationLevelOperatorExecute(r ApiAlertDefinitionGetEscalationLevelOperatorRequest) ([]AlertEscalationLevelMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AlertEscalationLevelMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionGetEscalationLevelOperator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Member"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionGetSpecifiedAlertDefinitionsRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
}

func (r ApiAlertDefinitionGetSpecifiedAlertDefinitionsRequest) Execute() (*AlertDefinition, *http.Response, error) {
	return r.ApiService.AlertDefinitionGetSpecifiedAlertDefinitionsExecute(r)
}

/*
AlertDefinitionGetSpecifiedAlertDefinitions Gets the specified alert definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @return ApiAlertDefinitionGetSpecifiedAlertDefinitionsRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionGetSpecifiedAlertDefinitions(ctx context.Context, alertDefinitionGuid string) ApiAlertDefinitionGetSpecifiedAlertDefinitionsRequest {
	return ApiAlertDefinitionGetSpecifiedAlertDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
	}
}

// Execute executes the request
//  @return AlertDefinition
func (a *AlertDefinitionApiService) AlertDefinitionGetSpecifiedAlertDefinitionsExecute(r ApiAlertDefinitionGetSpecifiedAlertDefinitionsRequest) (*AlertDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionGetSpecifiedAlertDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlertDefinitionPatchAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	alertDefinition *AlertDefinition
}

// The partial definition for the alert definition that should be updated.
func (r ApiAlertDefinitionPatchAlertDefinitionRequest) AlertDefinition(alertDefinition AlertDefinition) ApiAlertDefinitionPatchAlertDefinitionRequest {
	r.alertDefinition = &alertDefinition
	return r
}

func (r ApiAlertDefinitionPatchAlertDefinitionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionPatchAlertDefinitionExecute(r)
}

/*
AlertDefinitionPatchAlertDefinition Partially updates the definition for the specified alert definition.

This methods accepts parts of an alert definition. Fields that do not require changes can be omitted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition that should be updated.
 @return ApiAlertDefinitionPatchAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionPatchAlertDefinition(ctx context.Context, alertDefinitionGuid string) ApiAlertDefinitionPatchAlertDefinitionRequest {
	return ApiAlertDefinitionPatchAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionPatchAlertDefinitionExecute(r ApiAlertDefinitionPatchAlertDefinitionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionPatchAlertDefinition")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alertDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionPatchAlertDefinitionEscalationRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	escalationLevel *EscalationLevel
}

// The escalation level for the alert definition that should be updated.
func (r ApiAlertDefinitionPatchAlertDefinitionEscalationRequest) EscalationLevel(escalationLevel EscalationLevel) ApiAlertDefinitionPatchAlertDefinitionEscalationRequest {
	r.escalationLevel = &escalationLevel
	return r
}

func (r ApiAlertDefinitionPatchAlertDefinitionEscalationRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionPatchAlertDefinitionEscalationExecute(r)
}

/*
AlertDefinitionPatchAlertDefinitionEscalation Partially updates the escalation level for the specified alert definition.

This methods only accepts a complete alert definition where all fields are specified.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition that should be updated.
 @param escalationLevelId The level number of the escalation that should be updated.
 @return ApiAlertDefinitionPatchAlertDefinitionEscalationRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionPatchAlertDefinitionEscalation(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32) ApiAlertDefinitionPatchAlertDefinitionEscalationRequest {
	return ApiAlertDefinitionPatchAlertDefinitionEscalationRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionPatchAlertDefinitionEscalationExecute(r ApiAlertDefinitionPatchAlertDefinitionEscalationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionPatchAlertDefinitionEscalation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.escalationLevel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionPutAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	alertDefinition *AlertDefinition
}

// The partial definition for the alert definition that should be updated.
func (r ApiAlertDefinitionPutAlertDefinitionRequest) AlertDefinition(alertDefinition AlertDefinition) ApiAlertDefinitionPutAlertDefinitionRequest {
	r.alertDefinition = &alertDefinition
	return r
}

func (r ApiAlertDefinitionPutAlertDefinitionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionPutAlertDefinitionExecute(r)
}

/*
AlertDefinitionPutAlertDefinition Updates the definition for the specified alert definition.

This methods only accepts a complete alert definition where all fields are specified.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition that should be updated.
 @return ApiAlertDefinitionPutAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionPutAlertDefinition(ctx context.Context, alertDefinitionGuid string) ApiAlertDefinitionPutAlertDefinitionRequest {
	return ApiAlertDefinitionPutAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionPutAlertDefinitionExecute(r ApiAlertDefinitionPutAlertDefinitionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionPutAlertDefinition")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alertDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionPutAlertDefinitionEscalationRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	escalationLevel *EscalationLevel
}

// The escalation level for the alert definition that should be updated.
func (r ApiAlertDefinitionPutAlertDefinitionEscalationRequest) EscalationLevel(escalationLevel EscalationLevel) ApiAlertDefinitionPutAlertDefinitionEscalationRequest {
	r.escalationLevel = &escalationLevel
	return r
}

func (r ApiAlertDefinitionPutAlertDefinitionEscalationRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionPutAlertDefinitionEscalationExecute(r)
}

/*
AlertDefinitionPutAlertDefinitionEscalation Updates the escalation level for the specified alert definition.

This methods only accepts a complete alert definition where all fields are specified.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition that should be updated.
 @param escalationLevelId The level number of the escalation that should be updated.
 @return ApiAlertDefinitionPutAlertDefinitionEscalationRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionPutAlertDefinitionEscalation(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32) ApiAlertDefinitionPutAlertDefinitionEscalationRequest {
	return ApiAlertDefinitionPutAlertDefinitionEscalationRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionPutAlertDefinitionEscalationExecute(r ApiAlertDefinitionPutAlertDefinitionEscalationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionPutAlertDefinitionEscalation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.escalationLevel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionRemoveIntegrationFromEscalationLevelRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	integrationGuid string
}

func (r ApiAlertDefinitionRemoveIntegrationFromEscalationLevelRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionRemoveIntegrationFromEscalationLevelExecute(r)
}

/*
AlertDefinitionRemoveIntegrationFromEscalationLevel Removes an integration from a specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @param integrationGuid The Guid of the integration to remove.
 @return ApiAlertDefinitionRemoveIntegrationFromEscalationLevelRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionRemoveIntegrationFromEscalationLevel(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32, integrationGuid string) ApiAlertDefinitionRemoveIntegrationFromEscalationLevelRequest {
	return ApiAlertDefinitionRemoveIntegrationFromEscalationLevelRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
		integrationGuid: integrationGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionRemoveIntegrationFromEscalationLevelExecute(r ApiAlertDefinitionRemoveIntegrationFromEscalationLevelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionRemoveIntegrationFromEscalationLevel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationGuid"+"}", url.PathEscape(parameterToString(r.integrationGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionRemoveMonitorFromAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	monitorGuid string
}

func (r ApiAlertDefinitionRemoveMonitorFromAlertDefinitionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionRemoveMonitorFromAlertDefinitionExecute(r)
}

/*
AlertDefinitionRemoveMonitorFromAlertDefinition Removes a monitor for the specified alert definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition to modify.
 @param monitorGuid The Guid of the monitor to remove.
 @return ApiAlertDefinitionRemoveMonitorFromAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionRemoveMonitorFromAlertDefinition(ctx context.Context, alertDefinitionGuid string, monitorGuid string) ApiAlertDefinitionRemoveMonitorFromAlertDefinitionRequest {
	return ApiAlertDefinitionRemoveMonitorFromAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		monitorGuid: monitorGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionRemoveMonitorFromAlertDefinitionExecute(r ApiAlertDefinitionRemoveMonitorFromAlertDefinitionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionRemoveMonitorFromAlertDefinition")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/Member/Monitor/{monitorGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"monitorGuid"+"}", url.PathEscape(parameterToString(r.monitorGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionRemoveMonitorGroupFromAlertDefinitionRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	monitorGroupGuid string
}

func (r ApiAlertDefinitionRemoveMonitorGroupFromAlertDefinitionRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionRemoveMonitorGroupFromAlertDefinitionExecute(r)
}

/*
AlertDefinitionRemoveMonitorGroupFromAlertDefinition Removes a monitor group for the specified alert definition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition to modify.
 @param monitorGroupGuid The Guid of the monitor group to remove.
 @return ApiAlertDefinitionRemoveMonitorGroupFromAlertDefinitionRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionRemoveMonitorGroupFromAlertDefinition(ctx context.Context, alertDefinitionGuid string, monitorGroupGuid string) ApiAlertDefinitionRemoveMonitorGroupFromAlertDefinitionRequest {
	return ApiAlertDefinitionRemoveMonitorGroupFromAlertDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		monitorGroupGuid: monitorGroupGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionRemoveMonitorGroupFromAlertDefinitionExecute(r ApiAlertDefinitionRemoveMonitorGroupFromAlertDefinitionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionRemoveMonitorGroupFromAlertDefinition")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/Member/MonitorGroup/{monitorGroupGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"monitorGroupGuid"+"}", url.PathEscape(parameterToString(r.monitorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionRemoveOperatorFromEscalationLevelRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	operatorGuid string
}

func (r ApiAlertDefinitionRemoveOperatorFromEscalationLevelRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionRemoveOperatorFromEscalationLevelExecute(r)
}

/*
AlertDefinitionRemoveOperatorFromEscalationLevel Removes an operator for the specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @param operatorGuid The Guid of the operator to remove.
 @return ApiAlertDefinitionRemoveOperatorFromEscalationLevelRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionRemoveOperatorFromEscalationLevel(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32, operatorGuid string) ApiAlertDefinitionRemoveOperatorFromEscalationLevelRequest {
	return ApiAlertDefinitionRemoveOperatorFromEscalationLevelRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
		operatorGuid: operatorGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionRemoveOperatorFromEscalationLevelExecute(r ApiAlertDefinitionRemoveOperatorFromEscalationLevelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionRemoveOperatorFromEscalationLevel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Member/Operator/{operatorGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGuid"+"}", url.PathEscape(parameterToString(r.operatorGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionRemoveOperatorGroupFromEscalationLevelRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	operatorGroupGuid string
}

func (r ApiAlertDefinitionRemoveOperatorGroupFromEscalationLevelRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionRemoveOperatorGroupFromEscalationLevelExecute(r)
}

/*
AlertDefinitionRemoveOperatorGroupFromEscalationLevel Removes an operator group for the specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @param operatorGroupGuid The Guid of the operator group to remove.
 @return ApiAlertDefinitionRemoveOperatorGroupFromEscalationLevelRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionRemoveOperatorGroupFromEscalationLevel(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32, operatorGroupGuid string) ApiAlertDefinitionRemoveOperatorGroupFromEscalationLevelRequest {
	return ApiAlertDefinitionRemoveOperatorGroupFromEscalationLevelRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
		operatorGroupGuid: operatorGroupGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionRemoveOperatorGroupFromEscalationLevelExecute(r ApiAlertDefinitionRemoveOperatorGroupFromEscalationLevelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionRemoveOperatorGroupFromEscalationLevel")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Member/OperatorGroup/{operatorGroupGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionUpdateIntegrationForEscalationWithPatchRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	integrationGuid string
	escalationLevelIntegration *EscalationLevelIntegration
}

// The partial definition for the integration that should be updated.
func (r ApiAlertDefinitionUpdateIntegrationForEscalationWithPatchRequest) EscalationLevelIntegration(escalationLevelIntegration EscalationLevelIntegration) ApiAlertDefinitionUpdateIntegrationForEscalationWithPatchRequest {
	r.escalationLevelIntegration = &escalationLevelIntegration
	return r
}

func (r ApiAlertDefinitionUpdateIntegrationForEscalationWithPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionUpdateIntegrationForEscalationWithPatchExecute(r)
}

/*
AlertDefinitionUpdateIntegrationForEscalationWithPatch Partially updates an integration for a specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @param integrationGuid The Guid of the integration to update.
 @return ApiAlertDefinitionUpdateIntegrationForEscalationWithPatchRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionUpdateIntegrationForEscalationWithPatch(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32, integrationGuid string) ApiAlertDefinitionUpdateIntegrationForEscalationWithPatchRequest {
	return ApiAlertDefinitionUpdateIntegrationForEscalationWithPatchRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
		integrationGuid: integrationGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionUpdateIntegrationForEscalationWithPatchExecute(r ApiAlertDefinitionUpdateIntegrationForEscalationWithPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionUpdateIntegrationForEscalationWithPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationGuid"+"}", url.PathEscape(parameterToString(r.integrationGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.escalationLevelIntegration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlertDefinitionUpdateIntegrationForEscalationWithPutRequest struct {
	ctx context.Context
	ApiService *AlertDefinitionApiService
	alertDefinitionGuid string
	escalationLevelId int32
	integrationGuid string
	escalationLevelIntegration *EscalationLevelIntegration
}

// The definition for the integration that should be updated.
func (r ApiAlertDefinitionUpdateIntegrationForEscalationWithPutRequest) EscalationLevelIntegration(escalationLevelIntegration EscalationLevelIntegration) ApiAlertDefinitionUpdateIntegrationForEscalationWithPutRequest {
	r.escalationLevelIntegration = &escalationLevelIntegration
	return r
}

func (r ApiAlertDefinitionUpdateIntegrationForEscalationWithPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlertDefinitionUpdateIntegrationForEscalationWithPutExecute(r)
}

/*
AlertDefinitionUpdateIntegrationForEscalationWithPut Updates an integration for a specified escalation level.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertDefinitionGuid The Guid of the alert definition.
 @param escalationLevelId The escalation level id.
 @param integrationGuid The Guid of the integration to update.
 @return ApiAlertDefinitionUpdateIntegrationForEscalationWithPutRequest
*/
func (a *AlertDefinitionApiService) AlertDefinitionUpdateIntegrationForEscalationWithPut(ctx context.Context, alertDefinitionGuid string, escalationLevelId int32, integrationGuid string) ApiAlertDefinitionUpdateIntegrationForEscalationWithPutRequest {
	return ApiAlertDefinitionUpdateIntegrationForEscalationWithPutRequest{
		ApiService: a,
		ctx: ctx,
		alertDefinitionGuid: alertDefinitionGuid,
		escalationLevelId: escalationLevelId,
		integrationGuid: integrationGuid,
	}
}

// Execute executes the request
func (a *AlertDefinitionApiService) AlertDefinitionUpdateIntegrationForEscalationWithPutExecute(r ApiAlertDefinitionUpdateIntegrationForEscalationWithPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertDefinitionApiService.AlertDefinitionUpdateIntegrationForEscalationWithPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertDefinitionGuid"+"}", url.PathEscape(parameterToString(r.alertDefinitionGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"escalationLevelId"+"}", url.PathEscape(parameterToString(r.escalationLevelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationGuid"+"}", url.PathEscape(parameterToString(r.integrationGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.escalationLevelIntegration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
