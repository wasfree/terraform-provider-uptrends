/*
 * Uptrends API v4
 *
 * This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// MessageInfo struct for MessageInfo
type MessageInfo struct {
	Message *string `json:"Message,omitempty"`
}

// NewMessageInfo instantiates a new MessageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageInfo() *MessageInfo {
	this := MessageInfo{}
	return &this
}

// NewMessageInfoWithDefaults instantiates a new MessageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageInfoWithDefaults() *MessageInfo {
	this := MessageInfo{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MessageInfo) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageInfo) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MessageInfo) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *MessageInfo) SetMessage(v string) {
	o.Message = &v
}

func (o MessageInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["Message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableMessageInfo struct {
	value *MessageInfo
	isSet bool
}

func (v NullableMessageInfo) Get() *MessageInfo {
	return v.value
}

func (v *NullableMessageInfo) Set(val *MessageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageInfo(val *MessageInfo) *NullableMessageInfo {
	return &NullableMessageInfo{value: val, isSet: true}
}

func (v NullableMessageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


