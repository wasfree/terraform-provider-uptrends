/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// MonitorTransactionStepDefinition Only valid for Transaction monitors: the data structure that specifies the transaction steps (and sub steps) to execute.
type MonitorTransactionStepDefinition struct {
	Steps []TransactionStep2 `json:"Steps,omitempty"`
}

// NewMonitorTransactionStepDefinition instantiates a new MonitorTransactionStepDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorTransactionStepDefinition() *MonitorTransactionStepDefinition {
	this := MonitorTransactionStepDefinition{}
	return &this
}

// NewMonitorTransactionStepDefinitionWithDefaults instantiates a new MonitorTransactionStepDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorTransactionStepDefinitionWithDefaults() *MonitorTransactionStepDefinition {
	this := MonitorTransactionStepDefinition{}
	return &this
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *MonitorTransactionStepDefinition) GetSteps() []TransactionStep2 {
	if o == nil || isNil(o.Steps) {
		var ret []TransactionStep2
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorTransactionStepDefinition) GetStepsOk() ([]TransactionStep2, bool) {
	if o == nil || isNil(o.Steps) {
    return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *MonitorTransactionStepDefinition) HasSteps() bool {
	if o != nil && !isNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []TransactionStep2 and assigns it to the Steps field.
func (o *MonitorTransactionStepDefinition) SetSteps(v []TransactionStep2) {
	o.Steps = v
}

func (o MonitorTransactionStepDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Steps) {
		toSerialize["Steps"] = o.Steps
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorTransactionStepDefinition struct {
	value *MonitorTransactionStepDefinition
	isSet bool
}

func (v NullableMonitorTransactionStepDefinition) Get() *MonitorTransactionStepDefinition {
	return v.value
}

func (v *NullableMonitorTransactionStepDefinition) Set(val *MonitorTransactionStepDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorTransactionStepDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorTransactionStepDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorTransactionStepDefinition(val *MonitorTransactionStepDefinition) *NullableMonitorTransactionStepDefinition {
	return &NullableMonitorTransactionStepDefinition{value: val, isSet: true}
}

func (v NullableMonitorTransactionStepDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorTransactionStepDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


