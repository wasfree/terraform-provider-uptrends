/*
 * Uptrends API v4
 *
 * This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// SelectedCheckpoints struct for SelectedCheckpoints
type SelectedCheckpoints struct {
	Checkpoints *[]int32 `json:"Checkpoints,omitempty"`
	Regions *[]int32 `json:"Regions,omitempty"`
	ExcludeLocations *[]int32 `json:"ExcludeLocations,omitempty"`
}

// NewSelectedCheckpoints instantiates a new SelectedCheckpoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectedCheckpoints() *SelectedCheckpoints {
	this := SelectedCheckpoints{}
	return &this
}

// NewSelectedCheckpointsWithDefaults instantiates a new SelectedCheckpoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectedCheckpointsWithDefaults() *SelectedCheckpoints {
	this := SelectedCheckpoints{}
	return &this
}

// GetCheckpoints returns the Checkpoints field value if set, zero value otherwise.
func (o *SelectedCheckpoints) GetCheckpoints() []int32 {
	if o == nil || o.Checkpoints == nil {
		var ret []int32
		return ret
	}
	return *o.Checkpoints
}

// GetCheckpointsOk returns a tuple with the Checkpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedCheckpoints) GetCheckpointsOk() (*[]int32, bool) {
	if o == nil || o.Checkpoints == nil {
		return nil, false
	}
	return o.Checkpoints, true
}

// HasCheckpoints returns a boolean if a field has been set.
func (o *SelectedCheckpoints) HasCheckpoints() bool {
	if o != nil && o.Checkpoints != nil {
		return true
	}

	return false
}

// SetCheckpoints gets a reference to the given []int32 and assigns it to the Checkpoints field.
func (o *SelectedCheckpoints) SetCheckpoints(v []int32) {
	o.Checkpoints = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *SelectedCheckpoints) GetRegions() []int32 {
	if o == nil || o.Regions == nil {
		var ret []int32
		return ret
	}
	return *o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedCheckpoints) GetRegionsOk() (*[]int32, bool) {
	if o == nil || o.Regions == nil {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *SelectedCheckpoints) HasRegions() bool {
	if o != nil && o.Regions != nil {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []int32 and assigns it to the Regions field.
func (o *SelectedCheckpoints) SetRegions(v []int32) {
	o.Regions = &v
}

// GetExcludeLocations returns the ExcludeLocations field value if set, zero value otherwise.
func (o *SelectedCheckpoints) GetExcludeLocations() []int32 {
	if o == nil || o.ExcludeLocations == nil {
		var ret []int32
		return ret
	}
	return *o.ExcludeLocations
}

// GetExcludeLocationsOk returns a tuple with the ExcludeLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedCheckpoints) GetExcludeLocationsOk() (*[]int32, bool) {
	if o == nil || o.ExcludeLocations == nil {
		return nil, false
	}
	return o.ExcludeLocations, true
}

// HasExcludeLocations returns a boolean if a field has been set.
func (o *SelectedCheckpoints) HasExcludeLocations() bool {
	if o != nil && o.ExcludeLocations != nil {
		return true
	}

	return false
}

// SetExcludeLocations gets a reference to the given []int32 and assigns it to the ExcludeLocations field.
func (o *SelectedCheckpoints) SetExcludeLocations(v []int32) {
	o.ExcludeLocations = &v
}

func (o SelectedCheckpoints) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Checkpoints != nil {
		toSerialize["Checkpoints"] = o.Checkpoints
	}
	if o.Regions != nil {
		toSerialize["Regions"] = o.Regions
	}
	if o.ExcludeLocations != nil {
		toSerialize["ExcludeLocations"] = o.ExcludeLocations
	}
	return json.Marshal(toSerialize)
}

type NullableSelectedCheckpoints struct {
	value *SelectedCheckpoints
	isSet bool
}

func (v NullableSelectedCheckpoints) Get() *SelectedCheckpoints {
	return v.value
}

func (v *NullableSelectedCheckpoints) Set(val *SelectedCheckpoints) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectedCheckpoints) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectedCheckpoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectedCheckpoints(val *SelectedCheckpoints) *NullableSelectedCheckpoints {
	return &NullableSelectedCheckpoints{value: val, isSet: true}
}

func (v NullableSelectedCheckpoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectedCheckpoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


