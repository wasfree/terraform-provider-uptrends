/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// ErrorConditionConsoleLevel 
type ErrorConditionConsoleLevel string

// List of ErrorConditionConsoleLevel
const (
	ERRORCONDITIONCONSOLELEVEL_INFO ErrorConditionConsoleLevel = "Info"
	ERRORCONDITIONCONSOLELEVEL_WARNING ErrorConditionConsoleLevel = "Warning"
	ERRORCONDITIONCONSOLELEVEL_SEVERE ErrorConditionConsoleLevel = "Severe"
)

// All allowed values of ErrorConditionConsoleLevel enum
var AllowedErrorConditionConsoleLevelEnumValues = []ErrorConditionConsoleLevel{
	"Info",
	"Warning",
	"Severe",
}

func (v *ErrorConditionConsoleLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorConditionConsoleLevel(value)
	for _, existing := range AllowedErrorConditionConsoleLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorConditionConsoleLevel", value)
}

// NewErrorConditionConsoleLevelFromValue returns a pointer to a valid ErrorConditionConsoleLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorConditionConsoleLevelFromValue(v string) (*ErrorConditionConsoleLevel, error) {
	ev := ErrorConditionConsoleLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorConditionConsoleLevel: valid values are %v", v, AllowedErrorConditionConsoleLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorConditionConsoleLevel) IsValid() bool {
	for _, existing := range AllowedErrorConditionConsoleLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErrorConditionConsoleLevel value
func (v ErrorConditionConsoleLevel) Ptr() *ErrorConditionConsoleLevel {
	return &v
}

type NullableErrorConditionConsoleLevel struct {
	value *ErrorConditionConsoleLevel
	isSet bool
}

func (v NullableErrorConditionConsoleLevel) Get() *ErrorConditionConsoleLevel {
	return v.value
}

func (v *NullableErrorConditionConsoleLevel) Set(val *ErrorConditionConsoleLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorConditionConsoleLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorConditionConsoleLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorConditionConsoleLevel(val *ErrorConditionConsoleLevel) *NullableErrorConditionConsoleLevel {
	return &NullableErrorConditionConsoleLevel{value: val, isSet: true}
}

func (v NullableErrorConditionConsoleLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorConditionConsoleLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

