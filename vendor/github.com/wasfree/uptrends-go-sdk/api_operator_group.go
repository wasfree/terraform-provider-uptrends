/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// OperatorGroupApiService OperatorGroupApi service
type OperatorGroupApiService service

type ApiOperatorGroupAddDutyScheduleToAllMembersRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
	dutySchedule *OperatorDutySchedule
}

func (r ApiOperatorGroupAddDutyScheduleToAllMembersRequest) DutySchedule(dutySchedule OperatorDutySchedule) ApiOperatorGroupAddDutyScheduleToAllMembersRequest {
	r.dutySchedule = &dutySchedule
	return r
}

func (r ApiOperatorGroupAddDutyScheduleToAllMembersRequest) Execute() (*http.Response, error) {
	return r.ApiService.OperatorGroupAddDutyScheduleToAllMembersExecute(r)
}

/*
OperatorGroupAddDutyScheduleToAllMembers Adds the provided duty schedule to all operators in the group specified

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid
 @return ApiOperatorGroupAddDutyScheduleToAllMembersRequest
*/
func (a *OperatorGroupApiService) OperatorGroupAddDutyScheduleToAllMembers(ctx context.Context, operatorGroupGuid string) ApiOperatorGroupAddDutyScheduleToAllMembersRequest {
	return ApiOperatorGroupAddDutyScheduleToAllMembersRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
	}
}

// Execute executes the request
func (a *OperatorGroupApiService) OperatorGroupAddDutyScheduleToAllMembersExecute(r ApiOperatorGroupAddDutyScheduleToAllMembersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupAddDutyScheduleToAllMembers")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}/DutySchedule/AddDutyScheduleForAllMembers"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dutySchedule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOperatorGroupAddOperatorToOperatorGroupRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
	operatorGuid string
}

func (r ApiOperatorGroupAddOperatorToOperatorGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.OperatorGroupAddOperatorToOperatorGroupExecute(r)
}

/*
OperatorGroupAddOperatorToOperatorGroup Adds the specified operator to the operator group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The Guid of the operator group to add the operator to
 @param operatorGuid The operator Guid
 @return ApiOperatorGroupAddOperatorToOperatorGroupRequest
*/
func (a *OperatorGroupApiService) OperatorGroupAddOperatorToOperatorGroup(ctx context.Context, operatorGroupGuid string, operatorGuid string) ApiOperatorGroupAddOperatorToOperatorGroupRequest {
	return ApiOperatorGroupAddOperatorToOperatorGroupRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
		operatorGuid: operatorGuid,
	}
}

// Execute executes the request
func (a *OperatorGroupApiService) OperatorGroupAddOperatorToOperatorGroupExecute(r ApiOperatorGroupAddOperatorToOperatorGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupAddOperatorToOperatorGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}/Member/{operatorGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGuid"+"}", url.PathEscape(parameterToString(r.operatorGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOperatorGroupAllOperatorsInGroupOffDutyRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
}

func (r ApiOperatorGroupAllOperatorsInGroupOffDutyRequest) Execute() (*http.Response, error) {
	return r.ApiService.OperatorGroupAllOperatorsInGroupOffDutyExecute(r)
}

/*
OperatorGroupAllOperatorsInGroupOffDuty Set the OnDuty flag to off for all operators that are a member of the operator group specified by the operator group GUID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The operator group GUID
 @return ApiOperatorGroupAllOperatorsInGroupOffDutyRequest
*/
func (a *OperatorGroupApiService) OperatorGroupAllOperatorsInGroupOffDuty(ctx context.Context, operatorGroupGuid string) ApiOperatorGroupAllOperatorsInGroupOffDutyRequest {
	return ApiOperatorGroupAllOperatorsInGroupOffDutyRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
	}
}

// Execute executes the request
func (a *OperatorGroupApiService) OperatorGroupAllOperatorsInGroupOffDutyExecute(r ApiOperatorGroupAllOperatorsInGroupOffDutyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupAllOperatorsInGroupOffDuty")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}/AllOperatorsOffDuty"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOperatorGroupAllOperatorsInGroupOnDutyRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
}

func (r ApiOperatorGroupAllOperatorsInGroupOnDutyRequest) Execute() (*http.Response, error) {
	return r.ApiService.OperatorGroupAllOperatorsInGroupOnDutyExecute(r)
}

/*
OperatorGroupAllOperatorsInGroupOnDuty Set the OnDuty flag to on for all operators that are a member of the operator group specified by the operator group GUID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The operator group GUID
 @return ApiOperatorGroupAllOperatorsInGroupOnDutyRequest
*/
func (a *OperatorGroupApiService) OperatorGroupAllOperatorsInGroupOnDuty(ctx context.Context, operatorGroupGuid string) ApiOperatorGroupAllOperatorsInGroupOnDutyRequest {
	return ApiOperatorGroupAllOperatorsInGroupOnDutyRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
	}
}

// Execute executes the request
func (a *OperatorGroupApiService) OperatorGroupAllOperatorsInGroupOnDutyExecute(r ApiOperatorGroupAllOperatorsInGroupOnDutyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupAllOperatorsInGroupOnDuty")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}/AllOperatorsOnDuty"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOperatorGroupCreateOperatorGroupRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroup *OperatorGroup
}

// The operatorGroup object to be created
func (r ApiOperatorGroupCreateOperatorGroupRequest) OperatorGroup(operatorGroup OperatorGroup) ApiOperatorGroupCreateOperatorGroupRequest {
	r.operatorGroup = &operatorGroup
	return r
}

func (r ApiOperatorGroupCreateOperatorGroupRequest) Execute() (*OperatorGroup, *http.Response, error) {
	return r.ApiService.OperatorGroupCreateOperatorGroupExecute(r)
}

/*
OperatorGroupCreateOperatorGroup Creates a new operator group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperatorGroupCreateOperatorGroupRequest
*/
func (a *OperatorGroupApiService) OperatorGroupCreateOperatorGroup(ctx context.Context) ApiOperatorGroupCreateOperatorGroupRequest {
	return ApiOperatorGroupCreateOperatorGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OperatorGroup
func (a *OperatorGroupApiService) OperatorGroupCreateOperatorGroupExecute(r ApiOperatorGroupCreateOperatorGroupRequest) (*OperatorGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OperatorGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupCreateOperatorGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.operatorGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperatorGroupDeleteAuthorizationForOperatorGroupRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
	authorizationType string
}

func (r ApiOperatorGroupDeleteAuthorizationForOperatorGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.OperatorGroupDeleteAuthorizationForOperatorGroupExecute(r)
}

/*
OperatorGroupDeleteAuthorizationForOperatorGroup Removes the specified authorization of the operator group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The Guid of the operator group
 @param authorizationType The type of authorization
 @return ApiOperatorGroupDeleteAuthorizationForOperatorGroupRequest
*/
func (a *OperatorGroupApiService) OperatorGroupDeleteAuthorizationForOperatorGroup(ctx context.Context, operatorGroupGuid string, authorizationType string) ApiOperatorGroupDeleteAuthorizationForOperatorGroupRequest {
	return ApiOperatorGroupDeleteAuthorizationForOperatorGroupRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
		authorizationType: authorizationType,
	}
}

// Execute executes the request
func (a *OperatorGroupApiService) OperatorGroupDeleteAuthorizationForOperatorGroupExecute(r ApiOperatorGroupDeleteAuthorizationForOperatorGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupDeleteAuthorizationForOperatorGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}/Authorization/{authorizationType}"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationType"+"}", url.PathEscape(parameterToString(r.authorizationType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOperatorGroupDeleteOperatorGroupRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
}

func (r ApiOperatorGroupDeleteOperatorGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.OperatorGroupDeleteOperatorGroupExecute(r)
}

/*
OperatorGroupDeleteOperatorGroup Deletes the specified operator group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The Guid of the operator group to be deleted
 @return ApiOperatorGroupDeleteOperatorGroupRequest
*/
func (a *OperatorGroupApiService) OperatorGroupDeleteOperatorGroup(ctx context.Context, operatorGroupGuid string) ApiOperatorGroupDeleteOperatorGroupRequest {
	return ApiOperatorGroupDeleteOperatorGroupRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
	}
}

// Execute executes the request
func (a *OperatorGroupApiService) OperatorGroupDeleteOperatorGroupExecute(r ApiOperatorGroupDeleteOperatorGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupDeleteOperatorGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOperatorGroupGetAllOperatorGroupsRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
}

func (r ApiOperatorGroupGetAllOperatorGroupsRequest) Execute() ([]OperatorGroup, *http.Response, error) {
	return r.ApiService.OperatorGroupGetAllOperatorGroupsExecute(r)
}

/*
OperatorGroupGetAllOperatorGroups Gets all operator groups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperatorGroupGetAllOperatorGroupsRequest
*/
func (a *OperatorGroupApiService) OperatorGroupGetAllOperatorGroups(ctx context.Context) ApiOperatorGroupGetAllOperatorGroupsRequest {
	return ApiOperatorGroupGetAllOperatorGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OperatorGroup
func (a *OperatorGroupApiService) OperatorGroupGetAllOperatorGroupsExecute(r ApiOperatorGroupGetAllOperatorGroupsRequest) ([]OperatorGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OperatorGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupGetAllOperatorGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperatorGroupGetAuthorizationsForOperatorGroupRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
}

func (r ApiOperatorGroupGetAuthorizationsForOperatorGroupRequest) Execute() ([]OperatorGroupAuthorizationType, *http.Response, error) {
	return r.ApiService.OperatorGroupGetAuthorizationsForOperatorGroupExecute(r)
}

/*
OperatorGroupGetAuthorizationsForOperatorGroup Gets all authorizations for the specified operator group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The Guid of the operator group
 @return ApiOperatorGroupGetAuthorizationsForOperatorGroupRequest
*/
func (a *OperatorGroupApiService) OperatorGroupGetAuthorizationsForOperatorGroup(ctx context.Context, operatorGroupGuid string) ApiOperatorGroupGetAuthorizationsForOperatorGroupRequest {
	return ApiOperatorGroupGetAuthorizationsForOperatorGroupRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
	}
}

// Execute executes the request
//  @return []OperatorGroupAuthorizationType
func (a *OperatorGroupApiService) OperatorGroupGetAuthorizationsForOperatorGroupExecute(r ApiOperatorGroupGetAuthorizationsForOperatorGroupRequest) ([]OperatorGroupAuthorizationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OperatorGroupAuthorizationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupGetAuthorizationsForOperatorGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}/Authorization"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperatorGroupGetOperatorGroupRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
}

func (r ApiOperatorGroupGetOperatorGroupRequest) Execute() (*OperatorGroup, *http.Response, error) {
	return r.ApiService.OperatorGroupGetOperatorGroupExecute(r)
}

/*
OperatorGroupGetOperatorGroup Gets the details of a operator group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The Guid of the operator group to be retrieved
 @return ApiOperatorGroupGetOperatorGroupRequest
*/
func (a *OperatorGroupApiService) OperatorGroupGetOperatorGroup(ctx context.Context, operatorGroupGuid string) ApiOperatorGroupGetOperatorGroupRequest {
	return ApiOperatorGroupGetOperatorGroupRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
	}
}

// Execute executes the request
//  @return OperatorGroup
func (a *OperatorGroupApiService) OperatorGroupGetOperatorGroupExecute(r ApiOperatorGroupGetOperatorGroupRequest) (*OperatorGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OperatorGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupGetOperatorGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperatorGroupGetOperatorGroupMembersRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
}

func (r ApiOperatorGroupGetOperatorGroupMembersRequest) Execute() (*OperatorGroupMember, *http.Response, error) {
	return r.ApiService.OperatorGroupGetOperatorGroupMembersExecute(r)
}

/*
OperatorGroupGetOperatorGroupMembers Gets a list of all members of an operator group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The Guid of the operator group to retrieve the members for
 @return ApiOperatorGroupGetOperatorGroupMembersRequest
*/
func (a *OperatorGroupApiService) OperatorGroupGetOperatorGroupMembers(ctx context.Context, operatorGroupGuid string) ApiOperatorGroupGetOperatorGroupMembersRequest {
	return ApiOperatorGroupGetOperatorGroupMembersRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
	}
}

// Execute executes the request
//  @return OperatorGroupMember
func (a *OperatorGroupApiService) OperatorGroupGetOperatorGroupMembersExecute(r ApiOperatorGroupGetOperatorGroupMembersRequest) (*OperatorGroupMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OperatorGroupMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupGetOperatorGroupMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}/Member"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperatorGroupPostAuthorizationForOperatorGroupRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
	authorizationType string
}

func (r ApiOperatorGroupPostAuthorizationForOperatorGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.OperatorGroupPostAuthorizationForOperatorGroupExecute(r)
}

/*
OperatorGroupPostAuthorizationForOperatorGroup Assigns the specified authorization to the operator group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The Guid of the operator group
 @param authorizationType The type of authorization
 @return ApiOperatorGroupPostAuthorizationForOperatorGroupRequest
*/
func (a *OperatorGroupApiService) OperatorGroupPostAuthorizationForOperatorGroup(ctx context.Context, operatorGroupGuid string, authorizationType string) ApiOperatorGroupPostAuthorizationForOperatorGroupRequest {
	return ApiOperatorGroupPostAuthorizationForOperatorGroupRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
		authorizationType: authorizationType,
	}
}

// Execute executes the request
func (a *OperatorGroupApiService) OperatorGroupPostAuthorizationForOperatorGroupExecute(r ApiOperatorGroupPostAuthorizationForOperatorGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupPostAuthorizationForOperatorGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}/Authorization/{authorizationType}"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authorizationType"+"}", url.PathEscape(parameterToString(r.authorizationType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOperatorGroupRemoveOperatorFromOperatorGroupRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
	operatorGuid string
}

func (r ApiOperatorGroupRemoveOperatorFromOperatorGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.OperatorGroupRemoveOperatorFromOperatorGroupExecute(r)
}

/*
OperatorGroupRemoveOperatorFromOperatorGroup Removes the specified operator from the operator group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The Guid of the operator group to remove the operator from
 @param operatorGuid The operator Guid to be removed
 @return ApiOperatorGroupRemoveOperatorFromOperatorGroupRequest
*/
func (a *OperatorGroupApiService) OperatorGroupRemoveOperatorFromOperatorGroup(ctx context.Context, operatorGroupGuid string, operatorGuid string) ApiOperatorGroupRemoveOperatorFromOperatorGroupRequest {
	return ApiOperatorGroupRemoveOperatorFromOperatorGroupRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
		operatorGuid: operatorGuid,
	}
}

// Execute executes the request
func (a *OperatorGroupApiService) OperatorGroupRemoveOperatorFromOperatorGroupExecute(r ApiOperatorGroupRemoveOperatorFromOperatorGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupRemoveOperatorFromOperatorGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}/Member/{operatorGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGuid"+"}", url.PathEscape(parameterToString(r.operatorGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOperatorGroupUpdateOperatorGroupRequest struct {
	ctx context.Context
	ApiService *OperatorGroupApiService
	operatorGroupGuid string
	operatorGroup *OperatorGroup
}

// The operator group to be updated
func (r ApiOperatorGroupUpdateOperatorGroupRequest) OperatorGroup(operatorGroup OperatorGroup) ApiOperatorGroupUpdateOperatorGroupRequest {
	r.operatorGroup = &operatorGroup
	return r
}

func (r ApiOperatorGroupUpdateOperatorGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.OperatorGroupUpdateOperatorGroupExecute(r)
}

/*
OperatorGroupUpdateOperatorGroup Updates the operator group with the Guid specified

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operatorGroupGuid The Guid of the operator group to be updated
 @return ApiOperatorGroupUpdateOperatorGroupRequest
*/
func (a *OperatorGroupApiService) OperatorGroupUpdateOperatorGroup(ctx context.Context, operatorGroupGuid string) ApiOperatorGroupUpdateOperatorGroupRequest {
	return ApiOperatorGroupUpdateOperatorGroupRequest{
		ApiService: a,
		ctx: ctx,
		operatorGroupGuid: operatorGroupGuid,
	}
}

// Execute executes the request
func (a *OperatorGroupApiService) OperatorGroupUpdateOperatorGroupExecute(r ApiOperatorGroupUpdateOperatorGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperatorGroupApiService.OperatorGroupUpdateOperatorGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/OperatorGroup/{operatorGroupGuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"operatorGroupGuid"+"}", url.PathEscape(parameterToString(r.operatorGroupGuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.operatorGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
