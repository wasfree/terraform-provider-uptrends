/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// WaterfallInfo struct for WaterfallInfo
type WaterfallInfo struct {
	PageLoadMetrics *WaterfallInfoPageLoadMetrics `json:"PageLoadMetrics,omitempty"`
	W3CNavigationTiming *WaterfallInfoW3CNavigationTiming `json:"W3CNavigationTiming,omitempty"`
	// Elements in the waterfall
	Elements []PageElement `json:"Elements,omitempty"`
	// List of domain groups used in the waterfall elements
	DomainGroupNames []string `json:"DomainGroupNames,omitempty"`
}

// NewWaterfallInfo instantiates a new WaterfallInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWaterfallInfo() *WaterfallInfo {
	this := WaterfallInfo{}
	return &this
}

// NewWaterfallInfoWithDefaults instantiates a new WaterfallInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWaterfallInfoWithDefaults() *WaterfallInfo {
	this := WaterfallInfo{}
	return &this
}

// GetPageLoadMetrics returns the PageLoadMetrics field value if set, zero value otherwise.
func (o *WaterfallInfo) GetPageLoadMetrics() WaterfallInfoPageLoadMetrics {
	if o == nil || isNil(o.PageLoadMetrics) {
		var ret WaterfallInfoPageLoadMetrics
		return ret
	}
	return *o.PageLoadMetrics
}

// GetPageLoadMetricsOk returns a tuple with the PageLoadMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaterfallInfo) GetPageLoadMetricsOk() (*WaterfallInfoPageLoadMetrics, bool) {
	if o == nil || isNil(o.PageLoadMetrics) {
    return nil, false
	}
	return o.PageLoadMetrics, true
}

// HasPageLoadMetrics returns a boolean if a field has been set.
func (o *WaterfallInfo) HasPageLoadMetrics() bool {
	if o != nil && !isNil(o.PageLoadMetrics) {
		return true
	}

	return false
}

// SetPageLoadMetrics gets a reference to the given WaterfallInfoPageLoadMetrics and assigns it to the PageLoadMetrics field.
func (o *WaterfallInfo) SetPageLoadMetrics(v WaterfallInfoPageLoadMetrics) {
	o.PageLoadMetrics = &v
}

// GetW3CNavigationTiming returns the W3CNavigationTiming field value if set, zero value otherwise.
func (o *WaterfallInfo) GetW3CNavigationTiming() WaterfallInfoW3CNavigationTiming {
	if o == nil || isNil(o.W3CNavigationTiming) {
		var ret WaterfallInfoW3CNavigationTiming
		return ret
	}
	return *o.W3CNavigationTiming
}

// GetW3CNavigationTimingOk returns a tuple with the W3CNavigationTiming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaterfallInfo) GetW3CNavigationTimingOk() (*WaterfallInfoW3CNavigationTiming, bool) {
	if o == nil || isNil(o.W3CNavigationTiming) {
    return nil, false
	}
	return o.W3CNavigationTiming, true
}

// HasW3CNavigationTiming returns a boolean if a field has been set.
func (o *WaterfallInfo) HasW3CNavigationTiming() bool {
	if o != nil && !isNil(o.W3CNavigationTiming) {
		return true
	}

	return false
}

// SetW3CNavigationTiming gets a reference to the given WaterfallInfoW3CNavigationTiming and assigns it to the W3CNavigationTiming field.
func (o *WaterfallInfo) SetW3CNavigationTiming(v WaterfallInfoW3CNavigationTiming) {
	o.W3CNavigationTiming = &v
}

// GetElements returns the Elements field value if set, zero value otherwise.
func (o *WaterfallInfo) GetElements() []PageElement {
	if o == nil || isNil(o.Elements) {
		var ret []PageElement
		return ret
	}
	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaterfallInfo) GetElementsOk() ([]PageElement, bool) {
	if o == nil || isNil(o.Elements) {
    return nil, false
	}
	return o.Elements, true
}

// HasElements returns a boolean if a field has been set.
func (o *WaterfallInfo) HasElements() bool {
	if o != nil && !isNil(o.Elements) {
		return true
	}

	return false
}

// SetElements gets a reference to the given []PageElement and assigns it to the Elements field.
func (o *WaterfallInfo) SetElements(v []PageElement) {
	o.Elements = v
}

// GetDomainGroupNames returns the DomainGroupNames field value if set, zero value otherwise.
func (o *WaterfallInfo) GetDomainGroupNames() []string {
	if o == nil || isNil(o.DomainGroupNames) {
		var ret []string
		return ret
	}
	return o.DomainGroupNames
}

// GetDomainGroupNamesOk returns a tuple with the DomainGroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaterfallInfo) GetDomainGroupNamesOk() ([]string, bool) {
	if o == nil || isNil(o.DomainGroupNames) {
    return nil, false
	}
	return o.DomainGroupNames, true
}

// HasDomainGroupNames returns a boolean if a field has been set.
func (o *WaterfallInfo) HasDomainGroupNames() bool {
	if o != nil && !isNil(o.DomainGroupNames) {
		return true
	}

	return false
}

// SetDomainGroupNames gets a reference to the given []string and assigns it to the DomainGroupNames field.
func (o *WaterfallInfo) SetDomainGroupNames(v []string) {
	o.DomainGroupNames = v
}

func (o WaterfallInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PageLoadMetrics) {
		toSerialize["PageLoadMetrics"] = o.PageLoadMetrics
	}
	if !isNil(o.W3CNavigationTiming) {
		toSerialize["W3CNavigationTiming"] = o.W3CNavigationTiming
	}
	if !isNil(o.Elements) {
		toSerialize["Elements"] = o.Elements
	}
	if !isNil(o.DomainGroupNames) {
		toSerialize["DomainGroupNames"] = o.DomainGroupNames
	}
	return json.Marshal(toSerialize)
}

type NullableWaterfallInfo struct {
	value *WaterfallInfo
	isSet bool
}

func (v NullableWaterfallInfo) Get() *WaterfallInfo {
	return v.value
}

func (v *NullableWaterfallInfo) Set(val *WaterfallInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableWaterfallInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableWaterfallInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaterfallInfo(val *WaterfallInfo) *NullableWaterfallInfo {
	return &NullableWaterfallInfo{value: val, isSet: true}
}

func (v NullableWaterfallInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaterfallInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


