/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// TransactionStep2 struct for TransactionStep2
type TransactionStep2 struct {
	Name *string `json:"Name,omitempty"`
	HasScreenshot bool `json:"HasScreenshot"`
	HasWaterfall bool `json:"HasWaterfall"`
	SubSteps *[]TransactionSubStep `json:"SubSteps,omitempty"`
}

// NewTransactionStep2 instantiates a new TransactionStep2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionStep2(hasScreenshot bool, hasWaterfall bool) *TransactionStep2 {
	this := TransactionStep2{}
	this.HasScreenshot = hasScreenshot
	this.HasWaterfall = hasWaterfall
	return &this
}

// NewTransactionStep2WithDefaults instantiates a new TransactionStep2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionStep2WithDefaults() *TransactionStep2 {
	this := TransactionStep2{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TransactionStep2) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionStep2) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TransactionStep2) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TransactionStep2) SetName(v string) {
	o.Name = &v
}

// GetHasScreenshot returns the HasScreenshot field value
func (o *TransactionStep2) GetHasScreenshot() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasScreenshot
}

// GetHasScreenshotOk returns a tuple with the HasScreenshot field value
// and a boolean to check if the value has been set.
func (o *TransactionStep2) GetHasScreenshotOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HasScreenshot, true
}

// SetHasScreenshot sets field value
func (o *TransactionStep2) SetHasScreenshot(v bool) {
	o.HasScreenshot = v
}

// GetHasWaterfall returns the HasWaterfall field value
func (o *TransactionStep2) GetHasWaterfall() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasWaterfall
}

// GetHasWaterfallOk returns a tuple with the HasWaterfall field value
// and a boolean to check if the value has been set.
func (o *TransactionStep2) GetHasWaterfallOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HasWaterfall, true
}

// SetHasWaterfall sets field value
func (o *TransactionStep2) SetHasWaterfall(v bool) {
	o.HasWaterfall = v
}

// GetSubSteps returns the SubSteps field value if set, zero value otherwise.
func (o *TransactionStep2) GetSubSteps() []TransactionSubStep {
	if o == nil || o.SubSteps == nil {
		var ret []TransactionSubStep
		return ret
	}
	return *o.SubSteps
}

// GetSubStepsOk returns a tuple with the SubSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionStep2) GetSubStepsOk() (*[]TransactionSubStep, bool) {
	if o == nil || o.SubSteps == nil {
		return nil, false
	}
	return o.SubSteps, true
}

// HasSubSteps returns a boolean if a field has been set.
func (o *TransactionStep2) HasSubSteps() bool {
	if o != nil && o.SubSteps != nil {
		return true
	}

	return false
}

// SetSubSteps gets a reference to the given []TransactionSubStep and assigns it to the SubSteps field.
func (o *TransactionStep2) SetSubSteps(v []TransactionSubStep) {
	o.SubSteps = &v
}

func (o TransactionStep2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if true {
		toSerialize["HasScreenshot"] = o.HasScreenshot
	}
	if true {
		toSerialize["HasWaterfall"] = o.HasWaterfall
	}
	if o.SubSteps != nil {
		toSerialize["SubSteps"] = o.SubSteps
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionStep2 struct {
	value *TransactionStep2
	isSet bool
}

func (v NullableTransactionStep2) Get() *TransactionStep2 {
	return v.value
}

func (v *NullableTransactionStep2) Set(val *TransactionStep2) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionStep2) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionStep2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionStep2(val *TransactionStep2) *NullableTransactionStep2 {
	return &NullableTransactionStep2{value: val, isSet: true}
}

func (v NullableTransactionStep2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionStep2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


