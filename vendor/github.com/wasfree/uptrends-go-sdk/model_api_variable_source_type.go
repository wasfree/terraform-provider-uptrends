/*
 * Uptrends API v4
 *
 * This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// ApiVariableSourceType 
type ApiVariableSourceType string

// List of ApiVariableSourceType
const (
	APIVARIABLESOURCETYPE_NONE ApiVariableSourceType = "None"
	APIVARIABLESOURCETYPE_CONSTANT ApiVariableSourceType = "Constant"
	APIVARIABLESOURCETYPE_VARIABLE ApiVariableSourceType = "Variable"
	APIVARIABLESOURCETYPE_RESPONSE_STATUS_CODE ApiVariableSourceType = "ResponseStatusCode"
	APIVARIABLESOURCETYPE_RESPONSE_STATUS_DESCRIPTION ApiVariableSourceType = "ResponseStatusDescription"
	APIVARIABLESOURCETYPE_RESPONSE_BODY_JSON ApiVariableSourceType = "ResponseBodyJson"
	APIVARIABLESOURCETYPE_RESPONSE_COMPLETED ApiVariableSourceType = "ResponseCompleted"
	APIVARIABLESOURCETYPE_RESPONSE_BODY_TEXT ApiVariableSourceType = "ResponseBodyText"
	APIVARIABLESOURCETYPE_FAIL ApiVariableSourceType = "Fail"
	APIVARIABLESOURCETYPE_CONTENT_LENGTH_CALCULATED ApiVariableSourceType = "ContentLengthCalculated"
	APIVARIABLESOURCETYPE_DURATION ApiVariableSourceType = "Duration"
	APIVARIABLESOURCETYPE_SUM ApiVariableSourceType = "Sum"
	APIVARIABLESOURCETYPE_CONCATENATION ApiVariableSourceType = "Concatenation"
	APIVARIABLESOURCETYPE_TO_BASE64 ApiVariableSourceType = "ToBase64"
	APIVARIABLESOURCETYPE_TO_SHA1_HEX ApiVariableSourceType = "ToSHA1Hex"
	APIVARIABLESOURCETYPE_TO_MD5_HEX ApiVariableSourceType = "ToMD5Hex"
	APIVARIABLESOURCETYPE_RESPONSE_BODY_XML ApiVariableSourceType = "ResponseBodyXml"
	APIVARIABLESOURCETYPE_RESPONSE_HEADER ApiVariableSourceType = "ResponseHeader"
	APIVARIABLESOURCETYPE_COOKIE ApiVariableSourceType = "Cookie"
	APIVARIABLESOURCETYPE_VARIABLES_RESOLVED ApiVariableSourceType = "VariablesResolved"
	APIVARIABLESOURCETYPE_CUMULATIVE_DURATION ApiVariableSourceType = "CumulativeDuration"
	APIVARIABLESOURCETYPE_RESPONSE_HAS_EXCEPTION ApiVariableSourceType = "ResponseHasException"
	APIVARIABLESOURCETYPE_EXECUTE_FUNCTION ApiVariableSourceType = "ExecuteFunction"
)

var allowedApiVariableSourceTypeEnumValues = []ApiVariableSourceType{
	"None",
	"Constant",
	"Variable",
	"ResponseStatusCode",
	"ResponseStatusDescription",
	"ResponseBodyJson",
	"ResponseCompleted",
	"ResponseBodyText",
	"Fail",
	"ContentLengthCalculated",
	"Duration",
	"Sum",
	"Concatenation",
	"ToBase64",
	"ToSHA1Hex",
	"ToMD5Hex",
	"ResponseBodyXml",
	"ResponseHeader",
	"Cookie",
	"VariablesResolved",
	"CumulativeDuration",
	"ResponseHasException",
	"ExecuteFunction",
}

func (v *ApiVariableSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiVariableSourceType(value)
	for _, existing := range allowedApiVariableSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiVariableSourceType", value)
}

// NewApiVariableSourceTypeFromValue returns a pointer to a valid ApiVariableSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiVariableSourceTypeFromValue(v string) (*ApiVariableSourceType, error) {
	ev := ApiVariableSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiVariableSourceType: valid values are %v", v, allowedApiVariableSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiVariableSourceType) IsValid() bool {
	for _, existing := range allowedApiVariableSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiVariableSourceType value
func (v ApiVariableSourceType) Ptr() *ApiVariableSourceType {
	return &v
}

type NullableApiVariableSourceType struct {
	value *ApiVariableSourceType
	isSet bool
}

func (v NullableApiVariableSourceType) Get() *ApiVariableSourceType {
	return v.value
}

func (v *NullableApiVariableSourceType) Set(val *ApiVariableSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableApiVariableSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableApiVariableSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiVariableSourceType(val *ApiVariableSourceType) *NullableApiVariableSourceType {
	return &NullableApiVariableSourceType{value: val, isSet: true}
}

func (v NullableApiVariableSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiVariableSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

