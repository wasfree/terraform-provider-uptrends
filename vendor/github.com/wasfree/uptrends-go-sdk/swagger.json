{
  "x-generator": "NSwag v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v12.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "Uptrends API v4",
    "description": "This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.\n\nPlease note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.\n\nFor more information, please visit https://www.uptrends.com/api.",
    "version": "1.0.0"
  },
  "host": "api.uptrends.com",
  "basePath": "/v4",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "paths": {
    "/Account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Returns the account statistics.",
        "operationId": "Account_GetAccountStatistics",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Request completed successfully.",
            "schema": {
              "$ref": "#/definitions/AccountStatistics"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/CheckpointRegion": {
      "get": {
        "tags": [
          "Checkpoint"
        ],
        "summary": "Returns all the checkpoint regions. ",
        "operationId": "CheckpointRegion_GetAllCheckpointRegions",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckpointRegion"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/CheckpointRegion/{checkpointRegionId}": {
      "get": {
        "tags": [
          "Checkpoint"
        ],
        "summary": "Returns the specified checkpoint region. ",
        "operationId": "CheckpointRegion_GetSpecifiedCheckpointRegion",
        "parameters": [
          {
            "type": "integer",
            "name": "checkpointRegionId",
            "in": "path",
            "required": true,
            "description": "The id for the specified checkpoint region.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/CheckpointRegion"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The checkpoint region could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/CheckpointRegion/{checkpointRegionId}/Checkpoint": {
      "get": {
        "tags": [
          "Checkpoint"
        ],
        "summary": "Returns the checkpoints for the specified checkpoint region. ",
        "operationId": "CheckpointRegion_GetCheckpointRegionCheckpoints",
        "parameters": [
          {
            "type": "integer",
            "name": "checkpointRegionId",
            "in": "path",
            "required": true,
            "description": "The id for the specified checkpoint region.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Checkpoint"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The checkpoint region could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Dashboard": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Returns data for all dashboards.",
        "operationId": "Dashboard_GetAllDashboards",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dashboard"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Dashboard/{dashboardGuid}": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Returns data for the specified dashboard.",
        "operationId": "Dashboard_GetOneDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "dashboardGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the specified dashboard.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified dashboard could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Delete the specified dashboard.",
        "operationId": "Dashboard_DeleteDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "dashboardGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the specified dashboard.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified dashboard could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Update the specified dashboard.",
        "operationId": "Dashboard_UpdateDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "dashboardGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the specified dashboard.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "dashboard",
            "in": "body",
            "required": true,
            "description": "The details for the dashboard.",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Partially update the specified dashboard.",
        "operationId": "Dashboard_PartiallyUpdateDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "dashboardGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the specified dashboard.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "dashboard",
            "in": "body",
            "required": true,
            "description": "The details for the dashboard.",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Dashboard/{dashboardGuid}/Clone": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Clone the specified dashboard.",
        "operationId": "Dashboard_CloneDashboard",
        "parameters": [
          {
            "type": "string",
            "name": "dashboardGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the specified dashboard.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified dashboard could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/PublicStatusPage": {
      "get": {
        "tags": [
          "PublicStatusPage"
        ],
        "summary": "Returns the definition of all public status pages available in the account.",
        "operationId": "PublicStatusPage_GetPublicStatusPages",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicStatusPage"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "PublicStatusPage"
        ],
        "summary": "Creates a new public status page.",
        "operationId": "PublicStatusPage_PostPublicStatusPage",
        "parameters": [
          {
            "name": "publicStatusPage",
            "in": "body",
            "required": true,
            "description": "The complete definition for the public status page that should be updated.",
            "schema": {
              "$ref": "#/definitions/PublicStatusPage"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/PublicStatusPage"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified public status page does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/PublicStatusPage/{publicStatusPageGuid}": {
      "get": {
        "tags": [
          "PublicStatusPage"
        ],
        "summary": "Returns the definition of the specified public status page.",
        "operationId": "PublicStatusPage_GetPublicStatusPage",
        "parameters": [
          {
            "type": "string",
            "name": "publicStatusPageGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the requested public status page.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/PublicStatusPage"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified public status page does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "PublicStatusPage"
        ],
        "summary": "Partially updates the definition of the specified public status page.",
        "description": "This methods accepts parts of a public status page definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back these changes only using this PATCH method.",
        "operationId": "PublicStatusPage_PatchPublicStatusPage",
        "parameters": [
          {
            "name": "publicStatusPage",
            "in": "body",
            "required": true,
            "description": "The partial definition for the public status page that should be updated.",
            "schema": {
              "$ref": "#/definitions/PublicStatusPage"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "publicStatusPageGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the public status page that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified public status page does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "PublicStatusPage"
        ],
        "summary": "Updates the definition of the specified public status page.",
        "description": "This methods only accepts a complete public status page definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back the updated definition using this PUT method.",
        "operationId": "PublicStatusPage_PutPublicStatusPage",
        "parameters": [
          {
            "name": "publicStatusPage",
            "in": "body",
            "required": true,
            "description": "The complete definition for the public status page that should be updated.",
            "schema": {
              "$ref": "#/definitions/PublicStatusPage"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "publicStatusPageGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the public status page that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified public status page does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "PublicStatusPage"
        ],
        "summary": "Deletes the definition of the specified public status page.",
        "operationId": "PublicStatusPage_DeletePublicStatusPage",
        "parameters": [
          {
            "type": "string",
            "name": "publicStatusPageGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the public status page that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified public status page does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/PublicStatusPage/{publicStatusPageGuid}/Authorization": {
      "get": {
        "tags": [
          "PublicStatusPage"
        ],
        "summary": "Returns all authorizations for the specified public status page.",
        "operationId": "PublicStatusPage_GetAuthorizationsForPublicStatusPage",
        "parameters": [
          {
            "type": "string",
            "name": "publicStatusPageGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the public status page.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request was successful. No content is returned.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PSPAuthorization"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified public status page does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "PublicStatusPage"
        ],
        "summary": "Creates a new authorization for the specified public status page.",
        "description": "The AuthorizationId attribute should be omitted in the request body. The newly created authorization will be returned in the response. An authorization should be granted to either an individual operator, or an operator group. Therefore, either specify the OperatorGuid attribute or the OperatorGroupGuid attribute.",
        "operationId": "PublicStatusPage_AddAuthorizationToPublicStatusPage",
        "parameters": [
          {
            "type": "string",
            "name": "publicStatusPageGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the public status page.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "authorization",
            "in": "body",
            "required": true,
            "description": "The complete definition of the authorization that should be created.",
            "schema": {
              "$ref": "#/definitions/PSPAuthorization"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/PSPAuthorization"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified public status page does not exist.\nor\nThe specified operator does not exist.\nor\nThe specified operator group does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The specified public status page does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The specified operator does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The specified operator group does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/PublicStatusPage/{publicStatusPageGuid}/Authorization/{authorizationGuid}": {
      "delete": {
        "tags": [
          "PublicStatusPage"
        ],
        "summary": "Removes an authorization from a public status page.",
        "operationId": "PublicStatusPage_RemoveAuthorizationFromPublicStatusPage",
        "parameters": [
          {
            "type": "string",
            "name": "publicStatusPageGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the public status page.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "authorizationGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the authorization.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified public status page does not exist.\nor\nThe specified authorization does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The specified public status page does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The specified authorization does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/ScheduledReport": {
      "get": {
        "tags": [
          "ScheduledReport"
        ],
        "summary": "Returns data for all scheduled reports.",
        "operationId": "ScheduledReport_GetAllScheduledReports",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScheduledReport"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "ScheduledReport"
        ],
        "summary": "Creates a new scheduled report.",
        "operationId": "ScheduledReport_CreateScheduledReport",
        "parameters": [
          {
            "name": "scheduledReport",
            "in": "body",
            "required": true,
            "description": "The details for the scheduled report.",
            "schema": {
              "$ref": "#/definitions/ScheduledReport"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/ScheduledReport"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/ScheduledReport/{scheduledReportGuid}": {
      "get": {
        "tags": [
          "ScheduledReport"
        ],
        "summary": "Returns data for the specified scheduled report.",
        "operationId": "ScheduledReport_GetSpecifiedScheduledReport",
        "parameters": [
          {
            "type": "string",
            "name": "scheduledReportGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the specified scheduled report.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/ScheduledReport"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ScheduledReport"
        ],
        "summary": "Delete the specified scheduled report.",
        "operationId": "ScheduledReport_DeleteSpecifiedScheduledReport",
        "parameters": [
          {
            "type": "string",
            "name": "scheduledReportGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the specified scheduled report.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ScheduledReport"
        ],
        "summary": "Update the specified scheduled report.",
        "operationId": "ScheduledReport_UpdateScheduledReport",
        "parameters": [
          {
            "type": "string",
            "name": "scheduledReportGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the specified scheduled report.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "scheduledReport",
            "in": "body",
            "required": true,
            "description": "The details for the scheduled report.",
            "schema": {
              "$ref": "#/definitions/ScheduledReport"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/ScheduledReport"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "ScheduledReport"
        ],
        "summary": "Partially update the specified scheduled report.",
        "operationId": "ScheduledReport_PartiallyUpdateScheduledReport",
        "parameters": [
          {
            "type": "string",
            "name": "scheduledReportGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the specified scheduled report.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "scheduledReport",
            "in": "body",
            "required": true,
            "description": "The details for the scheduled report.",
            "schema": {
              "$ref": "#/definitions/ScheduledReport"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/ScheduledReport"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Sla": {
      "get": {
        "tags": [
          "SLA"
        ],
        "summary": "Gets a list of all SLA definitions.",
        "operationId": "Sla_GetSlas",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sla"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "SLA"
        ],
        "summary": "Creates a new SLA.",
        "operationId": "Sla_CreateSla",
        "parameters": [
          {
            "name": "sla",
            "in": "body",
            "required": true,
            "description": "The complete SLA definition that should be created.",
            "schema": {
              "$ref": "#/definitions/Sla"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Sla"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Sla/{slaGuid}": {
      "get": {
        "tags": [
          "SLA"
        ],
        "summary": "Gets the specified SLA definition.",
        "operationId": "Sla_GetSla",
        "parameters": [
          {
            "type": "string",
            "name": "slaGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the SLA definition.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Sla"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified sla does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SLA"
        ],
        "summary": "Deletes the specified SLA.",
        "operationId": "Sla_DeleteSla",
        "parameters": [
          {
            "type": "string",
            "name": "slaGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the SLA definition that should be deleted.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified SLA does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "SLA"
        ],
        "summary": "Updates the definition of the specified SLA.",
        "description": "This methods only accepts a complete SLA definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back the updated definition using this PUT method.",
        "operationId": "Sla_PutSla",
        "parameters": [
          {
            "name": "sla",
            "in": "body",
            "required": true,
            "description": "The complete definition for the SLA that should be updated.",
            "schema": {
              "$ref": "#/definitions/Sla"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "slaGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the SLA that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified SLA does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "SLA"
        ],
        "summary": "Partially updates the definition of the specified SLA.",
        "description": "This methods accepts parts of a SLA definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back these changes only using this PATCH method.",
        "operationId": "Sla_PatchSla",
        "parameters": [
          {
            "name": "sla",
            "in": "body",
            "required": true,
            "description": "The partial definition for the SLA that should be updated.",
            "schema": {
              "$ref": "#/definitions/Sla"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "slaGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the SLA that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified SLA does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Sla/{slaGuid}/ExclusionPeriod": {
      "get": {
        "tags": [
          "SLA"
        ],
        "summary": "Gets a list of all exclusion periods for the specified SLA.",
        "operationId": "Sla_GetExclusionPeriods",
        "parameters": [
          {
            "type": "string",
            "name": "slaGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the SLA definition.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExclusionPeriod"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified SLA does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "SLA"
        ],
        "summary": "Creates a new exclusion period for the specified SLA.",
        "operationId": "Sla_PostExclusionPeriod",
        "parameters": [
          {
            "name": "exclusionPeriod",
            "in": "body",
            "required": true,
            "description": "The complete definition of the exclusion period.",
            "schema": {
              "$ref": "#/definitions/ExclusionPeriod"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "slaGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the SLA definition.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExclusionPeriod"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified SLA does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}": {
      "get": {
        "tags": [
          "SLA"
        ],
        "summary": "Gets the specified exclusion period for the specified SLA.",
        "operationId": "Sla_GetExclusionPeriod",
        "parameters": [
          {
            "type": "string",
            "name": "slaGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the SLA definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "exclusionPeriodId",
            "in": "path",
            "required": true,
            "description": "The id of the exclusion period.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/ExclusionPeriod"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified SLA does not exist.\nor\nThe specified exclusion period does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The specified SLA does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The specified exclusion period does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "SLA"
        ],
        "summary": "Updates the specified exclusion period for the specified SLA.",
        "operationId": "Sla_PutExclusionPeriod",
        "parameters": [
          {
            "type": "string",
            "name": "slaGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the SLA definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "exclusionPeriodId",
            "in": "path",
            "required": true,
            "description": "The id of the exclusion period.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "exclusionPeriod",
            "in": "body",
            "required": true,
            "description": "The complete definition of the exclusion period.",
            "schema": {
              "$ref": "#/definitions/ExclusionPeriod"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified SLA does not exist.\nor\nThe specified exclusion period does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The specified SLA does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The specified exclusion period does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "SLA"
        ],
        "summary": "Partially updates the specified exclusion period for the specified SLA.",
        "operationId": "Sla_PatchExclusionPeriod",
        "parameters": [
          {
            "type": "string",
            "name": "slaGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the SLA definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "exclusionPeriodId",
            "in": "path",
            "required": true,
            "description": "The id of the exclusion period.",
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "exclusionPeriod",
            "in": "body",
            "required": true,
            "description": "The complete definition of the exclusion period.",
            "schema": {
              "$ref": "#/definitions/ExclusionPeriod"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified SLA does not exist.\nor\nThe specified exclusion period does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The specified SLA does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The specified exclusion period does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SLA"
        ],
        "summary": "Deletes the specified exclusion period for the specified SLA.",
        "operationId": "Sla_DeleteExclusionPeriod",
        "parameters": [
          {
            "type": "string",
            "name": "slaGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the sla definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "exclusionPeriodId",
            "in": "path",
            "required": true,
            "description": "The id of the exclusion period.",
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified SLA does not exist.\nor\nThe specified exclusion period does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The specified SLA does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The specified exclusion period does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Statistics/Monitor/{monitorGuid}": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Gets the monitor statistics.",
        "operationId": "Statistics_GetMonitorStatistics",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Filter",
            "in": "query",
            "description": "The filter for the requested response fields. E.g. \"Alerts,SlaTarget\".",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Start",
            "in": "query",
            "description": "The start of a custom period (can't be used together with the PresetPeriod parameter)",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "End",
            "in": "query",
            "description": "The end of a custom period",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "PresetPeriod",
            "in": "query",
            "description": "The requested time period.",
            "x-schema": {
              "$ref": "#/definitions/PresetPeriodType"
            },
            "default": "Last24Hours",
            "x-nullable": true,
            "enum": [
              "CurrentDay",
              "CurrentWeek",
              "CurrentMonth",
              "CurrentYear",
              "PreviousDay",
              "PreviousWeek",
              "PreviousMonth",
              "PreviousYear",
              "Last24Hours",
              "Last48Hours",
              "Last7Days",
              "Last30Days",
              "Last60Days",
              "Last90Days",
              "Last365Days",
              "Last3Months",
              "Last6Months",
              "Last12Months",
              "Last24Months",
              "All"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/StatisticsResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageInfo"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The monitor could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageInfo"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Statistics/MonitorGroup/{monitorGroupGuid}": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Gets the monitor group statistics.",
        "operationId": "Statistics_GetMonitorGroupStatistics",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Filter",
            "in": "query",
            "description": "The filter for the requested response fields. E.g. \"Alerts,SlaTarget\".",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Start",
            "in": "query",
            "description": "The start of a custom period (can't be used together with the PresetPeriod parameter)",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "End",
            "in": "query",
            "description": "The end of a custom period",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "PresetPeriod",
            "in": "query",
            "description": "The requested time period.",
            "x-schema": {
              "$ref": "#/definitions/PresetPeriodType"
            },
            "default": "Last24Hours",
            "x-nullable": true,
            "enum": [
              "CurrentDay",
              "CurrentWeek",
              "CurrentMonth",
              "CurrentYear",
              "PreviousDay",
              "PreviousWeek",
              "PreviousMonth",
              "PreviousYear",
              "Last24Hours",
              "Last48Hours",
              "Last7Days",
              "Last30Days",
              "Last60Days",
              "Last90Days",
              "Last365Days",
              "Last3Months",
              "Last6Months",
              "Last12Months",
              "Last24Months",
              "All"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/StatisticsResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageInfo"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The monitor group could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageInfo"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Alert/Monitor/{monitorGuid}": {
      "get": {
        "tags": [
          "Alert"
        ],
        "summary": "Returns alerts for a specific monitor.",
        "operationId": "Alert_GetMonitorAlerts",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor to get alerts for.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "IncludeReminders",
            "in": "query",
            "description": "When true reminder alerts will be included in the results",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Cursor",
            "in": "query",
            "description": "A cursor value that should be used for traversing the dataset.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Sorting",
            "in": "query",
            "description": "Sorting direction based on timestamp.",
            "x-schema": {
              "$ref": "#/definitions/SortDirection"
            },
            "default": "Descending",
            "x-nullable": false,
            "enum": [
              "Ascending",
              "Descending"
            ]
          },
          {
            "type": "integer",
            "name": "Take",
            "in": "query",
            "description": "The number of records to return (Max value = 100)",
            "format": "int32",
            "default": 100,
            "maximum": 100.0,
            "minimum": 0.0,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Start",
            "in": "query",
            "description": "The start of a custom period (can't be used together with the PresetPeriod parameter)",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "End",
            "in": "query",
            "description": "The end of a custom period",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "PresetPeriod",
            "in": "query",
            "description": "The requested time period.",
            "x-schema": {
              "$ref": "#/definitions/PresetPeriodType"
            },
            "default": "Last24Hours",
            "x-nullable": true,
            "enum": [
              "CurrentDay",
              "CurrentWeek",
              "CurrentMonth",
              "CurrentYear",
              "PreviousDay",
              "PreviousWeek",
              "PreviousMonth",
              "PreviousYear",
              "Last24Hours",
              "Last48Hours",
              "Last7Days",
              "Last30Days",
              "Last60Days",
              "Last90Days",
              "Last365Days",
              "Last3Months",
              "Last6Months",
              "Last12Months",
              "Last24Months",
              "All"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/AlertResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified Monitor for monitorGuid does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Alert/MonitorGroup/{monitorGroupGuid}": {
      "get": {
        "tags": [
          "Alert"
        ],
        "summary": "Returns alerts for a specific monitor group.",
        "operationId": "Alert_GetMonitorGroupAlerts",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group to get alerts for.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "IncludeReminders",
            "in": "query",
            "description": "When true reminder alerts will be included in the results",
            "default": false,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Cursor",
            "in": "query",
            "description": "A cursor value that should be used for traversing the dataset.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Sorting",
            "in": "query",
            "description": "Sorting direction based on timestamp.",
            "x-schema": {
              "$ref": "#/definitions/SortDirection"
            },
            "default": "Descending",
            "x-nullable": false,
            "enum": [
              "Ascending",
              "Descending"
            ]
          },
          {
            "type": "integer",
            "name": "Take",
            "in": "query",
            "description": "The number of records to return (Max value = 100)",
            "format": "int32",
            "default": 100,
            "maximum": 100.0,
            "minimum": 0.0,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Start",
            "in": "query",
            "description": "The start of a custom period (can't be used together with the PresetPeriod parameter)",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "End",
            "in": "query",
            "description": "The end of a custom period",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "PresetPeriod",
            "in": "query",
            "description": "The requested time period.",
            "x-schema": {
              "$ref": "#/definitions/PresetPeriodType"
            },
            "default": "Last24Hours",
            "x-nullable": true,
            "enum": [
              "CurrentDay",
              "CurrentWeek",
              "CurrentMonth",
              "CurrentYear",
              "PreviousDay",
              "PreviousWeek",
              "PreviousMonth",
              "PreviousYear",
              "Last24Hours",
              "Last48Hours",
              "Last7Days",
              "Last30Days",
              "Last60Days",
              "Last90Days",
              "Last365Days",
              "Last3Months",
              "Last6Months",
              "Last12Months",
              "Last24Months",
              "All"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/AlertResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified Monitor Group for monitorGroupGuid does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Integration": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Gets a list of all integrations.",
        "operationId": "Integration_GetAllIntegrations",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Integration"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Status/Monitor/{monitorGuid}": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Gets all monitor status data.",
        "operationId": "Status_GetMonitorStatus",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/MonitorStatusResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The monitor could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Status/MonitorGroup/{monitorGroupGuid}": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Gets a list of all monitor group status data.",
        "operationId": "Status_GetMonitorGroupStatus",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/MonitorStatusListResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The monitor group could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition": {
      "get": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Gets a list of all alert definitions.",
        "operationId": "AlertDefinition_GetAllAlertDefinitions",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertDefinition"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Creates a new alert definition.",
        "operationId": "AlertDefinition_CreateAlertDefinition",
        "parameters": [
          {
            "name": "alertDefinition",
            "in": "body",
            "required": true,
            "description": "The details of the alert definition to create.",
            "schema": {
              "$ref": "#/definitions/AlertDefinition"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/AlertDefinition"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}": {
      "get": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Gets the specified alert definition.",
        "operationId": "AlertDefinition_GetSpecifiedAlertDefinitions",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/AlertDefinition"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Deletes an existing alert definition.",
        "operationId": "AlertDefinition_DeleteAlertDefinition",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition to remove.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified alert definition could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Updates the definition for the specified alert definition.",
        "description": "This methods only accepts a complete alert definition where all fields are specified.",
        "operationId": "AlertDefinition_PutAlertDefinition",
        "parameters": [
          {
            "name": "alertDefinition",
            "in": "body",
            "required": true,
            "description": "The partial definition for the alert definition that should be updated.",
            "schema": {
              "$ref": "#/definitions/AlertDefinition"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified alert definition could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Partially updates the definition for the specified alert definition.",
        "description": "This methods accepts parts of an alert definition. Fields that do not require changes can be omitted.",
        "operationId": "AlertDefinition_PatchAlertDefinition",
        "parameters": [
          {
            "name": "alertDefinition",
            "in": "body",
            "required": true,
            "description": "The partial definition for the alert definition that should be updated.",
            "schema": {
              "$ref": "#/definitions/AlertDefinition"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified alert definition could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}/Member": {
      "get": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Gets a list of all monitor and monitor group guids for the specified alert definition.",
        "operationId": "AlertDefinition_GetAllMembers",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition for which to return the members.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertDefinitionMember"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified alert definition could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}/Member/Monitor/{monitorGuid}": {
      "post": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Adds a monitor to the specified alert definition.",
        "operationId": "AlertDefinition_AddMonitorToAlertDefinition",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition to modify.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor to add.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/AlertDefinitionMonitor"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Removes a monitor for the specified alert definition.",
        "operationId": "AlertDefinition_RemoveMonitorFromAlertDefinition",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition to modify.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor to remove.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}/Member/MonitorGroup/{monitorGroupGuid}": {
      "post": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Adds a monitor group to the specified alert definition.",
        "operationId": "AlertDefinition_AddMonitorGroupToAlertDefinition",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition to modify.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group to add.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/AlertDefinitionMonitorGroup"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Removes a monitor group for the specified alert definition.",
        "operationId": "AlertDefinition_RemoveMonitorGroupFromAlertDefinition",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition to modify.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group to remove.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}": {
      "put": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Updates the escalation level for the specified alert definition.",
        "description": "This methods only accepts a complete alert definition where all fields are specified.",
        "operationId": "AlertDefinition_PutAlertDefinitionEscalation",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition that should be updated.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The level number of the escalation that should be updated.",
            "x-nullable": false
          },
          {
            "name": "escalationLevel",
            "in": "body",
            "required": true,
            "description": "The escalation level for the alert definition that should be updated.",
            "schema": {
              "$ref": "#/definitions/EscalationLevel"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified alert definition could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Partially updates the escalation level for the specified alert definition.",
        "description": "This methods only accepts a complete alert definition where all fields are specified.",
        "operationId": "AlertDefinition_PatchAlertDefinitionEscalation",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition that should be updated.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The level number of the escalation that should be updated.",
            "x-nullable": false
          },
          {
            "name": "escalationLevel",
            "in": "body",
            "required": true,
            "description": "The escalation level for the alert definition that should be updated.",
            "schema": {
              "$ref": "#/definitions/EscalationLevel"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified alert definition could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Gets the escalation level information of the specified alert definition.",
        "operationId": "AlertDefinition_GetEscalationLevel",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/EscalationLevel"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel": {
      "get": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Gets all escalation level information for the specified alert definition.",
        "operationId": "AlertDefinition_GetAllEscalationLevels",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition for which to return all escalation levels.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EscalationLevel"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Member": {
      "get": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Gets the operator and operator group guids for the specified escalation level.",
        "operationId": "AlertDefinition_GetEscalationLevelOperator",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertEscalationLevelMember"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Member/Operator/{operatorGuid}": {
      "post": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Adds an operator to the specified escalation level.",
        "operationId": "AlertDefinition_AddOperatorToEscalationLevel",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator to add.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/AlertDefinitionOperator"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Removes an operator for the specified escalation level.",
        "operationId": "AlertDefinition_RemoveOperatorFromEscalationLevel",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator to remove.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Member/OperatorGroup/{operatorGroupGuid}": {
      "post": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Adds an operator group to the specified escalation level.",
        "operationId": "AlertDefinition_AddOperatorGroupToEscalationLevel",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator group to add.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/AlertDefinitionOperatorGroup"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Removes an operator group for the specified escalation level.",
        "operationId": "AlertDefinition_RemoveOperatorGroupFromEscalationLevel",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator group to remove.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration": {
      "get": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Gets all integrations for a specified escalation level.",
        "operationId": "AlertDefinition_GetAllEscalationLevelIntegrations",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Integration"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Adds an integration to a specified escalation level.",
        "operationId": "AlertDefinition_AddIntegrationToEscalationLevel",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          },
          {
            "name": "escalationLevelIntegration",
            "in": "body",
            "required": true,
            "description": "The integration to add.",
            "schema": {
              "$ref": "#/definitions/EscalationLevelIntegration"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/AlertDefinitionMonitorGroup"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}": {
      "get": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Gets a single integration for a specified escalation level.",
        "operationId": "AlertDefinition_GetEscalationLevelIntegration",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "integrationGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the integration.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Integration"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Removes an integration from a specified escalation level.",
        "operationId": "AlertDefinition_RemoveIntegrationFromEscalationLevel",
        "parameters": [
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "integrationGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the integration to remove.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Updates an integration for a specified escalation level.",
        "operationId": "AlertDefinition_UpdateIntegrationForEscalationWithPut",
        "parameters": [
          {
            "name": "escalationLevelIntegration",
            "in": "body",
            "required": true,
            "description": "The definition for the integration that should be updated.",
            "schema": {
              "$ref": "#/definitions/EscalationLevelIntegration"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "integrationGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the integration to update.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned"
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "AlertDefinition"
        ],
        "summary": "Partially updates an integration for a specified escalation level.",
        "operationId": "AlertDefinition_UpdateIntegrationForEscalationWithPatch",
        "parameters": [
          {
            "name": "escalationLevelIntegration",
            "in": "body",
            "required": true,
            "description": "The partial definition for the integration that should be updated.",
            "schema": {
              "$ref": "#/definitions/EscalationLevelIntegration"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "alertDefinitionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the alert definition.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "escalationLevelId",
            "in": "path",
            "required": true,
            "description": "The escalation level id.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "integrationGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the integration to update.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "One or more of the specified entities could not be found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Checkpoint": {
      "get": {
        "tags": [
          "Checkpoint"
        ],
        "summary": "Returns all the checkpoints. ",
        "operationId": "Checkpoint_GetAllCheckpoints",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/CheckpointListResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Checkpoint/{checkpointId}": {
      "get": {
        "tags": [
          "Checkpoint"
        ],
        "summary": "Returns the specified checkpoint. ",
        "operationId": "Checkpoint_GetCheckpoint",
        "parameters": [
          {
            "type": "integer",
            "name": "checkpointId",
            "in": "path",
            "required": true,
            "description": "The Id of the requested checkpoint.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/CheckpointResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified checkpoint doesn't exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Checkpoint/Server/{serverId}": {
      "get": {
        "tags": [
          "Checkpoint"
        ],
        "summary": "Returns the requested checkpoint server.",
        "operationId": "CheckpointServer_GetServer",
        "parameters": [
          {
            "type": "integer",
            "name": "serverId",
            "in": "path",
            "required": true,
            "description": "The Id of the requested server.",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/CheckpoinServerResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Checkpoint/Server/Ipv4": {
      "get": {
        "tags": [
          "Checkpoint"
        ],
        "summary": "Anonymous call that returns all the IPv4 addresses of all the checkpoint servers. ",
        "operationId": "CheckpointServer_GetAllServerIpv4Addresses",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/ListStringResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        }
      }
    },
    "/Checkpoint/Server/Ipv6": {
      "get": {
        "tags": [
          "Checkpoint"
        ],
        "summary": "Anonymous call that returns all the IPv6 addresses of all the checkpoint servers. ",
        "operationId": "CheckpointServer_GetAllServerIpv6Addresses",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/ListStringResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        }
      }
    },
    "/MonitorGroup": {
      "get": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Gets all monitor groups",
        "operationId": "MonitorGroup_GetAllMonitorGroups",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonitorGroup"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Creates a new monitor group",
        "operationId": "MonitorGroup_CreateMonitorGroup",
        "parameters": [
          {
            "name": "monitorGroup",
            "in": "body",
            "required": true,
            "description": "The MonitorGroup object to be created",
            "schema": {
              "$ref": "#/definitions/MonitorGroup"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/MonitorGroup"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorGroup/{monitorGroupGuid}": {
      "get": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Gets the details of a monitor group",
        "operationId": "MonitorGroup_GetMonitorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group to be retrieved",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/MonitorGroup"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Updates the monitor group with the Guid specified",
        "operationId": "MonitorGroup_UpdateMonitorGroup",
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "description": "The monitor group to be updated",
            "schema": {
              "$ref": "#/definitions/MonitorGroup"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group to be updated",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.\nor\nThe All Monitors group cannot be changed or deleted.\nor\nThe All Monitors group already exists.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The request failed.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The All Monitors group cannot be changed or deleted.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The All Monitors group already exists.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Deletes the specified monitor group",
        "operationId": "MonitorGroup_DeleteMonitorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group to be deleted",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.\nor\nDeleting the AllMonitors group is not allowed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The request failed.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "Deleting the AllMonitors group is not allowed.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorGroup/{monitorGroupGuid}/Member": {
      "get": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Gets a list of all members of a monitor group",
        "operationId": "MonitorGroup_GetMonitorGroupMembers",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group to retrieve the members for",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/MonitorGroupMember"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorGroup/{monitorGroupGuid}/AddMaintenancePeriodToAllMembers": {
      "post": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Adds the provided maintenance period to all monitors in the group specified ",
        "operationId": "MonitorGroup_AddMaintenancePeriodToAllMembers",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "maintenancePeriod",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenancePeriod"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorGroup/{monitorGroupGuid}/Member/{monitorGuid}": {
      "post": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Adds the specified monitor to the monitor group ",
        "operationId": "MonitorGroup_AddMonitorToMonitorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group to add the monitor to",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The monitor Guid",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Removes the specified monitor from the monitor group",
        "operationId": "MonitorGroup_RemoveMonitorFromMonitorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group to remove the monitor from",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The monitor Guid to be removed",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.\nor\nA monitor cannot be removed from the All Monitors group.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The request failed.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "A monitor cannot be removed from the All Monitors group.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorGroup/{monitorGroupGuid}/StopAllMonitors": {
      "post": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Stops all monitors that are a member of the monitor group specified by the monitor group GUID",
        "operationId": "MonitorGroup_StopAllMonitorsInGroup",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The monitor group GUID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorGroup/{monitorGroupGuid}/StartAllMonitors": {
      "post": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Starts all monitors that are a member of the monitor group specified by the monitor group GUID",
        "operationId": "MonitorGroup_StartAllMonitorsInGroup",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The monitor group GUID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorGroup/{monitorGroupGuid}/StopAllMonitorAlerts": {
      "post": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Stops alerting for all monitors that are a member of the monitor group specified by the monitor group GUID",
        "operationId": "MonitorGroup_StopAllMonitorAlertsInGroup",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The monitor group GUID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorGroup/{monitorGroupGuid}/StartAllMonitorAlerts": {
      "post": {
        "tags": [
          "MonitorGroup"
        ],
        "summary": "Starts alerting for all monitors that are a member of the monitor group specified by the monitor group GUID",
        "operationId": "MonitorGroup_StartAllMonitorAlertsInGroup",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The monitor group GUID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested monitor group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Operator": {
      "get": {
        "tags": [
          "Operator"
        ],
        "summary": "Gets a list of all operators.",
        "operationId": "Operator_GetAllOperators",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Operator"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Operator"
        ],
        "summary": "Creates a new operator.",
        "operationId": "Operator_CreateOperator",
        "parameters": [
          {
            "name": "uptrendsOperator",
            "in": "body",
            "required": true,
            "description": "The details of the operator to create",
            "schema": {
              "$ref": "#/definitions/Operator"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Operator"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Operator/{operatorGuid}": {
      "get": {
        "tags": [
          "Operator"
        ],
        "summary": "Gets the details of the operator with the provided OperatorGuid.",
        "operationId": "Operator_GetOperator",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator for which to retrieve the details",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Operator"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified operator was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Operator"
        ],
        "summary": "Updates an existing operator.",
        "operationId": "Operator_UpdateOperator",
        "parameters": [
          {
            "name": "uptrendsOperator",
            "in": "body",
            "required": true,
            "description": "The updated details of the operator",
            "schema": {
              "$ref": "#/definitions/Operator"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator to update",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Operator"
        ],
        "summary": "Updates an existing operator.",
        "operationId": "Operator_UpdateOperatorWithPatch",
        "parameters": [
          {
            "name": "uptrendsOperator",
            "in": "body",
            "required": true,
            "description": "The updated details of the operator",
            "schema": {
              "$ref": "#/definitions/Operator"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator to update",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Operator"
        ],
        "summary": "Deletes an existing operator.",
        "operationId": "Operator_DeleteOperator",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator to delete",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "Deleting the current operator is not allowed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified operator was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Operator/{operatorGuid}/OperatorGroup": {
      "get": {
        "tags": [
          "Operator"
        ],
        "summary": "Gets a list of all operator groups for the specified operator.",
        "operationId": "Operator_GetOperatorGroupsForOperator",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator for which to retrieve the operator group guids",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperatorMember"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified operator was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Operator/{operatorGuid}/Authorization": {
      "get": {
        "tags": [
          "Operator"
        ],
        "summary": "Gets all authorizations for the specified operator.",
        "operationId": "Operator_GetAuthorizationsForOperator",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperatorAuthorizationType"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified operator was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Operator/{operatorGuid}/Authorization/{authorizationType}": {
      "post": {
        "tags": [
          "Operator"
        ],
        "summary": "Assigns the specified authorization to this operator.",
        "operationId": "Operator_PostAuthorizationForOperator",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "authorizationType",
            "in": "path",
            "required": true,
            "description": "The type of authorization",
            "x-schema": {
              "$ref": "#/definitions/OperatorAuthorizationType"
            },
            "x-nullable": false,
            "enum": [
              "AccountAccess"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified operator was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Operator"
        ],
        "summary": "Removes the specified authorization of this operator.",
        "operationId": "Operator_DeleteAuthorizationForOperator",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "authorizationType",
            "in": "path",
            "required": true,
            "description": "The type of authorization",
            "x-schema": {
              "$ref": "#/definitions/OperatorAuthorizationType"
            },
            "x-nullable": false,
            "enum": [
              "AccountAccess"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified operator was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Operator/{operatorGuid}/DutySchedule": {
      "get": {
        "tags": [
          "Operator"
        ],
        "summary": "Gets the duty schedules for an specified operator.",
        "operationId": "Operator_GetDutyScheduleForOperator",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator to get the duty schedule for",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperatorDutySchedule"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified operator was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Operator"
        ],
        "summary": "Adds a duty schedule to the specified operator.",
        "operationId": "Operator_AddDutyPeriodForOperator",
        "parameters": [
          {
            "name": "schedule",
            "in": "body",
            "required": true,
            "description": "The duty schedule to add",
            "schema": {
              "$ref": "#/definitions/OperatorDutySchedule"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator to add the duty schedule to",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "403": {
            "x-nullable": false,
            "description": "One or more validation errors occurred.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Operator/{operatorGuid}/DutySchedule/{dutyScheduleId}": {
      "put": {
        "tags": [
          "Operator"
        ],
        "summary": "Updates the specified duty schedule of the specified operator.",
        "operationId": "Operator_UpdateDutyPeriodForOperator",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "dutyScheduleId",
            "in": "path",
            "required": true,
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperatorDutySchedule"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified operator or duty schedule does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Operator"
        ],
        "summary": "Deletes the specified duty schedule of the specified operator.",
        "operationId": "Operator_DeleteDutyScheduleFromOperator",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "dutyScheduleId",
            "in": "path",
            "required": true,
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified operator or duty schedule item does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Timezone": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Gets all timezones available.",
        "operationId": "Miscellaneous_GetAllTimezones",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Timezone"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Timezone/{timezoneId}": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Gets the timezone with the specified Id.",
        "operationId": "Miscellaneous_GetTimezoneById",
        "parameters": [
          {
            "type": "integer",
            "name": "timezoneId",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Timezone"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/OutgoingPhoneNumber": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Gets a list of all outgoing phone numbers available.",
        "operationId": "Miscellaneous_GetAllOutgoingPhoneNumbers",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OutgoingPhoneNumberDetails"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/OperatorGroup": {
      "get": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Gets all operator groups",
        "operationId": "OperatorGroup_GetAllOperatorGroups",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperatorGroup"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Creates a new operator group",
        "operationId": "OperatorGroup_CreateOperatorGroup",
        "parameters": [
          {
            "name": "operatorGroup",
            "in": "body",
            "required": true,
            "description": "The operatorGroup object to be created",
            "schema": {
              "$ref": "#/definitions/OperatorGroup"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/OperatorGroup"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/OperatorGroup/{operatorGroupGuid}": {
      "get": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Gets the details of a operator group",
        "operationId": "OperatorGroup_GetOperatorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator group to be retrieved",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/OperatorGroup"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested operator group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Updates the operator group with the Guid specified",
        "operationId": "OperatorGroup_UpdateOperatorGroup",
        "parameters": [
          {
            "name": "operatorGroup",
            "in": "body",
            "required": true,
            "description": "The operator group to be updated",
            "schema": {
              "$ref": "#/definitions/OperatorGroup"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator group to be updated",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.\nor\nThe All operators group cannot be changed or deleted.\nor\nThe All operators group already exists.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The request failed.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The All operators group cannot be changed or deleted.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The All operators group already exists.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          },
          "404": {
            "x-nullable": false,
            "description": "The requested operator group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Deletes the specified operator group",
        "operationId": "OperatorGroup_DeleteOperatorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator group to be deleted",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.\nor\nDeleting the Alloperators group is not allowed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The request failed.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "Deleting the Alloperators group is not allowed.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          },
          "404": {
            "x-nullable": false,
            "description": "The requested operator group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/OperatorGroup/{operatorGroupGuid}/Member": {
      "get": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Gets a list of all members of an operator group",
        "operationId": "OperatorGroup_GetOperatorGroupMembers",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator group to retrieve the members for",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/OperatorGroupMember"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested operator group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/OperatorGroup/{operatorGroupGuid}/DutySchedule/AddDutyScheduleForAllMembers": {
      "post": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Adds the provided duty schedule to all operators in the group specified ",
        "operationId": "OperatorGroup_AddDutyScheduleToAllMembers",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "format": "guid",
            "x-nullable": false
          },
          {
            "name": "dutySchedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperatorDutySchedule"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested operator group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/OperatorGroup/{operatorGroupGuid}/Member/{operatorGuid}": {
      "post": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Adds the specified operator to the operator group ",
        "operationId": "OperatorGroup_AddOperatorToOperatorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator group to add the operator to",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The operator Guid",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested operator group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Removes the specified operator from the operator group",
        "operationId": "OperatorGroup_RemoveOperatorFromOperatorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator group to remove the operator from",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "operatorGuid",
            "in": "path",
            "required": true,
            "description": "The operator Guid to be removed",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.\nor\nA operator cannot be removed from the All operators group.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The request failed.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "A operator cannot be removed from the All operators group.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          },
          "404": {
            "x-nullable": false,
            "description": "The requested operator group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/OperatorGroup/{operatorGroupGuid}/AllOperatorsOnDuty": {
      "post": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Set the OnDuty flag to on for all operators that are a member of the operator group specified by the operator group GUID",
        "operationId": "OperatorGroup_AllOperatorsInGroupOnDuty",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The operator group GUID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageInfo"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested operator group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageInfo"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/OperatorGroup/{operatorGroupGuid}/AllOperatorsOffDuty": {
      "post": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Set the OnDuty flag to off for all operators that are a member of the operator group specified by the operator group GUID",
        "operationId": "OperatorGroup_AllOperatorsInGroupOffDuty",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The operator group GUID",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageInfo"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested operator group was not found.",
            "schema": {
              "$ref": "#/definitions/MessageInfo"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/OperatorGroup/{operatorGroupGuid}/Authorization": {
      "get": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Returns all authorizations for the specified operator group",
        "operationId": "OperatorGroup_GetAuthorizationsForOperatorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operatorgroup for which to return authorizations.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/OperatorGroupAuthorization"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault section does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Creates a new authorization for the specified operator group",
        "description": "The AuthorizationId attribute should be omitted in the request body. The newly created authorization will be returned in the response. An authorization should be granted to an operator group. Therefore, either specify the OperatorGroupGuid attribute. The OperatorGuid attribute is not used for this endpoint",
        "operationId": "OperatorGroup_CreateAuthorizationForOperatorGroup",
        "parameters": [
          {
            "name": "authorization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperatorGroupAuthorization"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator group for which to create the new authorization.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/OperatorGroupAuthorization"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault section does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/OperatorGroup/{operatorGroupGuid}/Authorization/{authorizationGuid}": {
      "delete": {
        "tags": [
          "OperatorGroup"
        ],
        "summary": "Deletes the specified authorization for the specified operator group",
        "operationId": "OperatorGroup_DeleteAuthorizationForOperatorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "operatorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the operator group for which the authorization should be deleted.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "authorizationGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the authorization that should be deleted.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault section does not exist.\nor\nThe requested vault section authorization does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The requested vault section does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The requested vault section authorization does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Returns all monitor check data.",
        "operationId": "MonitorCheck_GetAccountMonitorChecks",
        "parameters": [
          {
            "type": "string",
            "name": "ErrorLevel",
            "in": "query",
            "description": "Error level filter that should be applied. (default = NoError and above)",
            "x-schema": {
              "$ref": "#/definitions/ErrorLevelFilter"
            },
            "x-nullable": false,
            "enum": [
              "NoError",
              "Unconfirmed",
              "Confirmed"
            ]
          },
          {
            "type": "boolean",
            "name": "ShowPartialMeasurements",
            "in": "query",
            "description": "Show partial measurements from concurrent monitors",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Cursor",
            "in": "query",
            "description": "A cursor value that should be used for traversing the dataset.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Sorting",
            "in": "query",
            "description": "Sorting direction based on timestamp.",
            "x-schema": {
              "$ref": "#/definitions/SortDirection"
            },
            "default": "Descending",
            "x-nullable": false,
            "enum": [
              "Ascending",
              "Descending"
            ]
          },
          {
            "type": "integer",
            "name": "Take",
            "in": "query",
            "description": "The number of records to return (Max value = 100)",
            "format": "int32",
            "default": 100,
            "maximum": 100.0,
            "minimum": 0.0,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Start",
            "in": "query",
            "description": "The start of a custom period (can't be used together with the PresetPeriod parameter)",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "End",
            "in": "query",
            "description": "The end of a custom period",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "PresetPeriod",
            "in": "query",
            "description": "The requested time period.",
            "x-schema": {
              "$ref": "#/definitions/PresetPeriodType"
            },
            "default": "Last24Hours",
            "x-nullable": true,
            "enum": [
              "CurrentDay",
              "CurrentWeek",
              "CurrentMonth",
              "CurrentYear",
              "PreviousDay",
              "PreviousWeek",
              "PreviousMonth",
              "PreviousYear",
              "Last24Hours",
              "Last48Hours",
              "Last7Days",
              "Last30Days",
              "Last60Days",
              "Last90Days",
              "Last365Days",
              "Last3Months",
              "Last6Months",
              "Last12Months",
              "Last24Months",
              "All"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/MonitorCheckResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/{monitorCheckId}": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Returns a single monitor check.",
        "operationId": "MonitorCheck_GetSingleMonitorCheck",
        "parameters": [
          {
            "type": "integer",
            "name": "monitorCheckId",
            "in": "path",
            "required": true,
            "description": "The Id of the monitor check to get the data for.",
            "format": "int64",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/SingleMonitorCheckResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/Monitor/{monitorGuid}": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Returns monitor check data for a specific monitor.",
        "operationId": "MonitorCheck_GetMonitorCheck",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor to get monitor checks for.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "ErrorLevel",
            "in": "query",
            "description": "Error level filter that should be applied. (default = NoError and above)",
            "x-schema": {
              "$ref": "#/definitions/ErrorLevelFilter"
            },
            "x-nullable": false,
            "enum": [
              "NoError",
              "Unconfirmed",
              "Confirmed"
            ]
          },
          {
            "type": "boolean",
            "name": "ShowPartialMeasurements",
            "in": "query",
            "description": "Show partial measurements from concurrent monitors",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Cursor",
            "in": "query",
            "description": "A cursor value that should be used for traversing the dataset.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Sorting",
            "in": "query",
            "description": "Sorting direction based on timestamp.",
            "x-schema": {
              "$ref": "#/definitions/SortDirection"
            },
            "default": "Descending",
            "x-nullable": false,
            "enum": [
              "Ascending",
              "Descending"
            ]
          },
          {
            "type": "integer",
            "name": "Take",
            "in": "query",
            "description": "The number of records to return (Max value = 100)",
            "format": "int32",
            "default": 100,
            "maximum": 100.0,
            "minimum": 0.0,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Start",
            "in": "query",
            "description": "The start of a custom period (can't be used together with the PresetPeriod parameter)",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "End",
            "in": "query",
            "description": "The end of a custom period",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "PresetPeriod",
            "in": "query",
            "description": "The requested time period.",
            "x-schema": {
              "$ref": "#/definitions/PresetPeriodType"
            },
            "default": "Last24Hours",
            "x-nullable": true,
            "enum": [
              "CurrentDay",
              "CurrentWeek",
              "CurrentMonth",
              "CurrentYear",
              "PreviousDay",
              "PreviousWeek",
              "PreviousMonth",
              "PreviousYear",
              "Last24Hours",
              "Last48Hours",
              "Last7Days",
              "Last30Days",
              "Last60Days",
              "Last90Days",
              "Last365Days",
              "Last3Months",
              "Last6Months",
              "Last12Months",
              "Last24Months",
              "All"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/MonitorCheckResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/MonitorGroup/{monitorGroupGuid}": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Returns monitor check data for a specific monitor group.",
        "operationId": "MonitorCheck_GetMonitorGroupData",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor group to get monitor checks for.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "ErrorLevel",
            "in": "query",
            "description": "Error level filter that should be applied. (default = NoError and above)",
            "x-schema": {
              "$ref": "#/definitions/ErrorLevelFilter"
            },
            "x-nullable": false,
            "enum": [
              "NoError",
              "Unconfirmed",
              "Confirmed"
            ]
          },
          {
            "type": "boolean",
            "name": "ShowPartialMeasurements",
            "in": "query",
            "description": "Show partial measurements from concurrent monitors",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Cursor",
            "in": "query",
            "description": "A cursor value that should be used for traversing the dataset.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Sorting",
            "in": "query",
            "description": "Sorting direction based on timestamp.",
            "x-schema": {
              "$ref": "#/definitions/SortDirection"
            },
            "default": "Descending",
            "x-nullable": false,
            "enum": [
              "Ascending",
              "Descending"
            ]
          },
          {
            "type": "integer",
            "name": "Take",
            "in": "query",
            "description": "The number of records to return (Max value = 100)",
            "format": "int32",
            "default": 100,
            "maximum": 100.0,
            "minimum": 0.0,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Start",
            "in": "query",
            "description": "The start of a custom period (can't be used together with the PresetPeriod parameter)",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "End",
            "in": "query",
            "description": "The end of a custom period",
            "format": "date-time",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "PresetPeriod",
            "in": "query",
            "description": "The requested time period.",
            "x-schema": {
              "$ref": "#/definitions/PresetPeriodType"
            },
            "default": "Last24Hours",
            "x-nullable": true,
            "enum": [
              "CurrentDay",
              "CurrentWeek",
              "CurrentMonth",
              "CurrentYear",
              "PreviousDay",
              "PreviousWeek",
              "PreviousMonth",
              "PreviousYear",
              "Last24Hours",
              "Last48Hours",
              "Last7Days",
              "Last30Days",
              "Last60Days",
              "Last90Days",
              "Last365Days",
              "Last3Months",
              "Last6Months",
              "Last12Months",
              "Last24Months",
              "All"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/MonitorCheckResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/{monitorCheckId}/Http": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Returns HTTP details for a monitor check.",
        "operationId": "MonitorCheck_GetHttpDetails",
        "parameters": [
          {
            "type": "integer",
            "name": "monitorCheckId",
            "in": "path",
            "required": true,
            "description": "The monitor check Id to get the detailed data for.",
            "format": "int64",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/HttpDetailsResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/{monitorCheckId}/MultiStepAPI": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Returns Multi-Step API details for a monitor check.",
        "operationId": "MonitorCheck_GetMultistepDetails",
        "parameters": [
          {
            "type": "integer",
            "name": "monitorCheckId",
            "in": "path",
            "required": true,
            "description": "The monitor check Id to get the detailed data for.",
            "format": "int64",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/MsaDetailsResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/{monitorCheckId}/Transaction": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Returns transaction step details for a monitor check.",
        "operationId": "MonitorCheck_GetTransactionDetails",
        "parameters": [
          {
            "type": "integer",
            "name": "monitorCheckId",
            "in": "path",
            "required": true,
            "description": "The monitor check Id to get the detailed data for.",
            "format": "int64",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/TransactionDetailsResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/{monitorCheckId}/Waterfall": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Returns waterfall information for a monitor check.",
        "operationId": "MonitorCheck_GetWaterfallInfo",
        "parameters": [
          {
            "type": "integer",
            "name": "monitorCheckId",
            "in": "path",
            "required": true,
            "description": "The monitor check Id to get the detailed data for.",
            "format": "int64",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "step",
            "in": "query",
            "description": "For transaction waterfalls only: the transaction step to get the waterfall for.",
            "format": "int32",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/WaterfallResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/{monitorCheckId}/PageSource": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Returns page source information for a monitor check.",
        "operationId": "MonitorCheck_GetPageSourceInfo",
        "parameters": [
          {
            "type": "integer",
            "name": "monitorCheckId",
            "in": "path",
            "required": true,
            "description": "The monitor check Id to get the detailed data for.",
            "format": "int64",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "step",
            "in": "query",
            "description": "For transactions only: the transaction step to get the page source for.",
            "format": "int32",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/WaterfallResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/{monitorCheckId}/ConsoleLog": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Returns console log information for a monitor check.",
        "operationId": "MonitorCheck_GetConsoleLogInfo",
        "parameters": [
          {
            "type": "integer",
            "name": "monitorCheckId",
            "in": "path",
            "required": true,
            "description": "The monitor check Id to get the detailed data for.",
            "format": "int64",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "step",
            "in": "query",
            "description": "For transactions only: the transaction step to get the console log for.",
            "format": "int32",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/WaterfallResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/{monitorCheckId}/Screenshot/{screenshotId}": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Gets a specific screenshot for a specified monitor check",
        "operationId": "MonitorCheck_GetScreenshots",
        "parameters": [
          {
            "type": "integer",
            "name": "monitorCheckId",
            "in": "path",
            "required": true,
            "description": "The monitor check Id to get the screenshot data for.",
            "format": "int64",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "screenshotId",
            "in": "path",
            "required": true,
            "description": "The screenshot Id of the screenshot to get.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/ScreenshotResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/MonitorCheck/{monitorCheckId}/Concurrent": {
      "get": {
        "tags": [
          "MonitorCheck"
        ],
        "summary": "Gets all partial checks for a concurrent monitor check",
        "operationId": "MonitorCheck_GetConcurrentMonitorPartialChecks",
        "parameters": [
          {
            "type": "integer",
            "name": "monitorCheckId",
            "in": "path",
            "required": true,
            "description": "The monitor check Id to get the partial checks for.",
            "format": "int64",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/MonitorCheckResponse"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Monitor": {
      "get": {
        "tags": [
          "Monitor"
        ],
        "summary": "Returns the definition of all monitors available in the account.",
        "operationId": "Monitor_GetMonitors",
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "Provide the option to only retrieve the requested fields. E.g. \"Name,IsActive\".",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Monitor"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Monitor"
        ],
        "summary": "Creates a new monitor.",
        "operationId": "Monitor_PostMonitor",
        "parameters": [
          {
            "name": "monitor",
            "in": "body",
            "required": true,
            "description": "The complete definition of the monitor that should be created.",
            "schema": {
              "$ref": "#/definitions/Monitor"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Monitor"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Monitor/MonitorGroup/{monitorGroupGuid}": {
      "get": {
        "tags": [
          "Monitor"
        ],
        "summary": "Returns the definition of all monitors available in the account that are a member of the specified monitor group.",
        "operationId": "Monitor_GetMonitorsByMonitorGroup",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGroupGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the requested monitor group to retrieve the monitors of.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "Provide the option to only retrieve the requested fields. E.g. \"Name,IsActive\".",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Monitor"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Monitor/{monitorGuid}": {
      "get": {
        "tags": [
          "Monitor"
        ],
        "summary": "Returns the definition of the specified monitor. ",
        "operationId": "Monitor_GetMonitor",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the requested monitor.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "Provide the option to only retrieve the requested fields. E.g. \"Name,IsActive\".",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Monitor"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Monitor"
        ],
        "summary": "Partially updates the definition of the specified monitor.",
        "description": "This methods accepts parts of a monitor definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back these changes only using this PATCH method.",
        "operationId": "Monitor_PatchMonitor",
        "parameters": [
          {
            "name": "monitor",
            "in": "body",
            "required": true,
            "description": "The partial definition for the monitor that should be updated.",
            "schema": {
              "$ref": "#/definitions/Monitor"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Monitor"
        ],
        "summary": "Updates the definition of the specified monitor.",
        "description": "This methods only accepts a complete monitor definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back the updated definition using this PUT method.",
        "operationId": "Monitor_PutMonitor",
        "parameters": [
          {
            "name": "monitor",
            "in": "body",
            "required": true,
            "description": "The complete definition for the monitor that should be updated.",
            "schema": {
              "$ref": "#/definitions/Monitor"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the monitor that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Monitor"
        ],
        "summary": "Deletes the specified monitor.",
        "operationId": "Monitor_DeleteMonitor",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the monitor you want to delete.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Monitor/{monitorGuid}/MonitorGroup": {
      "get": {
        "tags": [
          "Monitor"
        ],
        "summary": "Returns the Guid of each monitor group where the specified monitor is a member of. ",
        "operationId": "Monitor_GetMonitorGroups",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the requested monitor.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Monitor"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Monitor/{monitorGuid}/Clone": {
      "post": {
        "tags": [
          "Monitor"
        ],
        "summary": "Creates a clone (duplicate) of the specified monitor.",
        "description": "Upon creation, the new monitor will be inactive. This allows you to make the necessary changes before you activate it. All other settings will be transferred to the new monitor as-is.",
        "operationId": "Monitor_CloneMonitor",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the monitor you want to clone.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "includeMaintenancePeriods",
            "in": "query",
            "description": "Whether or not to also copy the maintenance periods into the clone.",
            "default": true,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "includeMonitorGroups",
            "in": "query",
            "description": "Whether or not to also copy the monitor group memberships into the clone.",
            "default": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/Monitor"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Monitor/{monitorGuid}/MaintenancePeriod": {
      "get": {
        "tags": [
          "Monitor"
        ],
        "summary": "Finds all maintenance periods for a monitor.",
        "operationId": "Monitor_GetAllMaintenancePeriodsForMonitor",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the monitor you want to find the maintenance periods of.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MaintenancePeriod"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Monitor"
        ],
        "summary": "Saves the new maintenance period provided for the specified monitor",
        "operationId": "Monitor_CreateMaintenancePeriodForMonitor",
        "parameters": [
          {
            "name": "maintenancePeriod",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenancePeriod"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully. No content is returned.",
            "schema": {
              "$ref": "#/definitions/MaintenancePeriod"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Monitor/{monitorGuid}/MaintenancePeriod/{maintenancePeriodId}": {
      "delete": {
        "tags": [
          "Monitor"
        ],
        "summary": "Deletes the specified maintenance period from the specified monitor",
        "operationId": "Monitor_DeleteMaintenancePeriodFromMonitor",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "maintenancePeriodId",
            "in": "path",
            "required": true,
            "format": "int32",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor or maintenance period does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Monitor"
        ],
        "summary": "Updates the specified maintenance schedule for the specified monitor",
        "operationId": "Monitor_UpdateMaintenancePeriodForMonitor",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "maintenancePeriodId",
            "in": "path",
            "required": true,
            "format": "int32",
            "x-nullable": false
          },
          {
            "name": "maintenancePeriod",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MaintenancePeriod"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor or maintenanceperiod does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Monitor/{monitorGuid}/MaintenancePeriod/Cleanup/{beforeDate}": {
      "post": {
        "tags": [
          "Monitor"
        ],
        "summary": "Clears out all one-time maintenance periods for the specified monitor older than the specified date",
        "operationId": "Monitor_CleanupMaintenancePeriods",
        "parameters": [
          {
            "type": "string",
            "name": "monitorGuid",
            "in": "path",
            "required": true,
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "beforeDate",
            "in": "path",
            "required": true,
            "description": "A string representing the date, formatted as \"yyyy-MM-dd\"",
            "format": "date-time",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The specified monitor does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/Register": {
      "post": {
        "tags": [
          "Register"
        ],
        "summary": "Creates a new API account.",
        "description": "This method requires that you specify the username and password of an Uptrends operator login as authentication. When registration is successful, please save the UserName and Password fields from the response; these are your new API credentials.",
        "operationId": "Register_Post",
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "If you get this response, a new API account was created successfully.",
            "schema": {
              "$ref": "#/definitions/RegistrationResponse"
            }
          }
        },
        "security": [
          {
            "user-basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/VaultItem": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Returns all vault items.",
        "operationId": "Vault_GetAllVaultItems",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VaultItem"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Vault"
        ],
        "summary": "Creates a new vault item.",
        "description": "The VaultItemGuid field should be omitted",
        "operationId": "Vault_CreateNewVaultItem",
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "description": "The item to create",
            "schema": {
              "$ref": "#/definitions/VaultItem"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/VaultItem"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/VaultItem/{vaultItemGuid}": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Returns the specified vault item.",
        "operationId": "Vault_GetVaultItem",
        "parameters": [
          {
            "type": "string",
            "name": "vaultItemGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the requested vault item.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/VaultItem"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault item does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Vault"
        ],
        "summary": "Updates the specified vault item.",
        "description": "Only complete definitions are accepted. Fields not specified will be NULLed.",
        "operationId": "Vault_UpdateVaultItem",
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "description": "The complete definition of the vault item that should be updated.",
            "schema": {
              "$ref": "#/definitions/VaultItem"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "vaultItemGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the vault item that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault item does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Vault"
        ],
        "summary": "Partially updates the specified vault item.",
        "description": "The vault item type cannot be changed with this operation.",
        "operationId": "Vault_PartiallyUpdateVaultItem",
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "description": "Part of the definition of the vault item that should be updated.",
            "schema": {
              "$ref": "#/definitions/VaultItem"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "vaultItemGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the vault item that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault item does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Vault"
        ],
        "summary": "Deletes the specified vault item.",
        "operationId": "Vault_DeleteVaultItem",
        "parameters": [
          {
            "type": "string",
            "name": "vaultItemGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the vault item that should be deleted.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault item does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/VaultSection": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Returns all vault sections.",
        "operationId": "Vault_GetAllVaultSections",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VaultSection"
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Vault"
        ],
        "summary": "Creates a new vault section.",
        "description": "When a new vault section is created, the user that created the section is granted View and Edit authorizations to that section. The VaultSectionGuid attribute should be omitted in the request body. The Guid of the newly created section will be returned in the response.",
        "operationId": "Vault_CreateNewVaultSection",
        "parameters": [
          {
            "name": "section",
            "in": "body",
            "required": true,
            "description": "The attributes of the vault section that should be created.",
            "schema": {
              "$ref": "#/definitions/VaultSection"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/VaultSection"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/VaultSection/{vaultSectionGuid}": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Returns the specified vault section.",
        "operationId": "Vault_GetVaultSection",
        "parameters": [
          {
            "type": "string",
            "name": "vaultSectionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the requested vault section.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/VaultSection"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault section does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Vault"
        ],
        "summary": "Updates the specified vault section.",
        "operationId": "Vault_UpdateVaultSection",
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VaultSection"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "vaultSectionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the vault section that should be updated.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned"
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault section does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Vault"
        ],
        "summary": "Deletes the specified vault section.",
        "operationId": "Vault_DeleteVaultSection",
        "parameters": [
          {
            "type": "string",
            "name": "vaultSectionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the vault section that should be deleted.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault section does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/VaultSection/{vaultSectionGuid}/Authorization": {
      "get": {
        "tags": [
          "Vault"
        ],
        "summary": "Returns all authorizations for the specified vault section.",
        "operationId": "Vault_GetAuthorizationsForVaultSection",
        "parameters": [
          {
            "type": "string",
            "name": "vaultSectionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the vault section for which to return authorizations.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/VaultSectionAuthorization"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault section does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Vault"
        ],
        "summary": "Creates a new authorization for the specified vault section. ",
        "description": "The AuthorizationId attribute should be omitted in the request body. The newly created authorization will be returned in the response. An authorization should be granted to either an individual operator, or an operator group. Therefore, either specify the OperatorGuid attribute or the OperatorGroupGuid attribute.",
        "operationId": "Vault_CreateAuthorizationForVaultSection",
        "parameters": [
          {
            "name": "authorization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VaultSectionAuthorization"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "vaultSectionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the vault section for which to create the new authorization.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The request completed successfully.",
            "schema": {
              "$ref": "#/definitions/VaultSectionAuthorization"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault section does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    },
    "/VaultSection/{vaultSectionGuid}/Authorization/{authorizationGuid}": {
      "delete": {
        "tags": [
          "Vault"
        ],
        "summary": "Deletes the specified authorization for the specified vault section. ",
        "operationId": "Vault_DeleteAuthorizationForVaultSection",
        "parameters": [
          {
            "type": "string",
            "name": "vaultSectionGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the vault section for which the authorization should be deleted.",
            "format": "guid",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "authorizationGuid",
            "in": "path",
            "required": true,
            "description": "The Guid of the authorization that should be deleted.",
            "format": "guid",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "The request completed successfully. No content is returned."
          },
          "400": {
            "x-nullable": false,
            "description": "The request failed.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            }
          },
          "404": {
            "x-nullable": false,
            "description": "The requested vault section does not exist.\nor\nThe requested vault section authorization does not exist.",
            "schema": {
              "$ref": "#/definitions/MessageList"
            },
            "x-expectedSchemas": [
              {
                "description": "The requested vault section does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              },
              {
                "description": "The requested vault section authorization does not exist.",
                "schema": {
                  "$ref": "#/definitions/MessageList"
                }
              }
            ]
          }
        },
        "security": [
          {
            "basicauth": [
              ""
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "AccountStatistics": {
      "type": "object",
      "properties": {
        "AccountId": {
          "type": "string"
        },
        "ExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "MonitorQuota": {
          "$ref": "#/definitions/MonitorQuota"
        },
        "OperatorQuota": {
          "$ref": "#/definitions/OperatorQuota"
        },
        "RemainingMessageCredits": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MonitorQuota": {
      "type": "object",
      "properties": {
        "BasicMonitors": {
          "type": "integer",
          "format": "int32"
        },
        "BasicMonitorsInUse": {
          "type": "integer",
          "format": "int32"
        },
        "BrowserMonitors": {
          "type": "integer",
          "format": "int32"
        },
        "BrowserMonitorsInUse": {
          "type": "integer",
          "format": "int32"
        },
        "ApiMonitoringCredits": {
          "type": "integer",
          "format": "int32"
        },
        "ApiMonitoringCreditsInUse": {
          "type": "integer",
          "format": "int32"
        },
        "TransactionCredits": {
          "type": "integer",
          "format": "int32"
        },
        "TransactionCreditsInUse": {
          "type": "integer",
          "format": "int32"
        },
        "Monitors": {
          "type": "integer",
          "format": "int32"
        },
        "MonitorsInUse": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OperatorQuota": {
      "type": "object",
      "properties": {
        "Operators": {
          "type": "integer",
          "format": "int32"
        },
        "OperatorsInUse": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MessageList": {
      "type": "object",
      "properties": {
        "Messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageInfo"
          }
        }
      }
    },
    "MessageInfo": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "CheckpointRegion": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Id": {
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "ChildRegions": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "Checkpoint": {
      "type": "object",
      "description": "Checkpoint",
      "required": [
        "CheckpointId",
        "IsPrimaryCheckpoint",
        "SupportsIpv6",
        "HasHighAvailability"
      ],
      "properties": {
        "CheckpointId": {
          "type": "integer",
          "description": "The Id of the checkpoint"
        },
        "CheckpointName": {
          "type": "string",
          "description": "The name of the checkpoint"
        },
        "Code": {
          "type": "string",
          "description": "The location code of the checkpoint"
        },
        "Ipv4Addresses": {
          "type": "array",
          "description": "The IPv4 addresses of the checkpoint ",
          "items": {
            "type": "string"
          }
        },
        "Ipv6Addresses": {
          "type": "array",
          "description": "The IPv6 addresses of the checkpoint",
          "items": {
            "$ref": "#/definitions/Ipv6Address"
          }
        },
        "IsPrimaryCheckpoint": {
          "type": "boolean",
          "description": "Checkpoint is primary"
        },
        "SupportsIpv6": {
          "type": "boolean",
          "description": "Checkpoint supports IPv6"
        },
        "HasHighAvailability": {
          "type": "boolean",
          "description": "Checkpoint has high availability"
        }
      }
    },
    "Ipv6Address": {
      "type": "object",
      "description": "Ipv6 address",
      "required": [
        "IsNative"
      ],
      "properties": {
        "IpAddress": {
          "type": "string",
          "description": "The IPv6 address"
        },
        "IsNative": {
          "type": "boolean",
          "description": "This indicates whether this is a native IPv6 address"
        }
      }
    },
    "Dashboard": {
      "type": "object",
      "properties": {
        "DashboardGuid": {
          "type": "string",
          "format": "guid"
        },
        "Name": {
          "type": "string"
        },
        "DashboardFilter": {
          "$ref": "#/definitions/DashboardFilter"
        },
        "AutoRefresh": {
          "type": "boolean"
        }
      }
    },
    "DashboardFilter": {
      "type": "object",
      "properties": {
        "SelectedPeriod": {
          "$ref": "#/definitions/SelectedPeriod"
        },
        "Monitors": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "guid"
          }
        },
        "MonitorGroups": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "guid"
          }
        },
        "Checkpoints": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "SelectedPeriod": {
      "type": "object",
      "properties": {
        "SelectedPeriodType": {
          "description": "The type of period",
          "allOf": [
            {
              "$ref": "#/definitions/SelectedPeriodType"
            }
          ]
        },
        "Start": {
          "type": "string",
          "description": "The start of a custom period (can't be used together with the SelectedPeriodType parameter)",
          "format": "date-time"
        },
        "End": {
          "type": "string",
          "description": "The end of a custom period",
          "format": "date-time"
        },
        "PresetPeriod": {
          "description": "The requested time period.",
          "default": "Last24Hours",
          "allOf": [
            {
              "$ref": "#/definitions/PresetPeriodType"
            }
          ]
        }
      }
    },
    "SelectedPeriodType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "PresetPeriod",
        "SpecificDates"
      ],
      "enum": [
        "PresetPeriod",
        "SpecificDates"
      ]
    },
    "PresetPeriodType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "CurrentDay",
        "CurrentWeek",
        "CurrentMonth",
        "CurrentYear",
        "PreviousDay",
        "PreviousWeek",
        "PreviousMonth",
        "PreviousYear",
        "Last24Hours",
        "Last48Hours",
        "Last7Days",
        "Last30Days",
        "Last60Days",
        "Last90Days",
        "Last365Days",
        "Last3Months",
        "Last6Months",
        "Last12Months",
        "Last24Months",
        "All"
      ],
      "enum": [
        "CurrentDay",
        "CurrentWeek",
        "CurrentMonth",
        "CurrentYear",
        "PreviousDay",
        "PreviousWeek",
        "PreviousMonth",
        "PreviousYear",
        "Last24Hours",
        "Last48Hours",
        "Last7Days",
        "Last30Days",
        "Last60Days",
        "Last90Days",
        "Last365Days",
        "Last3Months",
        "Last6Months",
        "Last12Months",
        "Last24Months",
        "All"
      ]
    },
    "PublicStatusPage": {
      "type": "object",
      "properties": {
        "PublicDashboardGuid": {
          "type": "string",
          "format": "guid"
        },
        "Name": {
          "type": "string"
        },
        "IsPublished": {
          "type": "boolean"
        },
        "PresetPeriodType": {
          "$ref": "#/definitions/PresetPeriodType"
        },
        "CustomizationInfo": {
          "$ref": "#/definitions/CustomizationInfo"
        },
        "SlaGuid": {
          "type": "string",
          "format": "guid"
        },
        "SlaGuidSpecified": {
          "type": "boolean"
        },
        "MonitorGuids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "guid"
          }
        },
        "MonitorGroupGuids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "guid"
          }
        }
      }
    },
    "CustomizationInfo": {
      "type": "object",
      "required": [
        "SortColumnsNewToOld",
        "SortRowsProperty"
      ],
      "properties": {
        "MainColor": {
          "type": "string"
        },
        "BackgroundColor": {
          "type": "string"
        },
        "TextColor": {
          "type": "string"
        },
        "TitleText": {
          "type": "string"
        },
        "FooterText": {
          "type": "string"
        },
        "SortColumnsNewToOld": {
          "type": "boolean"
        },
        "SortRowsProperty": {
          "$ref": "#/definitions/SortOrderEnum"
        },
        "CommentTitle": {
          "type": "string"
        },
        "CommentText": {
          "type": "string"
        }
      }
    },
    "SortOrderEnum": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Alphabetical",
        "ByStatus"
      ],
      "enum": [
        "Alphabetical",
        "ByStatus"
      ]
    },
    "PSPAuthorization": {
      "type": "object",
      "required": [
        "AuthorizationType"
      ],
      "properties": {
        "AuthorizationId": {
          "type": "string",
          "format": "guid"
        },
        "AuthorizationType": {
          "$ref": "#/definitions/PSPAuthorizationType"
        },
        "OperatorGuid": {
          "type": "string",
          "format": "guid"
        },
        "OperatorGroupGuid": {
          "type": "string",
          "format": "guid"
        }
      }
    },
    "PSPAuthorizationType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "ViewPublicDashboard"
      ],
      "enum": [
        "ViewPublicDashboard"
      ]
    },
    "ScheduledReport": {
      "type": "object",
      "properties": {
        "ScheduledReportGuid": {
          "type": "string",
          "format": "guid"
        },
        "Hash": {
          "type": "string"
        },
        "DashboardGuid": {
          "type": "string",
          "format": "guid"
        },
        "DashboardGuidSpecified": {
          "type": "boolean"
        },
        "FileType": {
          "$ref": "#/definitions/ScheduledReportFileType"
        },
        "IsActive": {
          "type": "boolean"
        },
        "Schedule": {
          "$ref": "#/definitions/Schedule"
        },
        "SelectedPeriod": {
          "$ref": "#/definitions/PresetPeriodTypeWithExclusive"
        },
        "InternalNotes": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "Recipients": {
          "$ref": "#/definitions/Recipients"
        }
      }
    },
    "ScheduledReportFileType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "PDF",
        "Excel",
        "Html"
      ],
      "enum": [
        "PDF",
        "Excel",
        "Html"
      ]
    },
    "Schedule": {
      "type": "object",
      "properties": {
        "ScheduleType": {
          "$ref": "#/definitions/ScheduleType"
        },
        "Time": {
          "type": "string",
          "format": "time-span"
        },
        "WeekDay": {
          "$ref": "#/definitions/DayOfWeek"
        },
        "MonthDay": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ScheduleType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Daily",
        "Weekly",
        "Monthly"
      ],
      "enum": [
        "Daily",
        "Weekly",
        "Monthly"
      ]
    },
    "DayOfWeek": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ],
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ]
    },
    "PresetPeriodTypeWithExclusive": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "CurrentDay",
        "CurrentWeek",
        "CurrentMonth",
        "CurrentYear",
        "PreviousDay",
        "PreviousWeek",
        "PreviousMonth",
        "PreviousYear",
        "Last24Hours",
        "Last48Hours",
        "Last7Days",
        "Last30Days",
        "Last60Days",
        "Last90Days",
        "Last365Days",
        "Last3Months",
        "Last6Months",
        "Last12Months",
        "Last24Months",
        "Last24HoursExcl",
        "Last48HoursExcl",
        "Last7DaysExcl",
        "Last30DaysExcl",
        "Last60DaysExcl",
        "Last90DaysExcl",
        "Last365DaysExcl",
        "Last3MonthsExcl",
        "Last6MonthsExcl",
        "Last12MonthsExcl",
        "Last24MonthsExcl",
        "All"
      ],
      "enum": [
        "CurrentDay",
        "CurrentWeek",
        "CurrentMonth",
        "CurrentYear",
        "PreviousDay",
        "PreviousWeek",
        "PreviousMonth",
        "PreviousYear",
        "Last24Hours",
        "Last48Hours",
        "Last7Days",
        "Last30Days",
        "Last60Days",
        "Last90Days",
        "Last365Days",
        "Last3Months",
        "Last6Months",
        "Last12Months",
        "Last24Months",
        "Last24HoursExcl",
        "Last48HoursExcl",
        "Last7DaysExcl",
        "Last30DaysExcl",
        "Last60DaysExcl",
        "Last90DaysExcl",
        "Last365DaysExcl",
        "Last3MonthsExcl",
        "Last6MonthsExcl",
        "Last12MonthsExcl",
        "Last24MonthsExcl",
        "All"
      ]
    },
    "Recipients": {
      "type": "object",
      "properties": {
        "Operators": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "guid"
          }
        },
        "OperatorGroups": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "guid"
          }
        },
        "ExtraEmailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Sla": {
      "type": "object",
      "properties": {
        "SlaGuid": {
          "type": "string",
          "description": "The unique key of this sla.",
          "format": "guid"
        },
        "Hash": {
          "type": "string",
          "description": "Hash corresponding with this sla."
        },
        "Description": {
          "type": "string",
          "description": "The description name of this sla."
        },
        "UptimeErrorThreshold": {
          "type": "number",
          "format": "double"
        },
        "UptimeWarningThreshold": {
          "type": "number",
          "format": "double"
        },
        "LoadTimeErrorThreshold": {
          "type": "number",
          "format": "double"
        },
        "OperatorReponseTimeThreshold": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ExclusionPeriod": {
      "type": "object",
      "properties": {
        "ExclusionPeriodId": {
          "type": "integer",
          "format": "int32"
        },
        "Description": {
          "type": "string"
        },
        "From": {
          "type": "string",
          "format": "date-time"
        },
        "Until": {
          "type": "string",
          "format": "date-time"
        },
        "Hash": {
          "type": "string"
        }
      }
    },
    "StatisticsResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Statistics"
          }
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "Statistics": {
      "type": "object",
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/StatisticsAttributes"
        },
        "Id": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "StatisticsAttributes": {
      "type": "object",
      "required": [
        "StartDateTime",
        "EndDateTime"
      ],
      "properties": {
        "StartDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "EndDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "Alerts": {
          "type": "integer",
          "format": "int32"
        },
        "SlaTarget": {
          "type": "number",
          "format": "double"
        },
        "SlaTargetTotalTime": {
          "type": "number",
          "format": "double"
        },
        "OperatorResponseTarget": {
          "type": "number",
          "format": "double"
        },
        "OperatorResponseTime": {
          "type": "number",
          "format": "double"
        },
        "DowntimePercentage": {
          "type": "number",
          "format": "double"
        },
        "UptimePercentage": {
          "type": "number",
          "format": "double"
        },
        "Checks": {
          "type": "integer",
          "format": "int64"
        },
        "ConfirmedErrors": {
          "type": "integer",
          "format": "int32"
        },
        "UnconfirmedErrors": {
          "type": "integer",
          "format": "int32"
        },
        "Uptime": {
          "type": "integer",
          "format": "int64"
        },
        "Downtime": {
          "type": "integer",
          "format": "int64"
        },
        "TotalTime": {
          "type": "number",
          "format": "decimal"
        },
        "ResolveTime": {
          "type": "number",
          "format": "decimal"
        },
        "ConnectionTime": {
          "type": "number",
          "format": "decimal"
        },
        "DownloadTime": {
          "type": "number",
          "format": "decimal"
        },
        "TotalBytes": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RelationObject": {
      "type": "object",
      "properties": {
        "Attributes": {},
        "Id": {},
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LinksData": {
      "type": "object",
      "description": "Links with reference to self and next data set",
      "properties": {
        "Next": {
          "type": "string",
          "description": "Url for next data set"
        },
        "Self": {
          "type": "string",
          "description": "Url for this data set (data might get updated, depending on your parameters)"
        }
      }
    },
    "MetaData": {
      "type": "object",
      "properties": {
        "Timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "Period": {
          "$ref": "#/definitions/PeriodMetaData"
        }
      }
    },
    "PeriodMetaData": {
      "type": "object",
      "required": [
        "MaximumRetentionDays"
      ],
      "properties": {
        "Warning": {
          "type": "string"
        },
        "MaximumRetentionDays": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AlertResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert"
          }
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        },
        "Cursors": {
          "description": "Cursors can be used to navigate the dataset in a fixed manner",
          "allOf": [
            {
              "$ref": "#/definitions/CursorsData"
            }
          ]
        }
      }
    },
    "Alert": {
      "type": "object",
      "description": "Represents the values/results of a single check done by a monitor",
      "required": [
        "Id"
      ],
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/AlertAttributes"
        },
        "Id": {
          "type": "string",
          "format": "guid"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AlertAttributes": {
      "type": "object",
      "description": "Alert attributes ",
      "required": [
        "AlertType",
        "MonitorGuid",
        "Timestamp",
        "FirstError",
        "MonitorCheckId",
        "FirstErrorMonitorCheckId"
      ],
      "properties": {
        "AlertType": {
          "description": "Alert type indicating if this was an Error or Ok alert.",
          "allOf": [
            {
              "$ref": "#/definitions/AlertType"
            }
          ]
        },
        "MonitorGuid": {
          "type": "string",
          "description": "The monitor identifier.",
          "format": "guid"
        },
        "Timestamp": {
          "type": "string",
          "description": "Date/time stamp of the alert.",
          "format": "date-time"
        },
        "FirstError": {
          "type": "string",
          "description": "Date/time stamp of the first monitor check.",
          "format": "date-time"
        },
        "MonitorCheckId": {
          "type": "integer",
          "description": "The Id of the monitor check that triggered this alert.",
          "format": "int64"
        },
        "FirstErrorMonitorCheckId": {
          "type": "integer",
          "description": "The Id of the first monitor check error that led to this alert.",
          "format": "int64"
        },
        "ErrorDescription": {
          "type": "string",
          "description": "A text value that describes the error that was found, or OK if no error was found."
        },
        "ErrorMessage": {
          "type": "string",
          "description": "Any additional error information, if available."
        },
        "IncidentKey": {
          "type": "string",
          "description": "The incident key of this alert."
        }
      }
    },
    "AlertType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Ok",
        "Error",
        "Reminder"
      ],
      "enum": [
        "Ok",
        "Error",
        "Reminder"
      ]
    },
    "CursorsData": {
      "type": "object",
      "description": "Cursors can be used to navigate the dataset in a fixed manner",
      "properties": {
        "Next": {
          "type": "string",
          "description": "Cursor for next data set"
        },
        "Self": {
          "type": "string",
          "description": "Cursor for this data set (data might get updated, depending on your parameters)"
        }
      }
    },
    "SortDirection": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Ascending",
        "Descending"
      ],
      "enum": [
        "Ascending",
        "Descending"
      ]
    },
    "Integration": {
      "type": "object",
      "required": [
        "IntegrationGuid",
        "Type"
      ],
      "properties": {
        "IntegrationGuid": {
          "type": "string",
          "description": "Guid of Integration in Alert Definition Escalation Level",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "Name of Integration in Alert Definition Escalation Level"
        },
        "Type": {
          "description": "Type of Integration in Alert Definition Escalation Level",
          "allOf": [
            {
              "$ref": "#/definitions/IntegrationTypeEnum"
            }
          ]
        },
        "ExtraEmailAddresses": {
          "type": "string",
          "description": "Extra emailadresses for this integration (if type == email)"
        },
        "StatusHubServiceList": {
          "type": "array",
          "description": "All statushubs for this integration (if type == statushub)",
          "items": {
            "$ref": "#/definitions/IntegrationServiceMap"
          }
        },
        "IntegrationServices": {
          "type": "array",
          "description": "All integrations services.",
          "items": {
            "type": "string",
            "format": "guid"
          }
        },
        "Hash": {
          "type": "string"
        }
      }
    },
    "IntegrationTypeEnum": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Slack",
        "PagerDuty",
        "Sms",
        "Email",
        "Phone",
        "Statushub",
        "GenericWebhook"
      ],
      "enum": [
        "Slack",
        "PagerDuty",
        "Sms",
        "Email",
        "Phone",
        "Statushub",
        "GenericWebhook"
      ]
    },
    "IntegrationServiceMap": {
      "type": "object",
      "required": [
        "MonitorGuid",
        "IntegrationServiceGuid"
      ],
      "properties": {
        "MonitorGuid": {
          "type": "string",
          "format": "guid"
        },
        "IntegrationServiceGuid": {
          "type": "string",
          "format": "guid"
        }
      }
    },
    "MonitorStatusResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "#/definitions/MonitorStatus"
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "MonitorStatus": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/MonitorStatusAttributes"
        },
        "Id": {
          "type": "string",
          "format": "guid"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonitorStatusAttributes": {
      "type": "object",
      "description": "Monitor Status attributes",
      "required": [
        "ErrorLevel",
        "UptimePercentage",
        "ErrorCode"
      ],
      "properties": {
        "ErrorLevel": {
          "description": "The error level for the monitor status",
          "allOf": [
            {
              "$ref": "#/definitions/LastErrorLevel"
            }
          ]
        },
        "LastCheck": {
          "type": "string",
          "description": "Last checked timeStamp for this monitor",
          "format": "date-time"
        },
        "CheckpointId": {
          "type": "integer",
          "description": "Checkpoint id for the monitor status",
          "format": "int32"
        },
        "ErrorDescription": {
          "type": "string",
          "description": "Error description for the monitor status"
        },
        "UptimePercentage": {
          "type": "number",
          "description": "Uptime percentage for the monitor status",
          "format": "double"
        },
        "ErrorCode": {
          "type": "integer",
          "description": "Error code for the monitor status",
          "format": "int32"
        },
        "LastMonitorCheckId": {
          "type": "integer",
          "description": "Last monitor check id",
          "format": "int64"
        }
      }
    },
    "LastErrorLevel": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "NoError",
        "Unconfirmed",
        "Confirmed",
        "Inactive",
        "Inconclusive"
      ],
      "enum": [
        "NoError",
        "Unconfirmed",
        "Confirmed",
        "Inactive",
        "Inconclusive"
      ]
    },
    "MonitorStatusListResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitorStatus"
          }
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "AlertDefinition": {
      "type": "object",
      "properties": {
        "AlertDefinitionGuid": {
          "type": "string",
          "description": "The unique key of this Alert Definition.",
          "format": "guid"
        },
        "Hash": {
          "type": "string",
          "description": "Hash corresponding with this alert definition."
        },
        "AlertName": {
          "type": "string",
          "description": "Name of this Alert Definition."
        },
        "IsActive": {
          "type": "boolean",
          "description": "Indicates whether this Alert Definition is active."
        }
      }
    },
    "AlertDefinitionMember": {
      "type": "object",
      "properties": {
        "MonitorGuid": {
          "type": "string",
          "description": "Guid of Monitor in Alert Definition",
          "format": "guid"
        },
        "MonitorGroupGuid": {
          "type": "string",
          "description": "Guid of GroupMonitor in Alert Definition",
          "format": "guid"
        }
      }
    },
    "AlertDefinitionMonitor": {
      "type": "object",
      "required": [
        "AlertDefinition",
        "Monitor"
      ],
      "properties": {
        "AlertDefinition": {
          "type": "string",
          "format": "guid"
        },
        "Monitor": {
          "type": "string",
          "format": "guid"
        }
      }
    },
    "AlertDefinitionMonitorGroup": {
      "type": "object",
      "required": [
        "AlertDefinition",
        "MonitorGroup"
      ],
      "properties": {
        "AlertDefinition": {
          "type": "string",
          "format": "guid"
        },
        "MonitorGroup": {
          "type": "string",
          "format": "guid"
        }
      }
    },
    "EscalationLevel": {
      "type": "object",
      "properties": {
        "EscalationMode": {
          "$ref": "#/definitions/EscalationMode"
        },
        "Id": {
          "type": "integer"
        },
        "ThresholdErrorCount": {
          "type": "integer",
          "format": "int32"
        },
        "ThresholdMinutes": {
          "type": "integer",
          "format": "int32"
        },
        "IsActive": {
          "type": "boolean"
        },
        "Message": {
          "type": "string"
        },
        "NumberOfReminders": {
          "type": "integer",
          "format": "int32"
        },
        "ReminderDelay": {
          "type": "integer",
          "format": "int32"
        },
        "IncludeTraceRoute": {
          "type": "boolean"
        },
        "Hash": {
          "type": "string",
          "description": "Hash corresponding with this escalation level."
        }
      }
    },
    "EscalationMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "AlertOnErrorCount",
        "AlertOnErrorDuration"
      ],
      "enum": [
        "AlertOnErrorCount",
        "AlertOnErrorDuration"
      ]
    },
    "AlertEscalationLevelMember": {
      "type": "object",
      "properties": {
        "OperatorGuid": {
          "type": "string",
          "description": "Guid of Operator in Alert Definition Escalation Level",
          "format": "guid"
        },
        "OperatorGroupGuid": {
          "type": "string",
          "description": "Guid of Group Operator in Alert Definition Escalation Level",
          "format": "guid"
        }
      }
    },
    "AlertDefinitionOperator": {
      "type": "object",
      "required": [
        "AlertDefinition",
        "Escalationlevel",
        "Operator"
      ],
      "properties": {
        "AlertDefinition": {
          "type": "string",
          "format": "guid"
        },
        "Escalationlevel": {
          "type": "integer"
        },
        "Operator": {
          "type": "string",
          "format": "guid"
        }
      }
    },
    "AlertDefinitionOperatorGroup": {
      "type": "object",
      "required": [
        "AlertDefinition",
        "Escalationlevel",
        "OperatorGroup"
      ],
      "properties": {
        "AlertDefinition": {
          "type": "string",
          "format": "guid"
        },
        "Escalationlevel": {
          "type": "integer"
        },
        "OperatorGroup": {
          "type": "string",
          "format": "guid"
        }
      }
    },
    "EscalationLevelIntegration": {
      "type": "object",
      "properties": {
        "IntegrationGuid": {
          "type": "string",
          "description": "The unique key of this Integration.",
          "format": "guid"
        },
        "ExtraEmailAddresses": {
          "type": "array",
          "description": "Extra email addresses",
          "items": {
            "type": "string"
          }
        },
        "ExtraEmailAddressesSpecified": {
          "type": "boolean",
          "description": "Specified Extra EmailAddresses For Patch request"
        },
        "StatusHubServiceList": {
          "type": "array",
          "description": "StatusHub Service Mapping",
          "items": {
            "$ref": "#/definitions/IntegrationServiceMap"
          }
        },
        "StatusHubServiceListSpecified": {
          "type": "boolean",
          "description": "Specified StatusHubServiceList For Patch request"
        },
        "IsActive": {
          "type": "boolean",
          "description": "Indicates whether this Integration is active."
        },
        "Hash": {
          "type": "string"
        }
      }
    },
    "CheckpointListResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Checkpoint2"
          }
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "Checkpoint2": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/CheckpointAttributes"
        },
        "Id": {
          "type": "integer"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CheckpointAttributes": {
      "type": "object",
      "description": "Checkpoint attributes",
      "required": [
        "IsPrimaryCheckpoint",
        "SupportsIpv6",
        "HasHighAvailability"
      ],
      "properties": {
        "CheckpointName": {
          "type": "string",
          "description": "The name of the checkpoint"
        },
        "Code": {
          "type": "string",
          "description": "Location code of the checkpoint"
        },
        "Ipv4Addresses": {
          "type": "array",
          "description": "Ipv4 addresses of the checkpoint ",
          "items": {
            "type": "string"
          }
        },
        "IpV6Addresses": {
          "type": "array",
          "description": "Ipv6 addresses of the checkpoint",
          "items": {
            "$ref": "#/definitions/IPv6Address"
          }
        },
        "IsPrimaryCheckpoint": {
          "type": "boolean",
          "description": "Checkpoint is primary"
        },
        "SupportsIpv6": {
          "type": "boolean",
          "description": "Checkpoint supports IPv6"
        },
        "HasHighAvailability": {
          "type": "boolean",
          "description": "Checkpoint has high availability"
        }
      }
    },
    "IPv6Address": {
      "type": "object",
      "description": "Ipv6 address",
      "required": [
        "IsNative"
      ],
      "properties": {
        "IpAddress": {
          "type": "string",
          "description": "The Ipv6 address"
        },
        "IsNative": {
          "type": "boolean",
          "description": "Is this a native v6 address?"
        }
      }
    },
    "CheckpointResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "#/definitions/Checkpoint2"
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "CheckpoinServerResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "#/definitions/CheckpointServer"
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "CheckpointServer": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/CheckpointServerAttributes"
        },
        "Id": {
          "type": "integer"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CheckpointServerAttributes": {
      "type": "object",
      "description": "Checkpoint server attributes",
      "properties": {
        "Ip4Address": {
          "type": "string",
          "description": "The ipv4 address"
        },
        "IpV6Address": {
          "type": "string",
          "description": "The ipv6 address"
        },
        "Capabilities": {
          "type": "array",
          "description": "List of server's capabilities",
          "items": {
            "$ref": "#/definitions/CapabilityFilterEnum"
          }
        }
      }
    },
    "CapabilityFilterEnum": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "IPv6",
        "NativeIPv6",
        "PrimaryServer",
        "HighAvailability"
      ],
      "enum": [
        "IPv6",
        "NativeIPv6",
        "PrimaryServer",
        "HighAvailability"
      ]
    },
    "ListStringResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "MonitorGroup": {
      "type": "object",
      "required": [
        "IsAll"
      ],
      "properties": {
        "MonitorGroupGuid": {
          "type": "string",
          "description": "The unique identifier of this monitor group",
          "format": "guid"
        },
        "Description": {
          "type": "string",
          "description": "The descriptive name of this probe group"
        },
        "IsAll": {
          "type": "boolean",
          "description": "Indicates whether this is the default group for all probes"
        }
      }
    },
    "MonitorGroupMember": {
      "type": "object",
      "required": [
        "MonitorGuid"
      ],
      "properties": {
        "MonitorGuid": {
          "type": "string",
          "description": "The unique identifier of this monitor",
          "format": "guid"
        }
      }
    },
    "MaintenancePeriod": {
      "type": "object",
      "required": [
        "Id",
        "ScheduleMode",
        "MaintenanceType"
      ],
      "properties": {
        "Id": {
          "type": "integer",
          "description": "The unique ID of this maintenance period",
          "format": "int32"
        },
        "ScheduleMode": {
          "description": "The schedule mode (one time, daily, weekly, monthly)",
          "allOf": [
            {
              "$ref": "#/definitions/ScheduleMode"
            }
          ]
        },
        "StartDateTime": {
          "type": "string",
          "description": "The start date/time for this schedule (for one-time schedules only)",
          "format": "date-time"
        },
        "EndDateTime": {
          "type": "string",
          "description": "The end date/time for this maintenance period (for one-time maintenance periods only)",
          "format": "date-time"
        },
        "WeekDay": {
          "description": "The weekday for this maintenance period (for weekly maintenance periods only)",
          "allOf": [
            {
              "$ref": "#/definitions/DayOfWeek"
            }
          ]
        },
        "MonthDay": {
          "type": "integer",
          "description": "the month day for this maintenance period (for montly maintenance periods only)",
          "format": "int32"
        },
        "StartTime": {
          "type": "string",
          "description": "The start time of this maintenance period"
        },
        "EndTime": {
          "type": "string",
          "description": "The end time of this maintenance period"
        },
        "MaintenanceType": {
          "description": "Indicates whether, during the maintenance periods, only alerting will be disabled, or if the entire monitor will be stopped",
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceTypes"
            }
          ]
        }
      }
    },
    "ScheduleMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "OneTime",
        "Daily",
        "Weekly",
        "Monthly"
      ],
      "enum": [
        "OneTime",
        "Daily",
        "Weekly",
        "Monthly"
      ]
    },
    "MaintenanceTypes": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "DisableMonitoring",
        "DisableNotifications"
      ],
      "enum": [
        "DisableMonitoring",
        "DisableNotifications"
      ]
    },
    "Operator": {
      "type": "object",
      "description": "Operator",
      "properties": {
        "OperatorGuid": {
          "type": "string",
          "description": "The unique identifier of this operator",
          "format": "guid"
        },
        "Hash": {
          "type": "string",
          "description": "The hash of this operator."
        },
        "Password": {
          "type": "string",
          "description": "The password is a required field if AllowNativeLogin is set to True"
        },
        "FullName": {
          "type": "string",
          "description": "The full name of this operator"
        },
        "Email": {
          "type": "string",
          "description": "The email address of this operator. This also serves as the username"
        },
        "MobilePhone": {
          "type": "string",
          "description": "The phone number of this operator to which SMS and phone alerts can be sent. Start with a plus (+) sign and your country code"
        },
        "OutgoingPhoneNumberId": {
          "type": "integer",
          "description": "The id of the phone number that will be used to send phone alerts (See /OutgoingPhoneNumber API under Miscellaneous for available ids)",
          "format": "int32"
        },
        "OutgoingPhoneNumberIdSpecified": {
          "type": "boolean"
        },
        "IsAccountAdministrator": {
          "type": "boolean",
          "description": "This indicates if the operator is the account administrator."
        },
        "BackupEmail": {
          "type": "string",
          "description": "The backup email address of this operator"
        },
        "IsOnDuty": {
          "type": "boolean",
          "description": "Indicates whether the operator is currently active"
        },
        "CultureName": {
          "type": "string",
          "description": "If ommitted the operator will use the account culture. If set it will override the account default"
        },
        "CultureNameSpecified": {
          "type": "boolean"
        },
        "TimeZoneId": {
          "type": "integer",
          "description": "The id of the timezone of this operator (See /Timezone API under Miscellaneous for available timezones)"
        },
        "TimeZoneIdSpecified": {
          "type": "boolean"
        },
        "SmsProvider": {
          "description": "The SMS provider used to send out SMS alerts",
          "allOf": [
            {
              "$ref": "#/definitions/SmsProvider"
            }
          ]
        },
        "UseNumericSender": {
          "type": "boolean",
          "description": "Set to True to override the default behavior of sending SMS alerts with textual sender ID"
        },
        "UseNumericSenderSpecified": {
          "type": "boolean"
        },
        "AllowNativeLogin": {
          "type": "boolean",
          "description": "This can only be set to false if the account has SSO enabled. Ommitting or providing null will use the account default"
        },
        "AllowNativeLoginSpecified": {
          "type": "boolean"
        },
        "AllowSingleSignon": {
          "type": "boolean",
          "description": "This can only be set to true if the account has SSO enabled. Ommitting or providing null will use the account default"
        },
        "AllowSingleSignonSpecified": {
          "type": "boolean"
        },
        "DefaultDashboard": {
          "type": "string"
        }
      }
    },
    "SmsProvider": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "UseAccountSetting",
        "SmsProviderEurope",
        "SmsProviderInternational",
        "SmsProviderEurope2",
        "SmsProviderUSA"
      ],
      "enum": [
        "UseAccountSetting",
        "SmsProviderEurope",
        "SmsProviderInternational",
        "SmsProviderEurope2",
        "SmsProviderUSA"
      ]
    },
    "OperatorMember": {
      "type": "object",
      "required": [
        "OperatorGroupGuid"
      ],
      "properties": {
        "OperatorGroupGuid": {
          "type": "string",
          "description": "The unique identifier of this Operator",
          "format": "guid"
        }
      }
    },
    "OperatorAuthorizationType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "AccountAccess"
      ],
      "enum": [
        "AccountAccess"
      ]
    },
    "OperatorDutySchedule": {
      "type": "object",
      "required": [
        "Id",
        "ScheduleMode"
      ],
      "properties": {
        "Id": {
          "type": "integer",
          "description": "The unique ID of this maintenance period",
          "format": "int32"
        },
        "ScheduleMode": {
          "description": "The schedule mode (one time, daily, weekly, monthly)",
          "allOf": [
            {
              "$ref": "#/definitions/OperatorScheduleMode"
            }
          ]
        },
        "StartDateTime": {
          "type": "string",
          "description": "The start date/time for this schedule (for one-time schedules only)",
          "format": "date-time"
        },
        "EndDateTime": {
          "type": "string",
          "description": "The end date/time for this maintenance period (for one-time maintenance periods only)",
          "format": "date-time"
        },
        "WeekDay": {
          "description": "The weekday for this maintenance period (for weekly maintenance periods only)",
          "allOf": [
            {
              "$ref": "#/definitions/DayOfWeek"
            }
          ]
        },
        "MonthDay": {
          "type": "integer",
          "description": "the month day for this maintenance period (for montly maintenance periods only)",
          "format": "int32"
        },
        "StartTime": {
          "type": "string",
          "description": "The start time of this maintenance period"
        },
        "EndTime": {
          "type": "string",
          "description": "The end time of this maintenance period"
        }
      }
    },
    "OperatorScheduleMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "OneTime",
        "Daily",
        "Weekly",
        "Monthly"
      ],
      "enum": [
        "OneTime",
        "Daily",
        "Weekly",
        "Monthly"
      ]
    },
    "Timezone": {
      "type": "object",
      "description": "Time zone available in Uptrends",
      "required": [
        "TimezoneId",
        "OffsetFromUtc",
        "HasDaylightSaving"
      ],
      "properties": {
        "TimezoneId": {
          "type": "integer",
          "description": "The time zone unique identifier"
        },
        "Description": {
          "type": "string",
          "description": "The description of the time zone"
        },
        "OffsetFromUtc": {
          "type": "integer",
          "description": "The offset from UTC in minutes (if this time zone runs behind UTC, the number is negative)"
        },
        "HasDaylightSaving": {
          "type": "boolean",
          "description": "Indicates whether or not this time zone uses Daylight Saving Time"
        },
        "DaylightSavingOffset": {
          "type": "integer",
          "description": "The time offset for Daylight Saving Time in minutes"
        }
      }
    },
    "OutgoingPhoneNumberDetails": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Id": {
          "type": "integer",
          "format": "int32"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "OperatorGroup": {
      "type": "object",
      "properties": {
        "OperatorGroupGuid": {
          "type": "string",
          "description": "The unique identifier of this Operator group",
          "format": "guid"
        },
        "Description": {
          "type": "string",
          "description": "The descriptive name of this operator group"
        },
        "IsEveryone": {
          "type": "boolean",
          "description": "Indicates whether this is the default group for all operators"
        },
        "IsAdministratorsGroup": {
          "type": "boolean"
        }
      }
    },
    "OperatorGroupMember": {
      "type": "object",
      "required": [
        "OperatorGuid"
      ],
      "properties": {
        "OperatorGuid": {
          "type": "string",
          "description": "The unique identifier of this Operator",
          "format": "guid"
        }
      }
    },
    "OperatorGroupAuthorization": {
      "type": "object",
      "required": [
        "AuthorizationType"
      ],
      "properties": {
        "AuthorizationId": {
          "type": "string",
          "format": "guid"
        },
        "AuthorizationType": {
          "$ref": "#/definitions/OperatorGroupAuthorizationType"
        },
        "OperatorGuid": {
          "type": "string",
          "format": "guid"
        },
        "OperatorGroupGuid": {
          "type": "string",
          "format": "guid"
        }
      }
    },
    "OperatorGroupAuthorizationType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "ShareDashboards",
        "AllowInfra",
        "Administrator",
        "TechnicalContact",
        "FinancialOperator",
        "BasicOperator"
      ],
      "enum": [
        "ShareDashboards",
        "AllowInfra",
        "Administrator",
        "TechnicalContact",
        "FinancialOperator",
        "BasicOperator"
      ]
    },
    "MonitorCheckResponse": {
      "type": "object",
      "description": "Response of the MonitorCheck endpoint",
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitorCheck"
          }
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        },
        "Cursors": {
          "description": "Cursors can be used to navigate the dataset in a fixed manner",
          "allOf": [
            {
              "$ref": "#/definitions/CursorsData"
            }
          ]
        }
      }
    },
    "MonitorCheck": {
      "type": "object",
      "description": "Represents the values/results of a single check done by a monitor",
      "required": [
        "Id"
      ],
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/MonitorCheckAttributes"
        },
        "Id": {
          "type": "integer",
          "format": "int64"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonitorCheckAttributes": {
      "type": "object",
      "description": "Monitor check attributes ",
      "required": [
        "MonitorGuid",
        "Timestamp",
        "ErrorCode",
        "TotalTime",
        "ResolveTime",
        "ConnectionTime",
        "DownloadTime",
        "ErrorLevel",
        "StagingMode",
        "IsPartialCheck"
      ],
      "properties": {
        "MonitorGuid": {
          "type": "string",
          "description": "Monitor identifier",
          "format": "guid"
        },
        "Timestamp": {
          "type": "string",
          "description": "Date/time stamp of the check",
          "format": "date-time"
        },
        "ErrorCode": {
          "type": "integer",
          "description": "The numeric Uptrends error code in case of an error result, or 0 in case of an OK result.",
          "format": "int32"
        },
        "TotalTime": {
          "type": "number",
          "description": "The number of milliseconds needed to complete the monitor check.",
          "format": "double"
        },
        "ResolveTime": {
          "type": "number",
          "description": "The number of milliseconds needed to perform the DNS query for this check, when appropriate.",
          "format": "double"
        },
        "ConnectionTime": {
          "type": "number",
          "description": "The number of milliseconds needed to establish a connection.",
          "format": "double"
        },
        "DownloadTime": {
          "type": "number",
          "description": "The number of milliseconds needed to download the response data.",
          "format": "double"
        },
        "TotalBytes": {
          "type": "integer",
          "description": "The number of downloaded bytes for this check.",
          "format": "int32"
        },
        "ResolvedIpAddress": {
          "type": "string",
          "description": "The IP address that was found for the specified domain name as part of this monitor check."
        },
        "ErrorLevel": {
          "description": "A value that represents the OK/Error state for this check: NoError if the result was OK, Unconfirmed if an error was found, Confirmed if an error was found as a double check, right after an Unconfirmed error.",
          "allOf": [
            {
              "$ref": "#/definitions/ErrorLevel"
            }
          ]
        },
        "ErrorDescription": {
          "type": "string",
          "description": "A text value that describes the error that was found, or OK if no error was found."
        },
        "ErrorMessage": {
          "type": "string",
          "description": "Any additional error information, if available."
        },
        "StagingMode": {
          "type": "boolean",
          "description": "Did the check come from a staging monitor?"
        },
        "ServerId": {
          "type": "integer",
          "description": "The Id of the Uptrends checkpoint server that performed this check.",
          "format": "int32"
        },
        "HttpStatusCode": {
          "type": "integer",
          "description": "The HTTP status code returned (if applicable)",
          "format": "int32"
        },
        "IsPartialCheck": {
          "type": "boolean",
          "description": "This is a partial concurrent measurement, part of a concurrent check"
        },
        "IsConcurrentCheck": {
          "type": "boolean",
          "description": "Is this a master concurrent check record"
        }
      }
    },
    "ErrorLevel": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "NoError",
        "Unconfirmed",
        "Confirmed"
      ],
      "enum": [
        "NoError",
        "Unconfirmed",
        "Confirmed"
      ]
    },
    "ErrorLevelFilter": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "NoError",
        "Unconfirmed",
        "Confirmed"
      ],
      "enum": [
        "NoError",
        "Unconfirmed",
        "Confirmed"
      ]
    },
    "SingleMonitorCheckResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "#/definitions/MonitorCheck"
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "HttpDetailsResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "#/definitions/HttpCheckDetails"
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "HttpCheckDetails": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/HttpAttributes"
        },
        "Id": {
          "type": "integer",
          "format": "int64"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "HttpAttributes": {
      "type": "object",
      "description": "Http details attributes",
      "properties": {
        "ResponseBody": {
          "type": "string",
          "description": "The HTML code retrieved from the target"
        },
        "ResponseHeaders": {
          "type": "string",
          "description": "The HTTP response headers retrieved from the target "
        }
      }
    },
    "MsaDetailsResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "#/definitions/HttpEngineCheckDetails"
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "HttpEngineCheckDetails": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/HttpEngineAttributes"
        },
        "Id": {
          "type": "integer",
          "format": "int64"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "HttpEngineAttributes": {
      "type": "object",
      "description": "HttpEngineAttributes describes the attributes of a Multi-step Api monitor check",
      "required": [
        "TotalSteps",
        "PassedSteps"
      ],
      "properties": {
        "StepResults": {
          "type": "array",
          "description": "The results of the steps ",
          "items": {
            "$ref": "#/definitions/HttpEngineStep"
          }
        },
        "TimingInfo": {
          "description": "Timing info",
          "allOf": [
            {
              "$ref": "#/definitions/StepTimingInfo"
            }
          ]
        },
        "TotalSteps": {
          "type": "integer",
          "description": "Number of total steps",
          "format": "int32"
        },
        "PassedSteps": {
          "type": "integer",
          "description": "Number of passed/succeed tests",
          "format": "int32"
        }
      }
    },
    "HttpEngineStep": {
      "type": "object",
      "description": "HttpEngineStep descriobes the results of a step in a Multi-step Api monitor",
      "required": [
        "ResponseCompleted",
        "StepExecuted",
        "TotalTime"
      ],
      "properties": {
        "StepName": {
          "type": "string",
          "description": "The name of the step"
        },
        "Url": {
          "type": "string",
          "description": "Url the step was executed on"
        },
        "HttpStatusCode": {
          "type": "string",
          "description": "The HTTP status code returned"
        },
        "HttpMethod": {
          "type": "string",
          "description": "Http method used in this step"
        },
        "HttpStatusDescription": {
          "type": "string",
          "description": "Step description"
        },
        "ResponseCompleted": {
          "type": "boolean",
          "description": "Did the response complete?"
        },
        "StepExecuted": {
          "type": "boolean",
          "description": "Was this step executed?"
        },
        "AssertionResultsInfo": {
          "description": "Results of the assertions in this step",
          "allOf": [
            {
              "$ref": "#/definitions/AssertionResultsInfo"
            }
          ]
        },
        "TotalTime": {
          "type": "integer",
          "description": "Number of milliseconds it took for this step to succeed",
          "format": "int64"
        },
        "ResponseHeaders": {
          "type": "string",
          "description": "Response headers"
        },
        "ResponseBody": {
          "type": "string",
          "description": "Response body"
        },
        "RequestHeaders": {
          "type": "string",
          "description": "Request headers send"
        },
        "RequestBody": {
          "type": "string",
          "description": "Request body send"
        }
      }
    },
    "AssertionResultsInfo": {
      "type": "object",
      "required": [
        "TotalAssertions",
        "PassedAssertions"
      ],
      "properties": {
        "TotalAssertions": {
          "type": "integer",
          "format": "int32"
        },
        "PassedAssertions": {
          "type": "integer",
          "format": "int32"
        },
        "AssertionInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssertionInfo"
          }
        }
      }
    },
    "AssertionInfo": {
      "type": "object",
      "description": "Information about a single assertion",
      "required": [
        "Completed",
        "Passed"
      ],
      "properties": {
        "Completed": {
          "type": "boolean",
          "description": "Was the assertion completed?"
        },
        "Passed": {
          "type": "boolean",
          "description": "Did the assertion pass?"
        },
        "Description": {
          "type": "string",
          "description": "Description"
        },
        "ExceptionDescription": {
          "type": "string",
          "description": "Discription of the exception trown if applicable"
        }
      }
    },
    "StepTimingInfo": {
      "type": "object",
      "required": [
        "StartUtc",
        "EndUtc",
        "ElapsedMilliseconds",
        "DelayMilliseconds",
        "IsValid"
      ],
      "properties": {
        "Description": {
          "type": "string"
        },
        "StartUtc": {
          "type": "string",
          "format": "date-time"
        },
        "EndUtc": {
          "type": "string",
          "format": "date-time"
        },
        "ElapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        },
        "DelayMilliseconds": {
          "type": "integer",
          "format": "int64"
        },
        "SubTimingInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepTimingInfo"
          }
        },
        "IsValid": {
          "type": "boolean",
          "description": "If true, this TimingInfo should be counted as part of the sum of its siblings. If false, the TimingInfo should be discarded (e.g. for PreDelays we don't want to count)."
        }
      }
    },
    "TransactionDetailsResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "#/definitions/TransactionCheckDetails"
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "TransactionCheckDetails": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/TransactionAttributes"
        },
        "Id": {
          "type": "integer",
          "format": "int64"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TransactionAttributes": {
      "type": "object",
      "properties": {
        "StepResults": {
          "type": "array",
          "description": "Results of the transaction steps",
          "items": {
            "$ref": "#/definitions/TransactionStepOResourceObject"
          }
        },
        "ResponseBody": {
          "type": "string",
          "description": "The HTML code returned in case of errors"
        }
      }
    },
    "TransactionStepOResourceObject": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/TransactionStep"
        },
        "Id": {
          "type": "integer",
          "format": "int32"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TransactionStep": {
      "type": "object",
      "description": "Describes one step in a transaction",
      "required": [
        "StepNumber",
        "TotalTime",
        "HasError"
      ],
      "properties": {
        "StepNumber": {
          "type": "integer",
          "description": "Step (index) number",
          "format": "int32"
        },
        "StepName": {
          "type": "string",
          "description": "The name of the step"
        },
        "TotalTime": {
          "type": "number",
          "description": "Number of milliseconds it took for this step to succeed",
          "format": "double"
        },
        "Elements": {
          "type": "array",
          "description": "Text representation of the step element results",
          "items": {
            "type": "string"
          }
        },
        "HasError": {
          "type": "boolean",
          "description": "Did this step result in an error?"
        }
      }
    },
    "WaterfallResponse": {
      "type": "object",
      "required": [
        "Id"
      ],
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/WaterfallInfo"
        },
        "Id": {
          "type": "integer",
          "format": "int64"
        },
        "Type": {
          "type": "string"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "WaterfallInfo": {
      "type": "object",
      "properties": {
        "Elements": {
          "type": "array",
          "description": "Elements in the waterfall",
          "items": {
            "$ref": "#/definitions/PageElement"
          }
        },
        "DomainGroupNames": {
          "type": "array",
          "description": "List of domain groups used in the waterfall elements",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PageElement": {
      "type": "object",
      "description": "Page element describes a page load/request (in a waterfall)",
      "required": [
        "Index",
        "StartTime",
        "ResolveTime",
        "ConnectTime",
        "StaleTime",
        "HttpsHandshakeTime",
        "SendTime",
        "WaitTime",
        "ReceiveTime",
        "TimeoutTime",
        "TotalTime",
        "HttpStatusCode",
        "TotalBytes",
        "UrlIsBlocked"
      ],
      "properties": {
        "Index": {
          "type": "integer",
          "description": "Index of the element in the waterfall context",
          "format": "int32"
        },
        "StartTime": {
          "type": "integer",
          "description": "Starting time in milliseconds",
          "format": "int32"
        },
        "ResolveTime": {
          "type": "integer",
          "description": "Number of milliseconds needed to perform the DNS query for this element, when appropriate.",
          "format": "int32"
        },
        "ConnectTime": {
          "type": "integer",
          "description": "Number of milliseconds needed to establish a connection.",
          "format": "int32"
        },
        "StaleTime": {
          "type": "integer",
          "description": "Number of milliseconds the connection was stale",
          "format": "int32"
        },
        "HttpsHandshakeTime": {
          "type": "integer",
          "description": "Number of milliseconds needed for the HTTPS handshake",
          "format": "int32"
        },
        "SendTime": {
          "type": "integer",
          "description": "Number of milliseconds it took to send data",
          "format": "int32"
        },
        "WaitTime": {
          "type": "integer",
          "description": "Number of milliseconds the connection was in waiting state",
          "format": "int32"
        },
        "ReceiveTime": {
          "type": "integer",
          "description": "Number of milliseconds it took to retrieve the data",
          "format": "int32"
        },
        "TimeoutTime": {
          "type": "integer",
          "description": "Number of milliseconds the connection was timed-out ",
          "format": "int32"
        },
        "TotalTime": {
          "type": "integer",
          "description": "Total number of milliseconds it took for the connection to complete",
          "format": "int32"
        },
        "HttpStatusCode": {
          "type": "integer",
          "description": "The Http status code",
          "format": "int32"
        },
        "Url": {
          "type": "string",
          "description": "The requested resource url"
        },
        "TotalBytes": {
          "type": "integer",
          "description": "Total number of downloaded bytes",
          "format": "int32"
        },
        "ElementType": {
          "type": "string",
          "description": "Requested resource element type, can be HTML, scripts, CSS, images, frames, objects, data and other"
        },
        "RequestHeaders": {
          "type": "string",
          "description": "The HTTP request headers used"
        },
        "ResponseHeaders": {
          "type": "string",
          "description": "The HTTP response headers retrieved"
        },
        "ResolvedIpAddress": {
          "description": "The IP address that was found for the specified domain name as part of this monitor check."
        },
        "GroupIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "UrlIsBlocked": {
          "type": "boolean",
          "description": "Was the Url excluded from waterfall (timing) data by the user?"
        }
      }
    },
    "ScreenshotResponse": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "string"
        },
        "Links": {
          "$ref": "#/definitions/LinksData"
        },
        "Relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationObject"
          }
        },
        "Meta": {
          "$ref": "#/definitions/MetaData"
        }
      }
    },
    "Monitor": {
      "type": "object",
      "properties": {
        "MonitorGuid": {
          "type": "string",
          "description": "The unique key of this monitor.",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "The name of this monitor."
        },
        "MonitorType": {
          "$ref": "#/definitions/MonitorType"
        },
        "GenerateAlert": {
          "type": "boolean",
          "description": "Indicates whether this monitor should generate alerts.",
          "default": true
        },
        "IsActive": {
          "type": "boolean",
          "description": "Indicates whether this monitor is actively running according to the monitoring interval.",
          "default": true
        },
        "IsLocked": {
          "type": "boolean",
          "description": "Indicates whether this monitor is locked."
        },
        "CustomFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "SelectedCheckpoints": {
          "$ref": "#/definitions/SelectedCheckpoints"
        },
        "UsePrimaryCheckpointsOnly": {
          "type": "boolean"
        },
        "CheckInterval": {
          "type": "integer",
          "description": "Indicates the interval in seconds"
        },
        "MonitorMode": {
          "default": "Production",
          "allOf": [
            {
              "$ref": "#/definitions/MonitorMode"
            }
          ]
        },
        "Notes": {
          "type": "string"
        },
        "Hash": {
          "type": "string",
          "description": "Hash corresponding with this monitor."
        },
        "SelfServiceTransactionScript": {
          "type": "string"
        },
        "BlockUptrendsRum": {
          "type": "boolean"
        },
        "BlockGoogleAnalytics": {
          "type": "boolean"
        },
        "BlockUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RequestHeaders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestHeader"
          }
        },
        "UserAgent": {
          "type": "string"
        },
        "LoadTimeLimit1": {
          "type": "integer",
          "format": "int32"
        },
        "AlertOnLoadTimeLimit1": {
          "type": "boolean"
        },
        "LoadTimeLimit2": {
          "type": "integer",
          "format": "int32"
        },
        "AlertOnLoadTimeLimit2": {
          "type": "boolean"
        },
        "Username": {
          "type": "string"
        },
        "AuthenticationType": {
          "$ref": "#/definitions/ApiHttpAuthenticationType"
        },
        "BrowserType": {
          "$ref": "#/definitions/BrowserType"
        },
        "BrowserWindowDimensions": {
          "$ref": "#/definitions/BrowserWindowDimensions"
        },
        "Credits": {
          "type": "integer",
          "format": "int32"
        },
        "PredefinedVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PredefinedVariable"
          }
        },
        "MsaSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MsaStep"
          }
        },
        "UserDefinedFunctions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDefinedFunction"
          }
        },
        "CustomMetrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomMetric"
          }
        },
        "Password": {
          "type": "string"
        },
        "NameForPhoneAlerts": {
          "type": "string"
        },
        "ThrottlingOptions": {
          "$ref": "#/definitions/ThrottlingOptions"
        },
        "TransactionStepDefinition": {
          "description": "Only valid for Transaction monitors: the data structure that specifies the transaction steps (and sub steps) to execute.",
          "allOf": [
            {
              "$ref": "#/definitions/TransactionStepDefinition"
            }
          ]
        },
        "CertificateName": {
          "type": "string"
        },
        "CertificateOrganization": {
          "type": "string"
        },
        "CertificateOrganizationalUnit": {
          "type": "string"
        },
        "CertificateSerialNumber": {
          "type": "string"
        },
        "CertificateFingerprint": {
          "type": "string"
        },
        "CertificateIssuerName": {
          "type": "string"
        },
        "CertificateIssuerCompanyName": {
          "type": "string"
        },
        "CertificateIssuerOrganizationalUnit": {
          "type": "string"
        },
        "CertificateExpirationWarningDays": {
          "type": "integer",
          "format": "int32"
        },
        "CheckCertificateErrors": {
          "type": "boolean"
        },
        "AlertOnMaximumBytes": {
          "type": "boolean"
        },
        "MaximumBytes": {
          "type": "integer",
          "format": "int32"
        },
        "AlertOnMaximumSize": {
          "type": "boolean"
        },
        "ElementMaximumSize": {
          "type": "integer",
          "format": "int32"
        },
        "IgnoreExternalElements": {
          "type": "boolean"
        },
        "AlertOnPercentageFail": {
          "type": "boolean"
        },
        "FailedObjectPercentage": {
          "type": "integer",
          "format": "int32"
        },
        "DomainGroupGuid": {
          "type": "string",
          "format": "guid"
        },
        "DomainGroupGuidSpecified": {
          "type": "boolean"
        },
        "DnsServer": {
          "type": "string"
        },
        "DnsQuery": {
          "$ref": "#/definitions/DnsQuery"
        },
        "DnsExpectedResult": {
          "type": "string"
        },
        "DnsTestValue": {
          "type": "string"
        },
        "Port": {
          "type": "integer",
          "format": "int32"
        },
        "IpVersion": {
          "$ref": "#/definitions/IpVersion"
        },
        "NativeIPv6Only": {
          "type": "boolean"
        },
        "AlertOnMinimumBytes": {
          "type": "boolean"
        },
        "MinimumBytes": {
          "type": "integer",
          "format": "int32"
        },
        "DatabaseName": {
          "type": "string"
        },
        "NetworkAddress": {
          "type": "string"
        },
        "ImapSecureConnection": {
          "type": "boolean"
        },
        "SftpAction": {
          "$ref": "#/definitions/SftpAction"
        },
        "SftpActionPath": {
          "type": "string"
        },
        "HttpMethod": {
          "$ref": "#/definitions/HttpMethod"
        },
        "ExpectedHttpStatusCode": {
          "type": "integer",
          "format": "int32"
        },
        "ExpectedHttpStatusCodeSpecified": {
          "type": "boolean"
        },
        "TlsVersion": {
          "$ref": "#/definitions/TlsVersion"
        },
        "RequestBody": {
          "type": "string"
        },
        "MatchPatterns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PatternMatch"
          }
        },
        "Url": {
          "type": "string"
        },
        "UseConcurrentMonitoring": {
          "type": "boolean"
        },
        "ConcurrentUnconfirmedErrorThreshold": {
          "type": "integer",
          "format": "int32"
        },
        "ConcurrentConfirmedErrorThreshold": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MonitorType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Http",
        "Https",
        "Connect",
        "Ping",
        "POP3",
        "SMTP",
        "FTP",
        "MySQL",
        "MSSQL",
        "WebserviceHttp",
        "WebserviceHttps",
        "Transaction",
        "DNS",
        "FullPageCheck",
        "RealBrowserCheck",
        "Certificate",
        "SFTP",
        "MultiStepApi",
        "IMAP"
      ],
      "enum": [
        "Http",
        "Https",
        "Connect",
        "Ping",
        "POP3",
        "SMTP",
        "FTP",
        "MySQL",
        "MSSQL",
        "WebserviceHttp",
        "WebserviceHttps",
        "Transaction",
        "DNS",
        "FullPageCheck",
        "RealBrowserCheck",
        "Certificate",
        "SFTP",
        "MultiStepApi",
        "IMAP"
      ]
    },
    "CustomField": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "SelectedCheckpoints": {
      "type": "object",
      "properties": {
        "Checkpoints": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "Regions": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "ExcludeLocations": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "MonitorMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Development",
        "Staging",
        "Production"
      ],
      "enum": [
        "Development",
        "Staging",
        "Production"
      ]
    },
    "RequestHeader": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "ApiHttpAuthenticationType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "Basic",
        "NTLM",
        "Digest"
      ],
      "enum": [
        "None",
        "Basic",
        "NTLM",
        "Digest"
      ]
    },
    "BrowserType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "IE",
        "Firefox",
        "Chrome",
        "Safari",
        "PhantomJS",
        "PhantomJS20"
      ],
      "enum": [
        "IE",
        "Firefox",
        "Chrome",
        "Safari",
        "PhantomJS",
        "PhantomJS20"
      ]
    },
    "BrowserWindowDimensions": {
      "type": "object",
      "required": [
        "IsMobile",
        "Width",
        "Height",
        "PixelRatio"
      ],
      "properties": {
        "IsMobile": {
          "type": "boolean"
        },
        "Width": {
          "type": "integer",
          "format": "int32"
        },
        "Height": {
          "type": "integer",
          "format": "int32"
        },
        "PixelRatio": {
          "type": "integer",
          "format": "int32"
        },
        "MobileDevice": {
          "type": "string"
        }
      }
    },
    "PredefinedVariable": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "MsaStep": {
      "type": "object",
      "required": [
        "UseFixedClientCertificate",
        "IgnoreCertificateErrors",
        "Delay",
        "StepType",
        "RetryUntilSuccessful",
        "MaxAttempts"
      ],
      "properties": {
        "Url": {
          "type": "string"
        },
        "Method": {
          "type": "string"
        },
        "Body": {
          "type": "string",
          "description": "The body that will be send in the request. Only used if BodyType equals Raw"
        },
        "BodyType": {
          "description": "Determines what kind of body the request will have.",
          "allOf": [
            {
              "$ref": "#/definitions/MsaBodyType"
            }
          ]
        },
        "VaultFileId": {
          "type": "string",
          "description": "The guid of the vaultfile that will be send in the request. Only used if BodyType equals VaultFiles",
          "format": "guid"
        },
        "RequestHeaders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiHttpHeaderValue"
          }
        },
        "Variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiVariableDefinition"
          }
        },
        "Assertions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiAssertion"
          }
        },
        "Name": {
          "type": "string"
        },
        "UseFixedClientCertificate": {
          "type": "boolean"
        },
        "Authentication": {
          "$ref": "#/definitions/ApiAuthenticationInfo"
        },
        "IgnoreCertificateErrors": {
          "type": "boolean"
        },
        "ClientCertificateVaultItem": {
          "type": "string",
          "format": "guid"
        },
        "Delay": {
          "type": "integer",
          "format": "int32"
        },
        "StepType": {
          "$ref": "#/definitions/MsaStepType"
        },
        "RetryUntilSuccessful": {
          "type": "boolean"
        },
        "MaxAttempts": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MsaBodyType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Raw",
        "VaultFiles"
      ],
      "enum": [
        "Raw",
        "VaultFiles"
      ]
    },
    "ApiHttpHeaderValue": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "ApiVariableDefinition": {
      "type": "object",
      "required": [
        "Source"
      ],
      "properties": {
        "Source": {
          "$ref": "#/definitions/ApiVariableSourceType"
        },
        "Property": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiVariableDefinition"
          }
        }
      }
    },
    "ApiVariableSourceType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "Constant",
        "Variable",
        "ResponseStatusCode",
        "ResponseStatusDescription",
        "ResponseBodyJson",
        "ResponseCompleted",
        "ResponseBodyText",
        "Fail",
        "ContentLengthCalculated",
        "Duration",
        "Sum",
        "Concatenation",
        "ToBase64",
        "ToSHA1Hex",
        "ToMD5Hex",
        "ResponseBodyXml",
        "ResponseHeader",
        "Cookie",
        "VariablesResolved",
        "CumulativeDuration",
        "ResponseHasException",
        "ExecuteFunction"
      ],
      "enum": [
        "None",
        "Constant",
        "Variable",
        "ResponseStatusCode",
        "ResponseStatusDescription",
        "ResponseBodyJson",
        "ResponseCompleted",
        "ResponseBodyText",
        "Fail",
        "ContentLengthCalculated",
        "Duration",
        "Sum",
        "Concatenation",
        "ToBase64",
        "ToSHA1Hex",
        "ToMD5Hex",
        "ResponseBodyXml",
        "ResponseHeader",
        "Cookie",
        "VariablesResolved",
        "CumulativeDuration",
        "ResponseHasException",
        "ExecuteFunction"
      ]
    },
    "ApiAssertion": {
      "type": "object",
      "required": [
        "Source",
        "Comparison"
      ],
      "properties": {
        "Source": {
          "$ref": "#/definitions/ApiAssertionSourceType"
        },
        "Property": {
          "type": "string"
        },
        "Comparison": {
          "$ref": "#/definitions/ApiComparisonType"
        },
        "TargetValue": {
          "type": "string"
        }
      }
    },
    "ApiAssertionSourceType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "Constant",
        "Variable",
        "ResponseStatusCode",
        "ResponseStatusDescription",
        "ResponseBodyJson",
        "ResponseCompleted",
        "ResponseBodyText",
        "Fail",
        "ContentLengthCalculated",
        "Duration",
        "Sum",
        "Concatenation",
        "ToBase64",
        "ToSHA1Hex",
        "ToMD5Hex",
        "ResponseBodyXml",
        "ResponseHeader",
        "Cookie",
        "VariablesResolved",
        "CumulativeDuration",
        "ResponseHasException"
      ],
      "enum": [
        "None",
        "Constant",
        "Variable",
        "ResponseStatusCode",
        "ResponseStatusDescription",
        "ResponseBodyJson",
        "ResponseCompleted",
        "ResponseBodyText",
        "Fail",
        "ContentLengthCalculated",
        "Duration",
        "Sum",
        "Concatenation",
        "ToBase64",
        "ToSHA1Hex",
        "ToMD5Hex",
        "ResponseBodyXml",
        "ResponseHeader",
        "Cookie",
        "VariablesResolved",
        "CumulativeDuration",
        "ResponseHasException"
      ]
    },
    "ApiComparisonType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Equal",
        "DoesNotEqual",
        "ContainsText",
        "DoesNotContainText",
        "ShouldBeIgnored",
        "LessThan",
        "GreaterThan",
        "LessThanOrEqual",
        "GreaterThanOrEqual",
        "IsNotEmpty"
      ],
      "enum": [
        "Equal",
        "DoesNotEqual",
        "ContainsText",
        "DoesNotContainText",
        "ShouldBeIgnored",
        "LessThan",
        "GreaterThan",
        "LessThanOrEqual",
        "GreaterThanOrEqual",
        "IsNotEmpty"
      ]
    },
    "ApiAuthenticationInfo": {
      "type": "object",
      "required": [
        "Id",
        "AuthenticationType",
        "PasswordSpecified"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "format": "guid"
        },
        "AuthenticationType": {
          "$ref": "#/definitions/ApiHttpAuthenticationType"
        },
        "UserName": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "PasswordSpecified": {
          "type": "boolean"
        }
      }
    },
    "MsaStepType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "HttpRequest",
        "Delay"
      ],
      "enum": [
        "HttpRequest",
        "Delay"
      ]
    },
    "UserDefinedFunction": {
      "type": "object",
      "required": [
        "Type"
      ],
      "properties": {
        "Name": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/UserDefinedFunctionType"
        },
        "Mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDefinedFunctionMapping"
          }
        },
        "Regex": {
          "type": "string"
        },
        "JwtSigningKey": {
          "type": "string",
          "description": "This property is not supported yet"
        },
        "JwtAlgorithm": {
          "description": "This property is not supported yet",
          "allOf": [
            {
              "$ref": "#/definitions/JwtAlgorithm"
            }
          ]
        }
      }
    },
    "UserDefinedFunctionType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Mapping",
        "Regex",
        "JwtEncode",
        "JwtDecode"
      ],
      "enum": [
        "Mapping",
        "Regex",
        "JwtEncode",
        "JwtDecode"
      ]
    },
    "UserDefinedFunctionMapping": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "JwtAlgorithm": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "HS256",
        "HS384",
        "HS512"
      ],
      "enum": [
        "HS256",
        "HS384",
        "HS512"
      ]
    },
    "CustomMetric": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "VariableName": {
          "type": "string"
        }
      }
    },
    "ThrottlingOptions": {
      "type": "object",
      "properties": {
        "ThrottlingType": {
          "$ref": "#/definitions/ThrottlingType"
        },
        "ThrottlingValue": {
          "$ref": "#/definitions/ThrottlingValue"
        },
        "ThrottlingSpeedUp": {
          "type": "integer",
          "format": "int32"
        },
        "ThrottlingSpeedDown": {
          "type": "integer",
          "format": "int32"
        },
        "ThrottlingLatency": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ThrottlingType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Inactive",
        "Browser",
        "Simulated"
      ],
      "enum": [
        "Inactive",
        "Browser",
        "Simulated"
      ]
    },
    "ThrottlingValue": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Adsl",
        "Fiber",
        "Cable",
        "_2G",
        "_3G",
        "_4G"
      ],
      "enum": [
        "Adsl",
        "Fiber",
        "Cable",
        "2G",
        "3G",
        "4G"
      ]
    },
    "TransactionStepDefinition": {
      "type": "object",
      "properties": {
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionStep2"
          }
        }
      }
    },
    "TransactionStep2": {
      "type": "object",
      "required": [
        "HasScreenshot",
        "HasWaterfall"
      ],
      "properties": {
        "Name": {
          "type": "string"
        },
        "HasScreenshot": {
          "type": "boolean"
        },
        "HasWaterfall": {
          "type": "boolean"
        },
        "SubSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionSubStep"
          }
        }
      }
    },
    "TransactionSubStep": {
      "type": "object",
      "required": [
        "Type"
      ],
      "properties": {
        "Name": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/SubStepType"
        },
        "Url": {
          "type": "string"
        },
        "SetValue": {
          "type": "string"
        }
      }
    },
    "SubStepType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Navigate",
        "Click",
        "Set",
        "Test",
        "Script",
        "Hover",
        "Screenshot",
        "ScrollTo",
        "WaitForElement",
        "SwitchToFrame",
        "SwitchToTab"
      ],
      "enum": [
        "Navigate",
        "Click",
        "Set",
        "Test",
        "Script",
        "Hover",
        "Screenshot",
        "ScrollTo",
        "WaitForElement",
        "SwitchToFrame",
        "SwitchToTab"
      ]
    },
    "DnsQuery": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "ARecord",
        "CnameRecord",
        "MxRecord",
        "NsRecord",
        "TxtRecord",
        "SoaRecord",
        "RootServer",
        "AaaaRecord",
        "SrvRecord"
      ],
      "enum": [
        "ARecord",
        "CnameRecord",
        "MxRecord",
        "NsRecord",
        "TxtRecord",
        "SoaRecord",
        "RootServer",
        "AaaaRecord",
        "SrvRecord"
      ]
    },
    "IpVersion": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "IpV4",
        "IpV6"
      ],
      "enum": [
        "IpV4",
        "IpV6"
      ]
    },
    "SftpAction": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "ConnectOnly",
        "TestFileExists",
        "TestFileDoesNotExist",
        "DownLoadFile"
      ],
      "enum": [
        "ConnectOnly",
        "TestFileExists",
        "TestFileDoesNotExist",
        "DownLoadFile"
      ]
    },
    "HttpMethod": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Get",
        "Post"
      ],
      "enum": [
        "Get",
        "Post"
      ]
    },
    "TlsVersion": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Tls12",
        "Tls11",
        "Tls10",
        "Tls12_Tls11",
        "Tls11_Tls10",
        "Tls12_Tls11_Tls10",
        "Tls12_Tls11_Tls10_WithFallback"
      ],
      "enum": [
        "Tls12",
        "Tls11",
        "Tls10",
        "Tls12_Tls11",
        "Tls11_Tls10",
        "Tls12_Tls11_Tls10",
        "Tls12_Tls11_Tls10_WithFallback"
      ]
    },
    "PatternMatch": {
      "type": "object",
      "required": [
        "IsPositive"
      ],
      "properties": {
        "Pattern": {
          "type": "string"
        },
        "IsPositive": {
          "type": "boolean"
        },
        "DateTime": {
          "$ref": "#/definitions/DateTimePatternMatch"
        }
      }
    },
    "DateTimePatternMatch": {
      "type": "object",
      "required": [
        "OffsetUTC",
        "MaxDifference"
      ],
      "properties": {
        "OffsetUTC": {
          "type": "integer",
          "format": "int32"
        },
        "MaxDifference": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RegistrationResponse": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "UserName": {
          "type": "string",
          "description": "The username of the new API account"
        },
        "Password": {
          "type": "string",
          "description": "The password of the new API account"
        },
        "AccountId": {
          "type": "string",
          "description": "The Uptrends Account Id for which the new API account was created"
        },
        "OperatorName": {
          "type": "string",
          "description": "The Uptrends Operator on behalf of whom the new API account was created"
        },
        "status": {
          "$ref": "#/definitions/RegisterStatus"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "RegisterStatus": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "OK",
        "UnexpectedError"
      ],
      "enum": [
        "OK",
        "UnexpectedError"
      ]
    },
    "VaultItem": {
      "type": "object",
      "properties": {
        "VaultItemGuid": {
          "type": "string",
          "description": "The unique key of this vault item",
          "format": "guid"
        },
        "Hash": {
          "type": "string",
          "description": "The hash of this vault item"
        },
        "Name": {
          "type": "string",
          "description": "The name of this vault item"
        },
        "Value": {
          "type": "string",
          "description": "The value that is stored in this vault item. Not used for Certificate Archives"
        },
        "VaultSectionGuid": {
          "type": "string",
          "description": "The unique identifier of the vault section that this vault item belongs to",
          "format": "guid"
        },
        "VaultItemType": {
          "description": "The vault item type",
          "allOf": [
            {
              "$ref": "#/definitions/VaultItemTypes"
            }
          ]
        },
        "IsSensitive": {
          "type": "boolean",
          "description": "Whether or not the vault item is considered sensitive. "
        },
        "Notes": {
          "type": "string",
          "description": "Notes about this vault item"
        },
        "UserName": {
          "type": "string",
          "description": "The UserName of a credentialset"
        },
        "Password": {
          "type": "string",
          "description": "The password associated with a credentialset"
        },
        "CertificateArchive": {
          "description": "The certificate archive that is stored in this vault item, if applicable",
          "allOf": [
            {
              "$ref": "#/definitions/CertificateArchive"
            }
          ]
        },
        "FileInfo": {
          "description": "The file info that is stored in this vault item, if applicable",
          "allOf": [
            {
              "$ref": "#/definitions/FileInfo"
            }
          ]
        }
      }
    },
    "VaultItemTypes": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "CredentialSet",
        "Certificate",
        "Text",
        "CertificateArchive",
        "File"
      ],
      "enum": [
        "CredentialSet",
        "Certificate",
        "Text",
        "CertificateArchive",
        "File"
      ]
    },
    "CertificateArchive": {
      "type": "object",
      "required": [
        "NotBefore",
        "NotAfter"
      ],
      "properties": {
        "Issuer": {
          "type": "string",
          "description": "The issuer of this certificate"
        },
        "NotBefore": {
          "type": "string",
          "description": "The start date of this certificate",
          "format": "date-time"
        },
        "NotAfter": {
          "type": "string",
          "description": "The certificate expiry date",
          "format": "date-time"
        },
        "Password": {
          "type": "string",
          "description": "Used to specify a new or changed password. The value will be encrypted when stored, and will not be displayed when a CertificateArchive is retrieved."
        },
        "ArchiveData": {
          "type": "string",
          "description": "Used to specify the certificate content as a base64 string. The value will be encrypted when stored, and will not be displayed when a CertificateArchive is retrieved."
        }
      }
    },
    "FileInfo": {
      "type": "object",
      "required": [
        "Size"
      ],
      "properties": {
        "Data": {
          "type": "string"
        },
        "Name": {
          "type": "string",
          "description": "Name of the uploaded file."
        },
        "Size": {
          "type": "integer",
          "description": "Size of the uploaded file.",
          "format": "int32"
        }
      }
    },
    "VaultSection": {
      "type": "object",
      "required": [
        "VaultSectionGuid"
      ],
      "properties": {
        "VaultSectionGuid": {
          "type": "string",
          "description": "The Guid of this vault section",
          "format": "guid"
        },
        "Name": {
          "type": "string",
          "description": "The name for this vault section"
        }
      }
    },
    "VaultSectionAuthorization": {
      "type": "object",
      "required": [
        "AuthorizationType"
      ],
      "properties": {
        "AuthorizationId": {
          "type": "string",
          "format": "guid"
        },
        "AuthorizationType": {
          "$ref": "#/definitions/VaultSectionAuthorizationType"
        },
        "OperatorGuid": {
          "type": "string",
          "format": "guid"
        },
        "OperatorGroupGuid": {
          "type": "string",
          "format": "guid"
        }
      }
    },
    "VaultSectionAuthorizationType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "ViewVaultSection",
        "ChangeVaultSection"
      ],
      "enum": [
        "ViewVaultSection",
        "ChangeVaultSection"
      ]
    }
  },
  "securityDefinitions": {
    "basicauth": {
      "type": "basic",
      "description": "Authentication with API account",
      "name": "BasicAuth"
    },
    "user-basicauth": {
      "type": "basic",
      "description": "Authentication with user account (for API account registration only)",
      "name": "User Basic Auth"
    }
  },
  "tags": [
    {
      "name": "Account",
      "description": "Getting account data"
    },
    {
      "name": "Checkpoint",
      "description": "Retrieving checkpoints and checkpoint servers"
    },
    {
      "name": "Dashboard",
      "description": "Modifying dashboards"
    },
    {
      "name": "PublicStatusPage",
      "description": "Modifying public status pages"
    },
    {
      "name": "ScheduledReport",
      "description": "Modifying scheduled reports"
    },
    {
      "name": "SLA",
      "description": "Getting SLA data"
    },
    {
      "name": "Statistics",
      "description": "Retrieving statistics data"
    },
    {
      "name": "Alert",
      "description": "Getting alert data"
    },
    {
      "name": "Integration",
      "description": "Retrieving integrations"
    },
    {
      "name": "Status",
      "description": "Retrieving status"
    },
    {
      "name": "AlertDefinition",
      "description": "Modifying alert definitions"
    },
    {
      "name": "MonitorGroup",
      "description": "Working with monitor groups"
    },
    {
      "name": "Operator",
      "description": "Working with operators"
    },
    {
      "name": "Miscellaneous",
      "description": "Miscellaneous operations"
    },
    {
      "name": "OperatorGroup",
      "description": "Working with operator groups"
    },
    {
      "name": "MonitorCheck",
      "description": "Getting monitor check data"
    },
    {
      "name": "Monitor",
      "description": "Modifying monitors"
    },
    {
      "name": "Register",
      "description": "Creating a new API account"
    },
    {
      "name": "Vault",
      "description": "Vault operations"
    }
  ]
}