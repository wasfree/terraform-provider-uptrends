/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// ApiAssertion struct for ApiAssertion
type ApiAssertion struct {
	Source ApiAssertionSourceType `json:"Source"`
	Property *string `json:"Property,omitempty"`
	Comparison ApiComparisonType `json:"Comparison"`
	TargetValue *string `json:"TargetValue,omitempty"`
}

// NewApiAssertion instantiates a new ApiAssertion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAssertion(source ApiAssertionSourceType, comparison ApiComparisonType) *ApiAssertion {
	this := ApiAssertion{}
	this.Source = source
	this.Comparison = comparison
	return &this
}

// NewApiAssertionWithDefaults instantiates a new ApiAssertion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAssertionWithDefaults() *ApiAssertion {
	this := ApiAssertion{}
	return &this
}

// GetSource returns the Source field value
func (o *ApiAssertion) GetSource() ApiAssertionSourceType {
	if o == nil {
		var ret ApiAssertionSourceType
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ApiAssertion) GetSourceOk() (*ApiAssertionSourceType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ApiAssertion) SetSource(v ApiAssertionSourceType) {
	o.Source = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *ApiAssertion) GetProperty() string {
	if o == nil || isNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAssertion) GetPropertyOk() (*string, bool) {
	if o == nil || isNil(o.Property) {
    return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *ApiAssertion) HasProperty() bool {
	if o != nil && !isNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *ApiAssertion) SetProperty(v string) {
	o.Property = &v
}

// GetComparison returns the Comparison field value
func (o *ApiAssertion) GetComparison() ApiComparisonType {
	if o == nil {
		var ret ApiComparisonType
		return ret
	}

	return o.Comparison
}

// GetComparisonOk returns a tuple with the Comparison field value
// and a boolean to check if the value has been set.
func (o *ApiAssertion) GetComparisonOk() (*ApiComparisonType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Comparison, true
}

// SetComparison sets field value
func (o *ApiAssertion) SetComparison(v ApiComparisonType) {
	o.Comparison = v
}

// GetTargetValue returns the TargetValue field value if set, zero value otherwise.
func (o *ApiAssertion) GetTargetValue() string {
	if o == nil || isNil(o.TargetValue) {
		var ret string
		return ret
	}
	return *o.TargetValue
}

// GetTargetValueOk returns a tuple with the TargetValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAssertion) GetTargetValueOk() (*string, bool) {
	if o == nil || isNil(o.TargetValue) {
    return nil, false
	}
	return o.TargetValue, true
}

// HasTargetValue returns a boolean if a field has been set.
func (o *ApiAssertion) HasTargetValue() bool {
	if o != nil && !isNil(o.TargetValue) {
		return true
	}

	return false
}

// SetTargetValue gets a reference to the given string and assigns it to the TargetValue field.
func (o *ApiAssertion) SetTargetValue(v string) {
	o.TargetValue = &v
}

func (o ApiAssertion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Source"] = o.Source
	}
	if !isNil(o.Property) {
		toSerialize["Property"] = o.Property
	}
	if true {
		toSerialize["Comparison"] = o.Comparison
	}
	if !isNil(o.TargetValue) {
		toSerialize["TargetValue"] = o.TargetValue
	}
	return json.Marshal(toSerialize)
}

type NullableApiAssertion struct {
	value *ApiAssertion
	isSet bool
}

func (v NullableApiAssertion) Get() *ApiAssertion {
	return v.value
}

func (v *NullableApiAssertion) Set(val *ApiAssertion) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAssertion) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAssertion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAssertion(val *ApiAssertion) *NullableApiAssertion {
	return &NullableApiAssertion{value: val, isSet: true}
}

func (v NullableApiAssertion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAssertion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


