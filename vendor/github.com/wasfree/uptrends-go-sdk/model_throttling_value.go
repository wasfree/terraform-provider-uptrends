/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// ThrottlingValue 
type ThrottlingValue string

// List of ThrottlingValue
const (
	THROTTLINGVALUE_ADSL ThrottlingValue = "Adsl"
	THROTTLINGVALUE_FIBER ThrottlingValue = "Fiber"
	THROTTLINGVALUE_CABLE ThrottlingValue = "Cable"
	THROTTLINGVALUE__2_G ThrottlingValue = "2G"
	THROTTLINGVALUE__3_G ThrottlingValue = "3G"
	THROTTLINGVALUE__4_G ThrottlingValue = "4G"
)

// All allowed values of ThrottlingValue enum
var AllowedThrottlingValueEnumValues = []ThrottlingValue{
	"Adsl",
	"Fiber",
	"Cable",
	"2G",
	"3G",
	"4G",
}

func (v *ThrottlingValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThrottlingValue(value)
	for _, existing := range AllowedThrottlingValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThrottlingValue", value)
}

// NewThrottlingValueFromValue returns a pointer to a valid ThrottlingValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThrottlingValueFromValue(v string) (*ThrottlingValue, error) {
	ev := ThrottlingValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThrottlingValue: valid values are %v", v, AllowedThrottlingValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThrottlingValue) IsValid() bool {
	for _, existing := range AllowedThrottlingValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ThrottlingValue value
func (v ThrottlingValue) Ptr() *ThrottlingValue {
	return &v
}

type NullableThrottlingValue struct {
	value *ThrottlingValue
	isSet bool
}

func (v NullableThrottlingValue) Get() *ThrottlingValue {
	return v.value
}

func (v *NullableThrottlingValue) Set(val *ThrottlingValue) {
	v.value = val
	v.isSet = true
}

func (v NullableThrottlingValue) IsSet() bool {
	return v.isSet
}

func (v *NullableThrottlingValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThrottlingValue(val *ThrottlingValue) *NullableThrottlingValue {
	return &NullableThrottlingValue{value: val, isSet: true}
}

func (v NullableThrottlingValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThrottlingValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

