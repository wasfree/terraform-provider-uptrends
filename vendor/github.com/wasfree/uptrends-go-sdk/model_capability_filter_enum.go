/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
	"fmt"
)

// CapabilityFilterEnum 
type CapabilityFilterEnum string

// List of CapabilityFilterEnum
const (
	CAPABILITYFILTERENUM_IPV6 CapabilityFilterEnum = "IPv6"
	CAPABILITYFILTERENUM_PRIMARY_SERVER CapabilityFilterEnum = "PrimaryServer"
	CAPABILITYFILTERENUM_HIGH_AVAILABILITY CapabilityFilterEnum = "HighAvailability"
	CAPABILITYFILTERENUM_FIDDLER_PROXY CapabilityFilterEnum = "FiddlerProxy"
	CAPABILITYFILTERENUM_FIREFOX CapabilityFilterEnum = "Firefox"
)

// All allowed values of CapabilityFilterEnum enum
var AllowedCapabilityFilterEnumEnumValues = []CapabilityFilterEnum{
	"IPv6",
	"PrimaryServer",
	"HighAvailability",
	"FiddlerProxy",
	"Firefox",
}

func (v *CapabilityFilterEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CapabilityFilterEnum(value)
	for _, existing := range AllowedCapabilityFilterEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CapabilityFilterEnum", value)
}

// NewCapabilityFilterEnumFromValue returns a pointer to a valid CapabilityFilterEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCapabilityFilterEnumFromValue(v string) (*CapabilityFilterEnum, error) {
	ev := CapabilityFilterEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CapabilityFilterEnum: valid values are %v", v, AllowedCapabilityFilterEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CapabilityFilterEnum) IsValid() bool {
	for _, existing := range AllowedCapabilityFilterEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CapabilityFilterEnum value
func (v CapabilityFilterEnum) Ptr() *CapabilityFilterEnum {
	return &v
}

type NullableCapabilityFilterEnum struct {
	value *CapabilityFilterEnum
	isSet bool
}

func (v NullableCapabilityFilterEnum) Get() *CapabilityFilterEnum {
	return v.value
}

func (v *NullableCapabilityFilterEnum) Set(val *CapabilityFilterEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilityFilterEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilityFilterEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilityFilterEnum(val *CapabilityFilterEnum) *NullableCapabilityFilterEnum {
	return &NullableCapabilityFilterEnum{value: val, isSet: true}
}

func (v NullableCapabilityFilterEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilityFilterEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

