/*
Uptrends API v4

This document describes Uptrends API version 4. This Swagger environment also lets you execute API methods directly.  Please note that this is not a sandbox environment: these API methods operate directly on your actual Uptrends account.  For more information, please visit https://www.uptrends.com/api.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package uptrends

import (
	"encoding/json"
)

// CheckpointRegion struct for CheckpointRegion
type CheckpointRegion struct {
	Id int32 `json:"Id"`
	Name *string `json:"Name,omitempty"`
	ChildRegions []int32 `json:"ChildRegions,omitempty"`
}

// NewCheckpointRegion instantiates a new CheckpointRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckpointRegion(id int32) *CheckpointRegion {
	this := CheckpointRegion{}
	this.Id = id
	return &this
}

// NewCheckpointRegionWithDefaults instantiates a new CheckpointRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckpointRegionWithDefaults() *CheckpointRegion {
	this := CheckpointRegion{}
	return &this
}

// GetId returns the Id field value
func (o *CheckpointRegion) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CheckpointRegion) GetIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CheckpointRegion) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CheckpointRegion) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointRegion) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CheckpointRegion) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CheckpointRegion) SetName(v string) {
	o.Name = &v
}

// GetChildRegions returns the ChildRegions field value if set, zero value otherwise.
func (o *CheckpointRegion) GetChildRegions() []int32 {
	if o == nil || isNil(o.ChildRegions) {
		var ret []int32
		return ret
	}
	return o.ChildRegions
}

// GetChildRegionsOk returns a tuple with the ChildRegions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointRegion) GetChildRegionsOk() ([]int32, bool) {
	if o == nil || isNil(o.ChildRegions) {
    return nil, false
	}
	return o.ChildRegions, true
}

// HasChildRegions returns a boolean if a field has been set.
func (o *CheckpointRegion) HasChildRegions() bool {
	if o != nil && !isNil(o.ChildRegions) {
		return true
	}

	return false
}

// SetChildRegions gets a reference to the given []int32 and assigns it to the ChildRegions field.
func (o *CheckpointRegion) SetChildRegions(v []int32) {
	o.ChildRegions = v
}

func (o CheckpointRegion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !isNil(o.ChildRegions) {
		toSerialize["ChildRegions"] = o.ChildRegions
	}
	return json.Marshal(toSerialize)
}

type NullableCheckpointRegion struct {
	value *CheckpointRegion
	isSet bool
}

func (v NullableCheckpointRegion) Get() *CheckpointRegion {
	return v.value
}

func (v *NullableCheckpointRegion) Set(val *CheckpointRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckpointRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckpointRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckpointRegion(val *CheckpointRegion) *NullableCheckpointRegion {
	return &NullableCheckpointRegion{value: val, isSet: true}
}

func (v NullableCheckpointRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckpointRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


